{"version":3,"names":["Config","centerWave","wave","sum","i","length","average","performIntegral","push","Float32Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","cumulative","newWave","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","PI","cos","sin","generateSquareWave","phaseWidth","sineWaveLength","centerPoint","generateSawWave","inverse","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggioPatternType","arpeggio","arpeggioPatternListPicker","arpeggioPattern","toNameMap","array","dictionary","value","name","result","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","effectsIncludeNoteFilter","effectsIncludeDistortion","effectsIncludeBitcrusher","effectsIncludePanning","effectsIncludeChorus","effectsIncludeEcho","effectsIncludeReverb","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","normalArpeggioPatterns","legacyArpeggioPatterns","scrambleArpeggioPatterns","oscillateArpeggioPatterns","escalateArpeggioPatterns","shiftArpeggioPatterns","normalBounceArpeggioPatterns","scrambleBounceArpeggioPatterns","oscillateBounceArpeggioPatterns","escalateBounceArpeggioPatterns","shiftBounceArpeggioPatterns","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","rawChipWaves","expression","chipWaves","raw","newArray","Array","Object","assign","key","rawChipToIntegrated","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","filterMorphCount","filterSimpleCutRange","filterSimplePeakRange","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","type","delayTicks","vibratoTypes","periodsSeconds","period","arpSpeedScale","strumSpeedScale","slideSpeedScale","unisons","voices","spread","offset","sign","effectNames","effectOrder","noteSizeMax","volumeRange","volumeLogScale","panCenter","panMax","panDelaySecondsMax","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","max","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","maxPitchOrOperatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthRange","pulseWidthStepPower","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","pitchOctaves","modCount","maxPitch","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","detuneMin","songDetuneMin","songDetuneMax","sineWaveMask","sineWave","generateSineWave","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","compatibleInstruments","operatorWaves","asin","generateTriWave","drive","generateTrapezoidWave","j","generateClangNoise","generateMetalNoise","round","generateRoundedSineWave","generateSecantWave","generateDoubleSineWave","pwmOperatorWaves","barEditorHeight","modulators","pianoName","maxRawVol","newNoteVol","forSong","convertRealFactor","associatedEffect","promptName","promptDesc","ceil","applyElementArgs","element","args","args_1","__values","args_1_1","next","done","arg","Node","appendChild","document","createTextNode","isArray","Symbol","iterator","__spread","constructor","Element","_d","e_2","_e","setAttribute","join","console","warn","tagName","_f","e_3","_g","styleKey","style","setProperty","removeAttribute","svgNS","HTML","_i","arguments","createRange","createContextualFragment","SVG","fragment","createDocumentFragment","svgParser","DOMParser","parseFromString","documentElement","firstChild","importNode","name_1","createElement","_c","split","name_2","createElementNS","test","snakeCaseName","replace","ColorConfig","resetColors","this","colorLookup","clear","getComputedChannelColor","song","channel","usesColorFormula","getChannelColor","base","regex","secondaryChannel","getComputed","exec","primaryChannel","secondaryNote","primaryNote","has","get","pitchChannelCount","newChannelColors","c_pitchSecondaryChannelHue","c_pitchSecondaryChannelHueScale","c_pitchSecondaryChannelSat","c_pitchSecondaryChannelSatScale","floor","c_pitchSecondaryChannelLum","c_pitchSecondaryChannelLumScale","c_pitchPrimaryChannelHue","c_pitchPrimaryChannelHueScale","c_pitchPrimaryChannelSat","c_pitchPrimaryChannelSatScale","c_pitchPrimaryChannelLum","c_pitchPrimaryChannelLumScale","c_pitchSecondaryNoteHue","c_pitchSecondaryNoteHueScale","c_pitchSecondaryNoteSat","c_pitchSecondaryNoteSatScale","c_pitchSecondaryNoteLum","c_pitchSecondaryNoteLumScale","c_pitchPrimaryNoteHue","c_pitchPrimaryNoteHueScale","c_pitchPrimaryNoteSat","c_pitchPrimaryNoteSatScale","c_pitchPrimaryNoteLum","c_pitchPrimaryNoteLumScale","set","noiseChannelCount","c_noiseSecondaryChannelHue","c_noiseSecondaryChannelHueScale","c_noiseSecondaryChannelSat","c_noiseSecondaryChannelSatScale","c_noiseSecondaryChannelLum","c_noiseSecondaryChannelLumScale","c_noisePrimaryChannelHue","c_noisePrimaryChannelHueScale","c_noisePrimaryChannelSat","c_noisePrimaryChannelSatScale","c_noisePrimaryChannelLum","c_noisePrimaryChannelLumScale","c_noiseSecondaryNoteHue","c_noiseSecondaryNoteHueScale","c_noiseSecondaryNoteSat","c_noiseSecondaryNoteSatScale","c_noiseSecondaryNoteLum","c_noiseSecondaryNoteLumScale","c_noisePrimaryNoteHue","c_noisePrimaryNoteHueScale","c_noisePrimaryNoteSat","c_noisePrimaryNoteSatScale","c_noisePrimaryNoteLum","c_noisePrimaryNoteLumScale","c_modSecondaryChannelHue","c_modSecondaryChannelHueScale","c_modSecondaryChannelSat","c_modSecondaryChannelSatScale","c_modSecondaryChannelLum","c_modSecondaryChannelLumScale","c_modPrimaryChannelHue","c_modPrimaryChannelHueScale","c_modPrimaryChannelSat","c_modPrimaryChannelSatScale","c_modPrimaryChannelLum","c_modPrimaryChannelLumScale","c_modSecondaryNoteHue","c_modSecondaryNoteHueScale","c_modSecondaryNoteSat","c_modSecondaryNoteSatScale","c_modSecondaryNoteLum","c_modSecondaryNoteLumScale","c_modPrimaryNoteHue","c_modPrimaryNoteHueScale","c_modPrimaryNoteSat","c_modPrimaryNoteSatScale","c_modPrimaryNoteLum","c_modPrimaryNoteLumScale","pitchChannels","noiseChannels","modChannels","setTheme","theme","themes","undefined","_styleElement","textContent","themeColor","querySelector","getComputedStyle","getPropertyValue","trim","c_invertedText","c_trackEditorBgNoiseDim","c_trackEditorBgNoise","c_trackEditorBgModDim","c_trackEditorBgMod","c_trackEditorBgPitchDim","c_trackEditorBgPitch","Map","forest","canyon","midnight","beachcombing","roe","moonlight","autumn","fruit","sunset","toxic","portal","fusion","nebula","energized","neapolitan","mono","poly","blutonium","midbox","pageMargin","editorBackground","hoverPreview","playhead","primaryText","secondaryText","invertedText","textSelection","boxSelectionFill","loopAccent","linkAccent","uiWidgetBackground","uiWidgetFocus","pitchBackground","tonic","fifthNote","whitePianoKey","blackPianoKey","oscilloscopeLineL","oscilloscopeLineR","modTitle","plantColor","useColorFormula","pitchSecondaryChannelHue","pitchSecondaryChannelHueScale","pitchSecondaryChannelSat","pitchSecondaryChannelSatScale","pitchSecondaryChannelLum","pitchSecondaryChannelLumScale","pitchPrimaryChannelHue","pitchPrimaryChannelHueScale","pitchPrimaryChannelSat","pitchPrimaryChannelSatScale","pitchPrimaryChannelLum","pitchPrimaryChannelLumScale","pitchSecondaryNoteHue","pitchSecondaryNoteHueScale","pitchSecondaryNoteSat","pitchSecondaryNoteSatScale","pitchSecondaryNoteLum","pitchSecondaryNoteLumScale","pitchPrimaryNoteHue","pitchPrimaryNoteHueScale","pitchPrimaryNoteSat","pitchPrimaryNoteSatScale","pitchPrimaryNoteLum","pitchPrimaryNoteLumScale","modSecondaryChannelHue","modSecondaryChannelHueScale","modSecondaryChannelSat","modSecondaryChannelSatScale","modSecondaryChannelLum","modSecondaryChannelLumScale","modPrimaryChannelHue","modPrimaryChannelHueScale","modPrimaryChannelSat","modPrimaryChannelSatScale","modPrimaryChannelLum","modPrimaryChannelLumScale","modSecondaryNoteHue","modSecondaryNoteHueScale","modSecondaryNoteSat","modSecondaryNoteSatScale","modSecondaryNoteLum","modSecondaryNoteLumScale","modPrimaryNoteHue","modPrimaryNoteHueScale","modPrimaryNoteSat","modPrimaryNoteSatScale","modPrimaryNoteLum","modPrimaryNoteLumScale","noiseSecondaryChannelHue","noiseSecondaryChannelHueScale","noiseSecondaryChannelSat","noiseSecondaryChannelSatScale","noiseSecondaryChannelLum","noiseSecondaryChannelLumScale","noisePrimaryChannelHue","noisePrimaryChannelHueScale","noisePrimaryChannelSat","noisePrimaryChannelSatScale","noisePrimaryChannelLum","noisePrimaryChannelLumScale","noiseSecondaryNoteHue","noiseSecondaryNoteHueScale","noiseSecondaryNoteSat","noiseSecondaryNoteSatScale","noiseSecondaryNoteLum","noiseSecondaryNoteLumScale","noisePrimaryNoteHue","noisePrimaryNoteHueScale","noisePrimaryNoteSat","noisePrimaryNoteSatScale","noisePrimaryNoteLum","noisePrimaryNoteLumScale","trackEditorBgPitch","trackEditorBgPitchDim","trackEditorBgNoise","trackEditorBgNoiseDim","trackEditorBgMod","trackEditorBgModDim","multiplicativeModSlider","overwritingModSlider","indicatorPrimary","indicatorSecondary","select2OptGroup","inputBoxOutline","muteButtonNormal","muteButtonDrum","muteButtonMod","modLabelPrimary","modLabelSecondaryText","modLabelPrimaryText","disabledNotePrimary","disabledNoteSecondary","head","navigator","userAgent","EditorConfig","valueToPreset","presetValue","categoryIndex","presetIndex","presetCategories","presets","midiProgramToPresetValue","program","category","preset","generalMidi","midiProgram","nameToPresetValue","presetName","factor","countBits","n","isPowerOf2","log","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","temp","reverseIndexBits","version","versionDisplayName","releaseNotesURL","isOnMac","platform","ctrlSymbol","ctrlName","customType","settings","eqFilter","cutoffHz","linearGain","eqFilterType","eqSimpleCut","eqSimplePeak","eqSubFilters0","transition","clicklessTransition","chord","fastTwoNoteArp","arpeggioSpeed","vibrato","vibratoDepth","vibratoDelay","vibratoSpeed","vibratoType","noteFilterType","noteSimpleCut","noteSimplePeak","noteFilter","noteSubFilters0","bitcrusherOctave","bitcrusherQuantization","panDelay","chorus","echoSustain","echoDelayBeats","reverb","fadeInSeconds","unison","target","envelope","pitchShiftSemitones","distortion","aliases","algorithm","feedbackType","feedbackAmplitude","operators","frequency","waveform","pulseWidth","detuneCents","harmonics","stringSustain","noteSubFilters1","customChipWave","customChipWaveIntegral","eqSubFilters1","spectrum","isNoise","filterCutoffHz","filterResonance","filterEnvelope","feedbackEnvelope","midiSubharmonicOctaves","interval","pulseEnvelope","drums","Deque","_capacity","_buffer","_mask","_offset","_count","pushFront","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","remove","oldBuffer","size","FilterCoefficients","a","b","order","linearGain0thOrder","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","feedback","highPass2ndOrderButterworth","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","b0","b1","b2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","events","activeEvents","listeners","raise","eventType","eventModifier","eventData","extraEventData","pop","listen","callback","unlisten","lisen","indexOf","splice","unlistenAll","epsilon","clamp","val","validateRange","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","read","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","other","encodeBase64","buffer","lengthBase64","makeNotePin","time","Note","pitch","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","instruments","cloneNotes","note","reset","toJsonObject","isModChannel","noteArray","instrument","mod","volumeCap","getVolumeCapForSetting","modFilterTypes","pointArray","useVol","tick","rhythm","pitchBend","volume","forMod","noteObject","points","patternObject","patternInstruments","fromJsonObject","importedPartsPerBeat","isNoiseChannel","instrumentCount","getMaxInstrumentsPerPatternForChannel","maxNoteCount","beatsPerBar","k","startInterval","pointObject","lowestPitch","highestPitch","Operator","copy","SpectrumWave","hash","isHarmonic","markCustomWaveDirty","hashMult","Synth","fittingPowerOfTwo","point","SpectrumWaveState","_hash","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","value1","value2","octave1","octave2","HarmonicsWave","HarmonicsWaveState","instrumentType","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","performIntegralOld","FilterControlPoint","freq","gain","freqSetting","gainSetting","getHz","getHzFromSettingValue","getSettingValueFromHz","hz","getRoundedSettingValueFromHz","getLinearGain","peakMult","power","neutral","interpolatedPower","getRoundedSettingValueFromLinearGain","toCoefficients","sampleRate","freqMult","getVolumeCompensationMult","octave","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","FilterSettings","controlPoints","controlPointCount","addPoint","controlPoint","filterArray","filterObject","filtersCanMorph","filterA","filterB","lerpFilters","pos","lerpedFilter","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","finalRadians","legacyFilter","response","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","convertLegacySettingsForSynth","allowFirstOrder","EnvelopeSettings","envelopeObject","Instrument","chipWave","chipNoise","eqFilterSimpleCut","eqFilterSimplePeak","noteFilterSimpleCut","noteFilterSimplePeak","eqSubFilters","noteSubFilters","fadeIn","fadeOut","envelopeCount","pitchShift","detune","pan","strumSpeed","slideSpeed","legacyTieOver","continueThruPattern","bitcrusherFreq","echoDelay","LFOtime","nextLFOtime","arpTime","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modInstruments","invalidModulators","spectrumWave","wavePrev","setTypeAndReset","legacySettings","forceSimpleFilter","filterCutoff","legacyFilterEnv","legacyPulseEnv","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","detuneToCents","fadeInSettingToSeconds","fadeOutSettingToTicks","getDrumsetEnvelope","operatorArray","operator","Float64Array","useSlowerRhythm","legacyGlobalReverb","legacyEffectsNames","transitionProperty","binary","seamless","sudden","hard","smooth","soft","slide","secondsToFadeInSetting","ticksToFadeOutSetting","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","centsToDetune","vibratoProperty","legacyVibratoNames","isNaN","findIndex","legacyEnvelopeNames","custom","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","operatorObject","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","frequencyFromPitch","makeEmpty","supportsEnvelopeTarget","envelopeSettings","automationTarget","useControlPointCount","clearInvalidEnvelopeTargets","envelopeIndex","getTransition","getFadeInSeconds","getFadeOutTicks","Channel","patterns","bars","muted","Song","string","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","getNewNoteVolume","isMod","modChannel","modInstrument","vol","tempoIndex","tempo","getVolumeCap","modulator","cap","modSetting","filterType","fromBase64String","initToDefault","getChannelCount","modChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","getMaxInstrumentsPerPattern","channelIndex","getChannelIsNoise","getChannelIsMod","andResetChannels","scale","loopStart","loopLength","barCount","patternsPerChannel","title","subtitle","pattern","bar","toBase64String","bits","_variant","_latestJummBoxVersion","encodedSongTitle","encodeURIComponent","encodedSongSubtitle","encodedChannelName","usingSubFilterBitfield","harmonicsBits","o","spectrumBits","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","neededModInstrumentIndexBits","instrumentIndex","modFilter","status","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","unshift","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","slice","_envelopeFromLegacyIndex","legacyIndex","compressed","charIndex","JSON","parse","substring","fromBeepBox","fromJummBox","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestJummBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","beforeNine","legacySettingsCache","command","instrumentChannelIterator","instrumentIndexIterator","useSlowerArpSpeed","songNameLength","decodeURIComponent","channelCount","instrumentsPerChannel","instrumentsFlagBits","legacyWaves","typeCheck","originalControlPointCount","originalSubfilterControlPointCount","legacyEffects","legacyEnvelopes","originalValue","nextValue","restoreLimiterDefaults","channelNameLength","byteCount","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","songReverbChannel","songReverbInstrument","songReverbIndex","forNoteFilter","detuneScaleNotes","newPattern","newNotes","noteCount","useOldShape","shape","pinCount","initialSize","bendCount","pinObj","intervalIter","shift","isBackwards","restLength","patternIndex","lowestPart","chn","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","sequenceArray","l","channelObject","sequence","subname","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","enigma","scaleName","letter","charAt","toUpperCase","symbol","toLowerCase","C","D","E","F","G","A","B","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","newModChannels","instrumentObjects","getPattern","getBeatsPerMinute","maxValue","clz32","PickedString","delayLine","allPassG","allPassGDelta","shelfA1","shelfA1Delta","shelfB0","shelfB0Delta","shelfB1","shelfB1Delta","delayIndex","allPassSample","allPassPrevInput","shelfSample","shelfPrevInput","fractionalDelaySample","prevDelayLength","delayResetOffset","update","synth","instrumentState","tone","stringIndex","roundedSamplesPerTick","stringDecayStart","stringDecayEnd","allPassCenter","samplesPerSecond","shelfRadians","decayCurveStart","decayCurveEnd","phaseDeltaStart","phaseDeltas","phaseDeltaScale","phaseDeltaScales","phaseDeltaEnd","radiansPerSampleStart","radiansPerSampleEnd","centerHarmonicStart","centerHarmonicEnd","allPassRadiansStart","allPassRadiansEnd","decayRateStart","decayRateEnd","shelfGainStart","shelfGainEnd","expressionDecayStart","expressionDecayEnd","tempFilterStartCoefficients","tempFrequencyResponse","allPassGStart","allPassPhaseDelayStart","tempFilterEndCoefficients","allPassGEnd","allPassPhaseDelayEnd","shelfA1Start","shelfB0Start","shelfB1Start","shelfPhaseDelayStart","shelfA1End","shelfB0End","shelfB1End","shelfPhaseDelayEnd","periodLengthStart","periodLengthEnd","minBufferLength","delayLength","delayLengthEnd","delayLengthDelta","pitchChanged","reinitializeImpulse","likelyMaximumLength","newDelayLine","oldDelayBufferMask","startCopyingFromIndex","delayBufferMask","startImpulseFrom","startZerosFrom","stopZerosAt","impulseWave","impulseWaveLength","impulsePhaseDelta","fadeDuration","startImpulseFromSample","stopImpulseAt","stopImpulseAtSample","impulsePhase","prevWaveIntegral","impulsePhaseInt","nextWaveIntegral","phaseRatio","sample","combinedFade","curvedFade","EnvelopeComputer","noteSecondsStart","noteSecondsEnd","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsEnd","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","envelopeStarts","envelopeEnds","_modifiedEnvelopeIndices","_modifiedEnvelopeCount","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","secondsPerTick","atNoteStart","forceContinueAtStart","tickTimeEnd","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","tmpNoteFilterStart","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","beats","noteSize","noteSizeToVolumeMult","attack","decay","endTime1","endTime2","zeroIntercept","startValue2","Tone","fill","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","lastInterval","noiseSample","stringSustainStart","stringSustainEnd","phases","expressionDelta","operatorExpressions","operatorExpressionDeltas","prevPitchExpressions","prevVibrato","prevStringDecay","pulseWidthDelta","pickedStrings","noteFilters","noteFilterCount","initialNoteFilterInput1","initialNoteFilterInput2","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","envelopeComputer","pickedString","InstrumentState","awake","computed","tonesAddedInThisTick","flushingDelayLines","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","activeModTones","releasedTones","liveInputTones","synthesizer","noisePitchFilterMult","volumeScale","eqFilterVolume","eqFilterVolumeDelta","mixVolume","mixVolumeDelta","delayInputMult","delayInputMultDelta","distortionDelta","distortionDrive","distortionDriveDelta","distortionFractionalInput1","distortionFractionalInput2","distortionFractionalInput3","distortionPrevInput","distortionNextOutput","bitcrusherPrevInput","bitcrusherCurrentOutput","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFilters","eqFilterCount","initialEqFilterInput1","initialEqFilterInput2","panningDelayLine","panningDelayPos","panningVolumeL","panningVolumeR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetL","panningOffsetR","panningOffsetDeltaL","panningOffsetDeltaR","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusVoiceMult","chorusVoiceMultDelta","chorusCombinedMult","chorusCombinedMultDelta","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPos","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoMult","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMult","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","allocateNecessaryBuffers","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","safeEchoDelaySteps","safeEchoDelayBufferSize","newDelayLineL","newDelayLineR","oldMask","deactivate","resetAllEffects","compute","getInstrumentSynthFunction","updateWaves","usesDistortion","usesBitcrusher","usesPanning","usesChorus","usesEcho","usesReverb","useDistortionStart","useDistortionEnd","isModActive","getModValue","distortionSliderStart","distortionSliderEnd","distortionStart","distortionEnd","distortionDriveStart","distortionDriveEnd","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterSettingsStart","eqFilterSettingsEnd","startPoint","startSimpleFreq","startSimpleGain","endSimpleFreq","endSimpleGain","filterChanges","endPoint","eqFilterSettings","tmpEqFilterStart","tmpEqFilterEnd","mainInstrumentVolume","instrumentVolumeToVolumeMult","mixVolumeEnd","startVal","endVal","eqFilterVolumeStart","eqFilterVolumeEnd","delayInputMultStart","delayInputMultEnd","usePanStart","usePanEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","usePanDelayStart","usePanDelayEnd","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","useChorusStart","useChorusEnd","chorusStart","chorusEnd","chorusCombinedMultStart","chorusCombinedMultEnd","maxEchoMult","averageEchoDelaySeconds","useEchoSustainStart","useEchoSustainEnd","echoMultStart","echoMultEnd","useEchoDelayStart","useEchoDelayEnd","ignoreTicks","tmpEchoDelayOffsetStart","tmpEchoDelayOffsetEnd","maxReverbMult","useReverbStart","useReverbEnd","reverbStart","reverbEnd","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","attenuationPerSecond","averageMult","averageReverbDelaySeconds","progressInTick","progressAtEndOfTick","_drumsetIndexToSpectrumOctave","getDrumsetWave","drumsetIndexReferenceDelta","ChannelState","singleSeamlessInstrument","preferLowerLatency","anticipatePoorPerformance","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","liveInputInstruments","loopRepeatCount","oscRefreshEventTimer","oscEnabled","oscilloscopeScale","enableMetronome","countInMetronome","renderingSong","wantToSkip","playheadInternal","prevBar","nextBar","beat","isAtStartOfTick","isAtEndOfTick","tickSampleCountdown","modValues","modInsValues","nextModValues","nextModInsValues","isPlayingSong","isRecording","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","tonePool","tempMatchedPitchTones","startedMetronome","metronomeSamplesRemaining","metronomeAmplitude","metronomePrevAmplitude","metronomeFilter","limit","tempMonoInstrumentSampleBuffer","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","deactivateAudio","synthesize","computeDelayBufferSizes","setSong","syncSongState","channelState","warmUpSynthesizer","getSamplesPerTick","tmpNoteFilterEnd","dummyArray","computeLatestModValues","latestModTimes","latestModInsTimes","currentBar","instrumentIdx","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","setModValue","usedInstruments","tgtPattern","eqFilterParam","noteFilterParam","modulatorAdjust","tgtInstrument","determineInvalidModulators","tgtInstrumentList","str","operatorAmplitudeCurve","playing","recording","remainder","getSamplesPerBar","getTicksIntoBar","getCurrentPart","getTotalSamples","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","ended","totalSamples","foundMod","find","sort","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getTotalBars","useLoopCount","panningDelayBufferMask","chorusDelayBufferMask","activateAudio","bufferSize","latencyHint","window","AudioContext","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","maintainLiveInput","play","pause","startRecording","resetEffects","freeAllTones","volumeStart","volumeEnd","setting","nextVal","isAnyModActive","unsetMod","isFilterModActive","channelIdx","snapToStart","snapToBar","goToBar","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","getNextBar","skipBar","outputBufferLength","playSong","skippedBars","firstSkippedBufferIndex","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","runLength","runEnd","determineCurrentActiveTones","playModTone","barVisited","includes","determineLiveInputTones","tonesPlayedInThisInstrument","freeReleasedTone","shouldFadeOutFast","computeTone","playTone","effectsSynth","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","midBeat","periods","samplesPerPeriod","tempAmplitude","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","isFinite","freeTone","newTone","releaseTone","toneIndex","toneList","toneCount","moveTonesIntoOrderedTempMatchedList","clearTempMatchedPitchTones","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","adjacentNotesHaveMatchingPitches","firstNote","secondNote","firstNoteInterval","notePitches","currentTick","prevNotes","nextNotes","fillCount","modToneCount","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","oldTone","partsPerBar","useStrumSpeed","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","modSynth","computeChordExpression","chordExpression","intervalScale","secondsPerPart","sampleTime","beatsPerPart","specialIntervalMult","toneIsOnLastTick","intervalStart","intervalEnd","fadeExpressionStart","fadeExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","getOperatorWave","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","noteLengthTicks","tmpNoteFilter","noteFilterSettingsStart","noteFilterSettingsEnd","intervalDiff","chordSizeDiff","pitchShiftScalarStart","pitchShiftScalarEnd","modDetuneStart","modDetuneEnd","vibratoAmplitudeStart","vibratoAmplitudeEnd","vibratoStart","POSITIVE_INFINITY","getLFOAmplitude","ticksUntilVibratoStart","lfoEnd","vibratoDepthEnvelopeEnd","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","noteFilterSettings","drumsetFilterEnvelope","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeStart","amplitudeEnd","amplitudeCurveStart","amplitudeCurveEnd","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","useSustainStart","useSustainEnd","startFreq","voiceCountExpression","unisonEnvelopeStart","unisonEnvelopeEnd","unisonAStart","unisonAEnd","unisonBStart","unisonBEnd","sustainEnvelopeStart","sustainEnvelopeEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","data","unisonSign","phaseDeltaA","phaseDeltaB","phaseDeltaScaleA","phaseDeltaScaleB","phaseA","phaseB","filters","filterCount","initialFilterInput1","initialFilterInput2","applyFilters","prevWaveIntegralA","prevWaveIntegralB","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","sampleIndex","waveA","waveB","inputSample","nextWaveIntegralA","nextWaveIntegralB","output","sanitizeFilters","voiceCount","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","sampleList","voice","lines","usesEqFilter","signature","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","phaseDelta","phase","sawPhaseA","sawPhaseB","pulseWave","t","phaseMask","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","referenceDelta","stereoBufferIndex","dotTarget","lerpEndRatio","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","volumeMultToInstrumentVolume","volumeMult","volumeMultToNoteSize","seconds","ticks","lower","upper","cents","beatsPerSecond","partsPerSecond","tickPerSecond","sanitizeDelayLine","lastIndex","mask","input1","input2","button","div","h1","input","svg","circle","rect","path","localStorage","getItem","animationRequest","prevHash","id","toString","pauseButtonDisplayed","zoomEnabled","timelineWidth","outVolumeHistoricTimer","outVolumeHistoricCap","titleText","editLink","copyLink","href","shareLink","fullscreenLink","draggingPlayhead","playButton","playButtonContainer","loopIcon","d","loopButton","width","height","viewBox","volumeIcon","volumeSlider","step","zoomIcon","cx","cy","r","stroke","zoomButton","timeline","timelineContainer","visualizationContainer","outVolumeBarBg","outVolumeBar","stop1","stop","stop2","stop3","gradient","linearGradient","gradientUnits","defs","volumeBarContainer","preserveAspectRatio","setLocalStorage","setItem","error","getLocalStorage","loadSong","songString","reuseParams","updatedSongString","hashUpdatedExternally","myHash","location","parameter","equalsIndex","paramName","renderLoopIcon","renderTimeline","animate","requestAnimationFrame","onTogglePlay","renderPlayhead","volumeUpdate","renderPlayButton","useOutVolumeCap","historicOutCap","cancelAnimationFrame","onTimelineMouseMove","event","preventDefault","onTimelineCursorMove","clientX","pageX","onTimelineTouchMove","touches","mouseX","boundingRect","getBoundingClientRect","left","right","onTimelineCursorUp","setSynthVolume","scrollLeft","innerHTML","timelineHeight","windowOctaves","windowPitchCount","semitoneHeight","targetBeatWidth","targetSemitoneHeight","barWidth","partWidth","wavePitchHeight","drumPitchHeight","color","opacity","pitchHeight","configuredOctaveScroll","offsetY","offsetX","drawNote","noteElement","radius","classList","add","renderZoomIcon","body","top","self","display","addEventListener","keyCode","nav","clipboard","writeText","catch","prompt","textField","select","succeeded","execCommand","share","url"],"sources":["../../synth/SynthConfig.ts","../../node_modules/imperative-html/src/elements-base.ts","../../node_modules/imperative-html/src/elements-strict.ts","../../editor/ColorConfig.ts","../../editor/EditorConfig.ts","../../synth/FFT.ts","../../synth/Deque.ts","../../synth/filtering.ts","../../global/Events.ts","../../synth/synth.ts","../../player/main.ts"],"sourcesContent":["/*!\r\nCopyright (c) 2012-2022 John Nesky and contributing authors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\nexport interface Dictionary<T> {\r\n    [K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n    dictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum FilterType {\r\n    lowPass,\r\n    highPass,\r\n    peak,\r\n    length,\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n    noteSize,\r\n    none,\r\n    punch,\r\n    flare,\r\n    twang,\r\n    swell,\r\n    tremolo,\r\n    tremolo2,\r\n    decay,\r\n    modboxBlip,\r\n    modboxTrill,\r\n    modboxClick,\r\n    modboxBow,\r\n    decelerate,\r\n}\r\n\r\n\r\nexport const enum InstrumentType {\r\n    chip,\r\n    fm,\r\n    noise,\r\n    spectrum,\r\n    drumset,\r\n    harmonics,\r\n    pwm,\r\n    pickedString,\r\n    customChipWave,\r\n    mod,\r\n    length,\r\n}\r\n\r\nexport const enum DropdownID {\r\n    Vibrato = 0,\r\n    Pan = 1,\r\n    Chord = 2,\r\n    Transition = 3,\r\n    FM = 4,\r\n    Strum = 5,\r\n\r\n}\r\n\r\nexport const enum EffectType {\r\n    reverb,\r\n    chorus,\r\n    panning,\r\n    distortion,\r\n    bitcrusher,\r\n    noteFilter,\r\n    echo,\r\n    pitchShift,\r\n    detune,\r\n    vibrato,\r\n    transition,\r\n    chord,\r\n    // If you add more, you'll also have to extend the bitfield used in Base64 which currently uses two six-bit characters.\r\n    length,\r\n}\r\n\r\nexport const enum EnvelopeComputeIndex {\r\n    noteVolume,\r\n    noteFilterAllFreqs,\r\n    pulseWidth,\r\n    stringSustain,\r\n    unison,\r\n    operatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3,\r\n    operatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3,\r\n    feedbackAmplitude,\r\n    pitchShift,\r\n    detune,\r\n    vibratoDepth,\r\n    noteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\r\n    noteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\r\n    length,\r\n    //distortion,\r\n}\r\n\r\n/*\r\nexport const enum InstrumentAutomationIndex {\r\n    mixVolume,\r\n    eqFilterAllFreqs,\r\n    eqFilterFreq0, eqFilterFreq1, eqFilterFreq2, eqFilterFreq3, eqFilterFreq4, eqFilterFreq5, eqFilterFreq6, eqFilterFreq7,\r\n    eqFilterGain0, eqFilterGain1, eqFilterGain2, eqFilterGain3, eqFilterGain4, eqFilterGain5, eqFilterGain6, eqFilterGain7,\r\n    distortion,\r\n    bitcrusherQuantization,\r\n    bitcrusherFrequency,\r\n    panning,\r\n    chorus,\r\n    echoSustain,\r\n    //echoDelay, // Wait until tick settings can be computed once for multiple run lengths.\r\n    reverb,\r\n    length,\r\n}\r\n*/\r\n\r\nexport interface BeepBoxOption {\r\n    readonly index: number;\r\n    readonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n    readonly flags: ReadonlyArray<boolean>;\r\n    readonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n    readonly isWhiteKey: boolean;\r\n    readonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n    readonly stepsPerBeat: number;\r\n    readonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n    readonly expression: number;\r\n    samples: Float32Array;\r\n}\r\n\r\nexport interface OperatorWave extends BeepBoxOption {\r\n    samples: Float32Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n    readonly expression: number;\r\n    readonly basePitch: number;\r\n    readonly pitchFilterMult: number;\r\n    readonly isSoft: boolean;\r\n    samples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n    readonly isSeamless: boolean;\r\n    readonly continues: boolean;\r\n    readonly slides: boolean;\r\n    readonly slideTicks: number;\r\n    readonly includeAdjacentPatterns: boolean;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n    readonly amplitude: number;\r\n    readonly type: number;\r\n    readonly delayTicks: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n    readonly periodsSeconds: number[];\r\n    readonly period: number;\r\n}\r\n\r\nexport interface Unison extends BeepBoxOption {\r\n    readonly voices: number;\r\n    readonly spread: number;\r\n    readonly offset: number;\r\n    readonly expression: number;\r\n    readonly sign: number;\r\n}\r\n\r\nexport interface Modulator extends BeepBoxOption {\r\n    readonly name: string; // name that shows up in song editor UI\r\n    readonly pianoName: string; // short name that shows up in mod piano UI\r\n    readonly maxRawVol: number; // raw\r\n    readonly newNoteVol: number; // raw\r\n    readonly forSong: boolean; // true - setting is song scope\r\n    convertRealFactor: number; // offset that needs to be applied to get a \"real\" number display of value, for UI purposes\r\n    readonly associatedEffect: EffectType; // effect that should be enabled for this modulator to work properly. If unused, set to EffectType.length.\r\n    readonly promptName: string; // long-as-needed name that shows up in tip prompt\r\n    readonly promptDesc: string[]; // paragraph(s) describing how to use this mod\r\n\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n    readonly customInterval: boolean;\r\n    readonly arpeggiates: boolean;\r\n    readonly strumParts: number;\r\n    readonly singleTone: boolean;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n    readonly carrierCount: number;\r\n    readonly associatedCarrier: ReadonlyArray<number>;\r\n    readonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n    readonly mult: number;\r\n    readonly hzOffset: number;\r\n    readonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n    readonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n    readonly type: EnvelopeType;\r\n    readonly speed: number;\r\n}\r\n\r\nexport interface AutomationTarget extends BeepBoxOption {\r\n    readonly computeIndex: EnvelopeComputeIndex /*| InstrumentAutomationIndex*/ | null;\r\n    readonly displayName: string;\r\n    //readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\r\n    readonly interleave: boolean; // Whether to interleave this target with the next one in the menu.\r\n    readonly isFilter: boolean; // Filters have a variable maxCount in practice.\r\n    //readonly range: number | null; // set if automation is allowed.\r\n    readonly maxCount: number;\r\n    readonly effect: EffectType | null;\r\n    readonly compatibleInstruments: InstrumentType[] | null;\r\n}\r\n\r\nexport class Config {\r\n    // Params for post-processing compressor\r\n    public static thresholdVal: number = -10;\r\n    public static kneeVal: number = 40;\r\n    public static ratioVal: number = 12;\r\n    public static attackVal: number = 0;\r\n    public static releaseVal: number = 0.25;\r\n\r\n    public static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n        //   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n        { name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n        { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n        { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n        { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n        { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n        { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n        { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n        { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n        { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n        { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n        { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n        { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n        { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n        { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n        { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n        { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n        { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n        { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n        { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n        { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n\r\n\r\n    ]);\r\n    public static readonly keys: DictionaryArray<Key> = toNameMap([\r\n        { name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n        { name: \"C♯\", isWhiteKey: false, basePitch: 13 },\r\n        { name: \"D\", isWhiteKey: true, basePitch: 14 },\r\n        { name: \"D♯\", isWhiteKey: false, basePitch: 15 },\r\n        { name: \"E\", isWhiteKey: true, basePitch: 16 },\r\n        { name: \"F\", isWhiteKey: true, basePitch: 17 },\r\n        { name: \"F♯\", isWhiteKey: false, basePitch: 18 },\r\n        { name: \"G\", isWhiteKey: true, basePitch: 19 },\r\n        { name: \"G♯\", isWhiteKey: false, basePitch: 20 },\r\n        { name: \"A\", isWhiteKey: true, basePitch: 21 },\r\n        { name: \"A♯\", isWhiteKey: false, basePitch: 22 },\r\n        { name: \"B\", isWhiteKey: true, basePitch: 23 },\r\n    ]);\r\n    public static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n    public static readonly tempoMin: number = 1;\r\n    public static readonly tempoMax: number = 750;\r\n    public static readonly echoDelayRange: number = 24;\r\n    public static readonly echoDelayStepTicks: number = 4;\r\n    public static readonly echoSustainRange: number = 8;\r\n    public static readonly echoShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\r\n    public static readonly echoShelfGain: number = Math.pow(2.0, -0.5);\r\n    public static readonly reverbShelfHz: number = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\r\n    public static readonly reverbShelfGain: number = Math.pow(2.0, -1.5);\r\n    public static readonly reverbRange: number = 32;\r\n    public static readonly reverbDelayBufferSize: number = 16384; // TODO: Compute a buffer size based on sample rate.\r\n    public static readonly reverbDelayBufferMask: number = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\r\n    public static readonly beatsPerBarMin: number = 1;\r\n    public static readonly beatsPerBarMax: number = 32;\r\n    public static readonly barCountMin: number = 1;\r\n    public static readonly barCountMax: number = 512;\r\n    public static readonly instrumentCountMin: number = 1;\r\n    public static readonly layeredInstrumentCountMax: number = 4;\r\n    public static readonly patternInstrumentCountMax: number = 10;\r\n    public static readonly partsPerBeat: number = 24;\r\n    public static readonly ticksPerPart: number = 2;\r\n    public static readonly ticksPerArpeggio: number = 3;\r\n\r\n    //  Normal variants.\r\n    public static readonly normalArpeggioPatterns:             ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2],    [0, 1, 2, 3],       [0, 1, 2, 3, 4],          [0, 1, 2, 3, 4, 5],             [0, 1, 2, 3, 4, 5, 6],                [0, 1, 2, 3, 4, 5, 6, 7],                   [0, 1, 2, 3, 4, 5, 6, 7, 8]                     ];\r\n  //This one is mostly the same as Normal, but the third case bounces back. Kept to not break songs reliant on this.\r\n    public static readonly legacyArpeggioPatterns:             ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3],       [0, 1, 2, 3, 4],          [0, 1, 2, 3, 4, 5],             [0, 1, 2, 3, 4, 5, 6],                [0, 1, 2, 3, 4, 5, 6, 7],                   [0, 1, 2, 3, 4, 5, 6, 7, 8]                     ];\r\n    public static readonly scrambleArpeggioPatterns:           ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 0, 2], [0, 1, 0, 2, 3],    [0, 1, 0, 2, 3, 2, 4, 2], [0, 1, 0, 2, 3, 4, 3, 5],       [0, 1, 0, 2, 3, 4, 6, 5],             [0, 1, 0, 2, 3, 2, 4, 2, 6, 5, 7, 5],       [0, 1, 0, 2, 3, 4, 3, 5, 6, 7, 6, 8]            ];\r\n    public static readonly oscillateArpeggioPatterns:          ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 0, 2], [0, 1, 0, 2, 0, 3], [0, 1, 0, 2, 0, 3, 0, 4], [0, 1, 0, 2, 0, 3, 0, 4, 0, 5], [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6], [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7], [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8]];\r\n    public static readonly escalateArpeggioPatterns:           ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 0, 2], [0, 1, 0, 2, 1, 3], [0, 1, 0, 2, 1, 3, 2, 4], [0, 1, 0, 2, 1, 3, 2, 4, 3, 5], [0, 1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6], [0, 1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7], [0, 1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8]];\r\n    public static readonly shiftArpeggioPatterns:              ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 2, 1],    [0, 3, 1, 2],       [0, 4, 1, 3, 2],          [0, 5, 1, 4, 2, 3],             [0, 6, 1, 5, 2, 4, 3],                [0, 7, 1, 6, 2, 5, 3, 4],                   [0, 8, 1, 7, 2, 6, 3, 5, 4]                     ];\r\n//  Bounce variants.\r\n    public static readonly normalBounceArpeggioPatterns:       ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1],             [0, 1, 2, 3, 2, 1],                   [0, 1, 2, 3, 4, 3, 2, 1],                         [0, 1, 2, 3, 4, 5, 4, 3, 2, 1],                               [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1],                                     [0, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1],                                           [0, 1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1]                                                ];\r\n    public static readonly scrambleBounceArpeggioPatterns:     ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 0, 2, 1],          [0, 1, 0, 2, 3, 1],                   [0, 1, 0, 2, 3, 2, 4, 2, 3, 1],                   [0, 1, 0, 2, 3, 4, 3, 5, 4, 2],                               [0, 1, 0, 2, 3, 4, 6, 5, 3, 1],                                           [0, 1, 0, 2, 3, 2, 4, 2, 6, 5, 7, 5, 4, 3, 2, 1],                                     [0, 1, 0, 2, 3, 4, 3, 5, 6, 7, 6, 8, 0, 1, 0, 2]                                                ];\r\n    public static readonly oscillateBounceArpeggioPatterns:    ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 0, 2],             [0, 1, 0, 2, 0, 3, 0, 2],             [0, 1, 0, 2, 0, 3, 0, 4, 0, 3, 0, 2],             [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 4, 0, 3, 0, 2],             [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 5, 0, 4, 0, 3, 0, 2],             [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 6, 0, 5, 0, 4, 0, 3, 0, 2],             [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 7, 0, 6, 0, 5, 0, 4, 0, 3, 0, 2]            ];\r\n    public static readonly escalateBounceArpeggioPatterns:     ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 0, 2, 1, 0, 1],    [0, 1, 0, 2, 1, 3, 2, 0, 2, 3, 1, 2], [0, 1, 0, 2, 1, 3, 2, 4, 3, 0, 3, 4, 2, 3, 1, 2], [0, 1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 0, 4, 5, 3, 4, 2, 3, 1, 2], [0, 1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 0, 5, 6, 4, 5, 3, 4, 2, 3, 1, 2], [0, 1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 0, 6, 7, 5, 6, 4, 5, 3, 4, 2, 3, 1, 2], [0, 1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 0, 7, 8, 6, 7, 5, 6, 4, 5, 3, 4, 2, 3, 1, 2]];\r\n    public static readonly shiftBounceArpeggioPatterns:        ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 2, 1, 2],             [0, 3, 1, 2, 1, 3],                   [0, 4, 1, 3, 2, 3, 1, 4],                         [0, 5, 1, 4, 2, 3, 2, 4, 1, 5],                               [0, 6, 1, 5, 2, 4, 3, 4, 2, 5, 1, 6],                                     [0, 7, 1, 6, 2, 5, 3, 4, 3, 5, 2, 6, 1, 7],                                           [0, 8, 1, 7, 2, 6, 3, 5, 4, 5, 3, 6, 2, 7, 1, 8]                                                ];\r\n\r\n    public static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n        { name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n        { name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n        { name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n        { name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n        { name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n    ]);\r\n\r\n    public static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"custom chip\", \"mod\"];\r\n    public static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false, false];\r\n    public static readonly chipBaseExpression: number = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape.\r\n    public static readonly fmBaseExpression: number = 0.03;\r\n    public static readonly noiseBaseExpression: number = 0.19;\r\n    public static readonly spectrumBaseExpression: number = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\r\n    public static readonly drumsetBaseExpression: number = 0.45; // Drums tend to be loud but brief!\r\n    public static readonly harmonicsBaseExpression: number = 0.025;\r\n    public static readonly pwmBaseExpression: number = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/π times the measured square wave amplitude.\r\n    public static readonly pickedStringBaseExpression: number = 0.025; // Same as harmonics.\r\n    public static readonly distortionBaseVolume: number = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\r\n    public static readonly bitcrusherBaseVolume: number = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\r\n\r\n    public static readonly rawChipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n        { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n        { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n        { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\r\n        { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"1/6 pulse\", expression: 0.55, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"1/12 pulse\", expression: 0.55, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"1/16 pulse\", expression: 0.575, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"heavy saw\", expression: 0.5, samples: centerWave([1.0, -1.0, 2.0, -1.0, 0.0, 3.0, 1.0, -1.0, 2.0, -1.0, 0.0, 0.0]) },\r\n        { name: \"bass-y\", expression: 0.5, samples: centerWave([1.0, -5.0, 4.0, -3.0, 7.0, -2.0, 3.0, -3.0, 6.0]) },\r\n        { name: \"strange\", expression: 0.5, samples: centerWave([1.0, 11.0, 1.0, -11.0, -1.0, -11.0, 4.0, -6.0, 9.0, -1.0, -7.0, 11.0, 2.0, -5.0, 9.0, 9.0, -10.0]) },\r\n        { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n        { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n        { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n        { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n        { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n        { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n        { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n        { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n        { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n        { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n        { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n        { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n        { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n        { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n        { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n    ]);\r\n    public static readonly chipWaves: DictionaryArray<ChipWave> = rawChipToIntegrated(Config.rawChipWaves);\r\n    // Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n    public static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n        { name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n        // The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n        { name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n        { name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n        { name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n    ]);\r\n\r\n    public static readonly filterFreqStep: number = 1.0 / 4.0;\r\n    public static readonly filterFreqRange: number = 34;\r\n    public static readonly filterFreqReferenceSetting: number = 28;\r\n    public static readonly filterFreqReferenceHz: number = 8000.0;\r\n    public static readonly filterFreqMaxHz: number = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\r\n    public static readonly filterFreqMinHz: number = 8.0;\r\n    public static readonly filterGainRange: number = 15;\r\n    public static readonly filterGainCenter: number = 7;\r\n    public static readonly filterGainStep: number = 1.0 / 2.0;\r\n    public static readonly filterMaxPoints: number = 8;\r\n    public static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\r\n    public static readonly filterMorphCount: number = 10; // Number of filter shapes allowed for modulating between. Counts the 0/default position.\r\n\r\n    public static readonly filterSimpleCutRange: number = 11;\r\n    public static readonly filterSimplePeakRange: number = 8;\r\n\r\n    public static readonly fadeInRange: number = 10;\r\n    public static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\r\n    public static readonly fadeOutNeutral: number = 4;\r\n    public static readonly drumsetFadeOutTicks: number = 48;\r\n    public static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n        { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\r\n        { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\r\n        { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\r\n        { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\r\n    ]);\r\n    public static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n        { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\r\n        { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\r\n        { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 }, // It will fade in over the previous two ticks.\r\n        { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\r\n        { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\r\n    ]);\r\n    public static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n        { name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n        { name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n    ]);\r\n    // This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n    //                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n    public static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n    public static readonly strumSpeedScale:       ReadonlyArray<number> = [24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\r\n    public static readonly slideSpeedScale:       ReadonlyArray<number> = [24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\n    public static readonly unisons: DictionaryArray<Unison> = toNameMap([\r\n        { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\r\n        { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\r\n        { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n        { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n        { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\r\n        { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\r\n        { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\r\n        { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\r\n        { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\r\n        { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\r\n        { name: \"hyper\", voices: 2, spread: 0.03, offset: -0.02, expression: 0.85, sign: 0.7 },\r\n        { name: \"peak\", voices: 2, spread: 12.038, offset: 12.01, expression: 0.85, sign: 0.9 },\r\n        { name: \"deep shift\", voices: 2, spread: 12.03, offset: -17.01, expression: 0.85, sign: 1.2 },\r\n        { name: \"broke\", voices: 2, spread: 0.000211, offset: -0.3, expression: 0.8, sign: 1.0 },\r\n        { name: \"vary\", voices: 2, spread: 0.0018, offset: 0.0, expression: 0.85, sign: 1.6 },\r\n        { name: \"energetic\", voices: 2, spread: 6.15, offset: 6.435, expression: 0.85, sign: 0.9 },\r\n        { name: \"lone fifth\", voices: 1, spread: 0.0, offset: 7.0, expression: 1.4, sign: 1.0 },\r\n        { name: \"alternate fifth\", voices: 2, spread: 2.5, offset: -2.5, expression: 0.9, sign: 1.0 },\r\n        { name: \"offtune\", voices: 2, spread: 0.40, offset: 0.40, expression: 0.9, sign: 1.0 },\r\n        { name: \"hold\", voices: 2, spread: 0.003, offset: 0.0, expression: 0.8, sign: -2.5 },\r\n        { name: \"buried\", voices: 2, spread: 0.03575, offset: -36.0, expression: 1.4, sign: 1.0 },\r\n        { name: \"corrupt\", voices: 2, spread: 18, offset: 48.0, expression: 0.7, sign: 0.7 },\r\n        { name: \"weird octave\", voices: 2, spread: 5.85, offset: 5.85, expression: 0.75, sign: 1.0 },\r\n    ]);\r\n    public static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\"];\r\n    public static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.panning, EffectType.transition, EffectType.chord, EffectType.pitchShift, EffectType.detune, EffectType.vibrato, EffectType.noteFilter, EffectType.distortion, EffectType.bitcrusher, EffectType.chorus, EffectType.echo, EffectType.reverb];\r\n    public static readonly noteSizeMax: number = 6;\r\n    public static readonly volumeRange: number = 50;\r\n    // Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n    // given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\t\r\n    public static readonly volumeLogScale: number = 0.1428;\r\n    public static readonly panCenter: number = 50;\r\n    public static readonly panMax: number = Config.panCenter * 2;\r\n    public static readonly panDelaySecondsMax: number = 0.001;\r\n    public static readonly chorusRange: number = 8;\r\n    public static readonly chorusPeriodSeconds: number = 2.0;\r\n    public static readonly chorusDelayRange: number = 0.0034;\r\n    public static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\r\n    public static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\r\n    public static readonly chorusMaxDelay: number = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\r\n    public static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n        { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\r\n        { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\r\n        { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\r\n        { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\r\n    ]);\r\n    public static readonly maxChordSize: number = 9;\r\n    public static readonly operatorCount: number = 4;\r\n\tpublic static readonly maxPitchOrOperatorCount: number = Math.max(Config.maxChordSize, Config.operatorCount);\r\n    public static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n        { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n        { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n        { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n        { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n        { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n        { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n        { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n        { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n        { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n        { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n        { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n        { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n        { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n    ]);\r\n    public static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\r\n    public static readonly operatorAmplitudeMax: number = 15;\r\n    public static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n        { name: \"0.125×\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.50×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~0.50×\", mult: 0.5, hzOffset: 2.3, amplitudeSign: -1.0 },\r\n        { name: \"0.75×\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~0.75×\", mult: 0.75, hzOffset: 1.9, amplitudeSign: -1.0 },\r\n        { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n        { name: \"1.50×\", mult: 1.5, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n        { name: \"2.50×\", mult: 2.5, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~4×\", mult: 4.0, hzOffset: -2.1, amplitudeSign: -1.0 },\r\n        { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~8×\", mult: 8.0, hzOffset: -4.2, amplitudeSign: -1.0 },\r\n        { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"10×\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"12×\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"14×\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"15×\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~16×\", mult: 16.0, hzOffset: -6.3, amplitudeSign: -1.0 },\r\n        { name: \"17×\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"18×\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"19×\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"24×\", mult: 24.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"32×\", mult: 32.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~32×\", mult: 32.0, hzOffset: -8.4, amplitudeSign: -1.0 },\r\n    ]);\r\n    public static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\r\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\r\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n        { name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n        { name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n        { name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n        { name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n        { name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n        { name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n        { name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n        { name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n        { name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n        { name: \"slow swell\", type: EnvelopeType.swell, speed: 0.5 },\r\n        { name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n        { name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n        { name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n        { name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n        { name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n        { name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n        { name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n        { name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n        { name: \"modbox trill\", type: EnvelopeType.modboxTrill, speed: 40 },\r\n        { name: \"modbox blip\", type: EnvelopeType.modboxBlip, speed: 4 },\r\n        { name: \"modbox click\", type: EnvelopeType.modboxClick, speed: 5 },\r\n        { name: \"modbox bow\", type: EnvelopeType.modboxBow, speed: 90 },\r\n        { name: \"decelerate 0\",   type: EnvelopeType.decelerate,   speed: 1.0   },\r\n        { name: \"decelerate 1\",   type: EnvelopeType.decelerate,   speed: 2.0   },\r\n        { name: \"decelerate 2\",   type: EnvelopeType.decelerate,   speed: 4.0   },\r\n        { name: \"decelerate 3\",   type: EnvelopeType.decelerate,   speed: 8.0   },\r\n    ]);\r\n    public static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n        { name: \"1⟲\", indices: [[1], [], [], []] },\r\n        { name: \"2⟲\", indices: [[], [2], [], []] },\r\n        { name: \"3⟲\", indices: [[], [], [3], []] },\r\n        { name: \"4⟲\", indices: [[], [], [], [4]] },\r\n        { name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n        { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n        { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n        { name: \"1→2\", indices: [[], [1], [], []] },\r\n        { name: \"1→3\", indices: [[], [], [1], []] },\r\n        { name: \"1→4\", indices: [[], [], [], [1]] },\r\n        { name: \"2→3\", indices: [[], [], [2], []] },\r\n        { name: \"2→4\", indices: [[], [], [], [2]] },\r\n        { name: \"3→4\", indices: [[], [], [], [3]] },\r\n        { name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n        { name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n        { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n    ]);\r\n    public static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n    public static readonly spectrumNoiseLength: number = 1 << 15; // 32768\r\n    public static readonly spectrumBasePitch: number = 24;\r\n    public static readonly spectrumControlPoints: number = 30;\r\n    public static readonly spectrumControlPointsPerOctave: number = 7;\r\n    public static readonly spectrumControlPointBits: number = 3;\r\n    public static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n    public static readonly harmonicsControlPoints: number = 28;\r\n    public static readonly harmonicsRendered: number = 64;\r\n    public static readonly harmonicsRenderedForPickedString: number = 1 << 8; // 256\r\n    public static readonly harmonicsControlPointBits: number = 3;\r\n    public static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n    public static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n    public static readonly pulseWidthRange: number = 50;\r\n    public static readonly pulseWidthStepPower: number = 0.50;\r\n    public static readonly pitchChannelCountMin: number = 1;\r\n    public static readonly pitchChannelCountMax: number = 40;\r\n    public static readonly noiseChannelCountMin: number = 0;\r\n    public static readonly noiseChannelCountMax: number = 16;\r\n    public static readonly modChannelCountMin: number = 0;\r\n    public static readonly modChannelCountMax: number = 12;\r\n    public static readonly noiseInterval: number = 6;\r\n    public static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n    public static readonly drumCount: number = 12;\r\n    public static readonly pitchOctaves: number = 8;\r\n    public static readonly modCount: number = 6;\r\n    public static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n    public static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n    public static readonly justIntonationSemitones: number[] = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);\r\n    public static readonly pitchShiftRange: number = Config.justIntonationSemitones.length;\r\n    public static readonly pitchShiftCenter: number = Config.pitchShiftRange >> 1;\r\n    public static readonly detuneCenter: number = 600;\r\n    public static readonly detuneMax: number = 1200;\r\n    public static readonly detuneMin: number = 0;\r\n    public static readonly songDetuneMin: number = 0;\r\n    public static readonly songDetuneMax: number = 500;\r\n    public static readonly sineWaveLength: number = 1 << 8; // 256\r\n    public static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n    public static readonly sineWave: Float32Array = generateSineWave();\r\n\r\n    // Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\r\n    public static readonly pickedStringDispersionCenterFreq: number = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\r\n    public static readonly pickedStringDispersionFreqScale: number = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\r\n    public static readonly pickedStringDispersionFreqMult: number = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\r\n    public static readonly pickedStringShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\r\n\r\n    public static readonly distortionRange: number = 8;\r\n    public static readonly stringSustainRange: number = 15;\r\n    public static readonly stringDecayRate: number = 0.12;\r\n    public static readonly bitcrusherFreqRange: number = 14;\r\n    public static readonly bitcrusherOctaveStep: number = 0.5;\r\n    public static readonly bitcrusherQuantizationRange: number = 8;\r\n\r\n    public static readonly maxEnvelopeCount: number = 12;\r\n    public static readonly defaultAutomationRange: number = 13;\r\n    public static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\r\n        { name: \"none\", computeIndex: null, displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1, effect: null, compatibleInstruments: null },\r\n        { name: \"noteVolume\", computeIndex: EnvelopeComputeIndex.noteVolume, displayName: \"note volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, compatibleInstruments: null },\r\n        { name: \"pulseWidth\", computeIndex: EnvelopeComputeIndex.pulseWidth, displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm] },\r\n        { name: \"stringSustain\", computeIndex: EnvelopeComputeIndex.stringSustain, displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pickedString] },\r\n        { name: \"unison\", computeIndex: EnvelopeComputeIndex.unison, displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString, InstrumentType.customChipWave, InstrumentType.spectrum, InstrumentType.pwm ] },\r\n        { name: \"operatorFrequency\", computeIndex: EnvelopeComputeIndex.operatorFrequency0, displayName: \"fm# freq\",         /*perNote:  true,*/ interleave: true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount, effect: null, compatibleInstruments: [InstrumentType.fm] },\r\n        { name: \"operatorAmplitude\", computeIndex: EnvelopeComputeIndex.operatorAmplitude0, displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount, effect: null, compatibleInstruments: [InstrumentType.fm] },\r\n        { name: \"feedbackAmplitude\", computeIndex: EnvelopeComputeIndex.feedbackAmplitude, displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.fm] },\r\n        { name: \"pitchShift\", computeIndex: EnvelopeComputeIndex.pitchShift, displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1, effect: EffectType.pitchShift, compatibleInstruments: null },\r\n        { name: \"detune\", computeIndex: EnvelopeComputeIndex.detune, displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1, effect: EffectType.detune, compatibleInstruments: null },\r\n        { name: \"vibratoDepth\", computeIndex: EnvelopeComputeIndex.vibratoDepth, displayName: \"vibrato range\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.vibrato, compatibleInstruments: null },\r\n        { name: \"noteFilterAllFreqs\", computeIndex: EnvelopeComputeIndex.noteFilterAllFreqs, displayName: \"n. filter freqs\",  /*perNote:  true,*/ interleave: false, isFilter: true, /*range: null,                           */    maxCount: 1, effect: EffectType.noteFilter, compatibleInstruments: null },\r\n        { name: \"noteFilterFreq\", computeIndex: EnvelopeComputeIndex.noteFilterFreq0, displayName: \"n. filter # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter: true, /*range: Config.filterFreqRange,     */        maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null },\r\n        //{ name: \"distortion\", computeIndex: EnvelopeComputeIndex.distortion, displayName: \"distortion\", /*perNote: false,*/ interleave: false, isFilter: false, /*range: Config.distortionRange,*/ maxCount: 1, effect: EffectType.distortion, compatibleInstruments: null},\r\n        // Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for now...\r\n        //{name: \"noteFilterGain\",         computeIndex:       EnvelopeComputeIndex.noteFilterGain0,        displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\r\n        /*\r\n        {name: \"distortion\",             computeIndex: InstrumentAutomationIndex.distortion,             displayName: \"distortion\",       perNote: false, interleave: false, isFilter: false, range: Config.distortionRange,             maxCount: 1,    effect: EffectType.distortion,   compatibleInstruments: null},\r\n        {name: \"bitcrusherQuantization\", computeIndex: InstrumentAutomationIndex.bitcrusherQuantization, displayName: \"bit crush\",        perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherQuantizationRange, maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\r\n        {name: \"bitcrusherFrequency\",    computeIndex: InstrumentAutomationIndex.bitcrusherFrequency,    displayName: \"freq crush\",       perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherFreqRange,         maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\r\n        {name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\r\n        {name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\r\n        {name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\r\n        {name: \"panning\",                computeIndex: InstrumentAutomationIndex.panning,                displayName: \"panning\",          perNote: false, interleave: false, isFilter: false, range: Config.panMax + 1,                  maxCount: 1,    effect: EffectType.panning,      compatibleInstruments: null},\r\n        {name: \"chorus\",                 computeIndex: InstrumentAutomationIndex.chorus,                 displayName: \"chorus\",           perNote: false, interleave: false, isFilter: false, range: Config.chorusRange,                 maxCount: 1,    effect: EffectType.chorus,       compatibleInstruments: null},\r\n        {name: \"echoSustain\",            computeIndex: InstrumentAutomationIndex.echoSustain,            displayName: \"echo\",             perNote: false, interleave: false, isFilter: false, range: Config.echoSustainRange,            maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null},\r\n        {name: \"echoDelay\",              computeIndex: InstrumentAutomationIndex.echoDelay,              displayName: \"echo delay\",       perNote: false, interleave: false, isFilter: false, range: Config.echoDelayRange,              maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null}, // wait until after we're computing a tick's settings for multiple run lengths.\r\n        {name: \"reverb\",                 computeIndex: InstrumentAutomationIndex.reverb,                 displayName: \"reverb\",           perNote: false, interleave: false, isFilter: false, range: Config.reverbRange,                 maxCount: 1,    effect: EffectType.reverb,       compatibleInstruments: null},\r\n        {name: \"mixVolume\",              computeIndex: InstrumentAutomationIndex.mixVolume,              displayName: \"mix volume\",       perNote: false, interleave: false, isFilter: false, range: Config.volumeRange,                 maxCount: 1,    effect: null,                    compatibleInstruments: null},\r\n        {name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\r\n        */\r\n    ]);\r\n    public static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\r\n        { name: \"sine\", samples: Config.sineWave },\r\n        { name: \"triangle\", samples: generateTriWave() },\r\n        { name: \"sawtooth\", samples: generateSawWave() },\r\n        { name: \"pulse width\", samples: generateSquareWave() },\r\n        { name: \"ramp\", samples: generateSawWave(true) },\r\n        { name: \"trapezoid\", samples: generateTrapezoidWave(2) },\r\n        { name: \"clang\",       samples: generateClangNoise()      },\r\n        { name: \"metal\",       samples: generateMetalNoise()      },\r\n        { name: \"rounded\",     samples: generateRoundedSineWave() },\r\n        { name: \"secant\",      samples: generateSecantWave()      },\r\n        { name: \"double sine\", samples: generateDoubleSineWave()  },\r\n    ]);\r\n    public static readonly pwmOperatorWaves: DictionaryArray<OperatorWave> = toNameMap([\r\n        { name: \"1%\", samples: generateSquareWave(0.01) },\r\n        { name: \"5%\", samples: generateSquareWave(0.05) },\r\n        { name: \"12.5%\", samples: generateSquareWave(0.125) },\r\n        { name: \"25%\", samples: generateSquareWave(0.25) },\r\n        { name: \"33%\", samples: generateSquareWave(1 / 3) },\r\n        { name: \"50%\", samples: generateSquareWave(0.5) },\r\n        { name: \"66%\", samples: generateSquareWave(2 / 3) },\r\n        { name: \"75%\", samples: generateSquareWave(0.75) },\r\n        { name: \"87.5%\", samples: generateSquareWave(0.875) },\r\n        { name: \"95%\", samples: generateSquareWave(0.95) },\r\n        { name: \"99%\", samples: generateSquareWave(0.99) },\r\n    ]);\r\n\r\n\r\n    // Height of the small editor column for inserting/deleting rows, in pixels.\r\n    public static readonly barEditorHeight: number = 10;\r\n\r\n    // Careful about changing index ordering for this. Index is stored in URL/JSON etc.\r\n    public static readonly modulators: DictionaryArray<Modulator> = toNameMap([\r\n        { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"No Mod Setting\", promptDesc: [ \"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\" ] },\r\n        { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Song Volume\", promptDesc: [ \"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: EffectType.length,\r\n            promptName: \"Song Tempo\", promptDesc: [ \"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\" ] },\r\n        { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: EffectType.length,\r\n            promptName: \"Song Reverb\", promptDesc: [ \"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\r\n        { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Go To Next Bar\", promptDesc: [ \"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\" ] },\r\n        { name: \"note volume\", pianoName: \"Note Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\r\n            promptName: \"Note Volume\", promptDesc: [ \"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\r\n        { name: \"pan\", pianoName: \"Pan\", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\r\n            promptName: \"Instrument Panning\", promptDesc: [ \"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\" ] },\r\n        { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.reverb,\r\n            promptName: \"Instrument Reverb\", promptDesc: [ \"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: Config.distortionRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.distortion,\r\n            promptName: \"Instrument Distortion\", promptDesc: [ \"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\" ] },\r\n        { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 1\", promptDesc: [ \"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"fm feedback\", pianoName: \"FM Feedback\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\r\n        { name: \"detune\", pianoName: \"Detune\", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: EffectType.detune,\r\n            promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to six half-steps up at $HI, or six half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\r\n        { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\r\n        { name: \"song detune\", pianoName: \"Detune\", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: EffectType.length,\r\n            promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\r\n        { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\r\n        { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\r\n            promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\r\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\r\n            promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\r\n            promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\r\n        { name: \"eq filter\", pianoName: \"EQFlt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filter\", pianoName: \"N.Flt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: Config.bitcrusherQuantizationRange-1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\r\n            promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: Config.bitcrusherFreqRange-1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\r\n            promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"echo\", pianoName: \"Echo\", maxRawVol: Config.echoSustainRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo,\r\n            promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\" ]\r\n        }, // Disabled via associatedEffect and manually in list build in SongEditor, enable and set back to echo after fixing bugginess!\r\n        { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: Config.chorusRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chorus,\r\n            promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"eq filt cut\", pianoName: \"EQFlt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"eq filt peak\", pianoName: \"EQFlt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filt cut\", pianoName: \"N.Flt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filt peak\", pianoName: \"N.Flt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: EffectType.pitchShift,\r\n            promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\r\n        { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"mix volume\", pianoName: \"Mix Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\r\n            promptName: \"Mix Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\r\n    ]);\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float32Array {\r\n    let sum: number = 0.0;\r\n    for (let i: number = 0; i < wave.length; i++) sum += wave[i];\r\n    const average: number = sum / wave.length;\r\n    for (let i: number = 0; i < wave.length; i++) wave[i] -= average;\r\n    performIntegral(wave);\r\n    // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n    wave.push(0);\r\n    return new Float32Array(wave);\r\n}\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float32Array {\r\n    let magn: number = 0.0;\r\n\r\n    centerWave(wave);\r\n\r\n    // Going to length-1 because an extra 0 sample is added on the end as part of centerWave, which shouldn't impact magnitude calculation.\r\n    for (let i: number = 0; i < wave.length - 1; i++) {\r\n        magn += Math.abs(wave[i]);\r\n    }\r\n    const magnAvg: number = magn / (wave.length - 1);\r\n\r\n    for (let i: number = 0; i < wave.length - 1; i++) {\r\n        wave[i] = wave[i] / magnAvg;\r\n    }\r\n\r\n    return new Float32Array(wave);\r\n\r\n}\r\nexport function performIntegral(wave: { length: number, [index: number]: number }): Float32Array {\r\n    // Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\r\n    let cumulative: number = 0.0;\r\n    let newWave: Float32Array = new Float32Array(wave.length);\r\n    for (let i: number = 0; i < wave.length; i++) {\r\n        newWave[i] = cumulative;\r\n        cumulative += wave[i];\r\n    }\r\n\r\n    return newWave;\r\n}\r\nexport function performIntegralOld(wave: { length: number, [index: number]: number }): void {\r\n\t// Old ver used in harmonics/picked string instruments, manipulates wave in place.\r\n\tlet cumulative: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tconst temp = wave[i];\r\n\t\twave[i] = cumulative;\r\n\t\tcumulative += temp;\r\n\t}\r\n}\r\n\r\nexport function getPulseWidthRatio(pulseWidth: number): number {\r\n    // BeepBox formula for reference\r\n    //return Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\r\n\r\n    return pulseWidth / (Config.pulseWidthRange * 2);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\r\n    let wave: Float32Array | null = Config.chipNoises[index].samples;\r\n    if (wave == null) {\r\n        wave = new Float32Array(Config.chipNoiseLength + 1);\r\n        Config.chipNoises[index].samples = wave;\r\n\r\n        if (index == 0) {\r\n            // The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n            let drumBuffer: number = 1;\r\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n                let newBuffer: number = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer += 1 << 14;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n        } else if (index == 1) {\r\n            // White noise is just random values for each sample.\r\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = Math.random() * 2.0 - 1.0;\r\n            }\r\n        } else if (index == 2) {\r\n            // The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n            let drumBuffer: number = 1;\r\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n                let newBuffer: number = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer += 2 << 14;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n        } else if (index == 3) {\r\n            // The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n            let drumBuffer: number = 1;\r\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n                let newBuffer: number = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer += 10 << 2;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n        } else if (index == 4) {\r\n            // \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\r\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\r\n            inverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n            scaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n        } else if (index == 5) {\r\n            // \"Shine\" drums from modbox!\r\n            var drumBuffer = 1;\r\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n                var newBuffer = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer += 10 << 2;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n        } else if (index == 6) {\r\n            // \"Deep\" drums from modbox!\r\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\r\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\r\n            inverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n            scaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n        } else if (index == 7) {\r\n            // \"Cutter\" drums from modbox!\r\n            var drumBuffer = 1;\r\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\r\n                var newBuffer = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer += 15 << 2;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n        } else if (index == 8) {\r\n            // \"Metallic\" drums from modbox!\r\n            var drumBuffer = 1;\r\n            for (var i = 0; i < 32768; i++) {\r\n                wave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n                var newBuffer = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer -= 10 << 2;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized drum index: \" + index);\r\n        }\r\n\r\n        wave[Config.chipNoiseLength] = wave[0];\r\n    }\r\n\r\n    return wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n    const referenceOctave: number = 11;\r\n    const referenceIndex: number = 1 << referenceOctave;\r\n    const lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n    const highIndex: number = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\r\n    const retroWave: Float32Array = getDrumWave(0, null, null);\r\n    let combinedAmplitude: number = 0.0;\r\n    for (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n        let lerped: number = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\r\n        let amplitude: number = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\r\n\r\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n        combinedAmplitude += amplitude;\r\n\r\n        // Add two different sources of psuedo-randomness to the noise\r\n        // (individually they aren't random enough) but in a deterministic\r\n        // way so that live spectrum editing doesn't result in audible pops.\r\n        // Multiply all the sine wave amplitudes by 1 or -1 based on the\r\n        // LFSR retro wave (effectively random), and also rotate the phase\r\n        // of each sine wave based on the golden angle to disrupt the symmetry.\r\n        amplitude *= retroWave[i];\r\n        const radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n        wave[i] = Math.cos(radians) * amplitude;\r\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\r\n    }\r\n\r\n    return combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateTriWave(): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateTrapezoidWave(drive: number = 2): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSquareWave(phaseWidth: number = 0): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    const centerPoint: number = Config.sineWaveLength / 4;\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)\r\n            || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSawWave(inverse: boolean = false): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;\r\n        wave[i] = inverse ? -wave[i] : wave[i];\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateClangNoise() { \r\n    let drumBuffer: number = 1;\r\n    const wave = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i = 0; i < 256 + 1; i++) {\r\n        // Hold the wave in place to stretch it and make it sound right. Not yet tho\r\n        for (let j = 0; j < 1; j++) {\r\n            wave[i * 1 + j] = (drumBuffer & 1) * 2.0 - 1.0;\r\n        }\r\n        let newBuffer: number = drumBuffer >> 1;\r\n        if (((drumBuffer + newBuffer) & 1) == 1) {\r\n            newBuffer += 2 << 14;\r\n        }\r\n        drumBuffer = newBuffer;\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateMetalNoise() {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        let drumBuffer = 1;\r\n        for (let j = 0; j < Config.sineWaveLength; j++) {\r\n            wave[j] = (drumBuffer & 1) / 2.0 - 1;\r\n            let newBuffer = drumBuffer >> 1;\r\n            if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                newBuffer -= 10 << 2;\r\n            }\r\n            drumBuffer = newBuffer;\r\n        }\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateRoundedSineWave() {\r\n    const wave = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSecantWave() {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = 1 - (Math.sin((i / Config.sineWaveLength) * Math.PI * 2.0) % 2 + 2) % 2;\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateDoubleSineWave() {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.abs(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * 2 - 1;\r\n    }\r\n    return wave;\r\n}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggioPatternType: number, arpeggio: number): number {\r\n    let arpeggioPatternListPicker: any;\r\n    if (arpeggioPatternType == 0) arpeggioPatternListPicker = (Config.normalArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 1) arpeggioPatternListPicker = (Config.legacyArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 2) arpeggioPatternListPicker = (Config.scrambleArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 3) arpeggioPatternListPicker = (Config.oscillateArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 4) arpeggioPatternListPicker = (Config.escalateArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 5) arpeggioPatternListPicker = (Config.shiftArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 6) arpeggioPatternListPicker = (Config.normalBounceArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 7) arpeggioPatternListPicker = (Config.scrambleBounceArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 8) arpeggioPatternListPicker = (Config.oscillateBounceArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 9) arpeggioPatternListPicker = (Config.escalateBounceArpeggioPatterns)[pitchCount - 1];\r\n    else if (arpeggioPatternType == 10) arpeggioPatternListPicker = (Config.shiftBounceArpeggioPatterns)[pitchCount - 1];\r\n    else throw new Error(\"Unknown arpeggio pattern type in getArpeggioPitchIndex: \" + arpeggioPatternType);\r\n    let arpeggioPattern: ReadonlyArray<number> = arpeggioPatternListPicker;\r\n    if (arpeggioPattern != null) {\r\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n            arpeggioPattern = [0, 0, 1, 1];\r\n        }\r\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n    } else {\r\n        return arpeggio % pitchCount;\r\n    }\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n    const dictionary: Dictionary<T> = {};\r\n    for (let i: number = 0; i < array.length; i++) {\r\n        const value: any = array[i];\r\n        value.index = i;\r\n        dictionary[value.name] = <T>value;\r\n    }\r\n    const result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n    result.dictionary = dictionary;\r\n    return result;\r\n}\r\n\r\nexport function effectsIncludeTransition(effects: number): boolean {\r\n    return (effects & (1 << EffectType.transition)) != 0;\r\n}\r\nexport function effectsIncludeChord(effects: number): boolean {\r\n    return (effects & (1 << EffectType.chord)) != 0;\r\n}\r\nexport function effectsIncludePitchShift(effects: number): boolean {\r\n    return (effects & (1 << EffectType.pitchShift)) != 0;\r\n}\r\nexport function effectsIncludeDetune(effects: number): boolean {\r\n    return (effects & (1 << EffectType.detune)) != 0;\r\n}\r\nexport function effectsIncludeVibrato(effects: number): boolean {\r\n    return (effects & (1 << EffectType.vibrato)) != 0;\r\n}\r\nexport function effectsIncludeNoteFilter(effects: number): boolean {\r\n    return (effects & (1 << EffectType.noteFilter)) != 0;\r\n}\r\nexport function effectsIncludeDistortion(effects: number): boolean {\r\n    return (effects & (1 << EffectType.distortion)) != 0;\r\n}\r\nexport function effectsIncludeBitcrusher(effects: number): boolean {\r\n    return (effects & (1 << EffectType.bitcrusher)) != 0;\r\n}\r\nexport function effectsIncludePanning(effects: number): boolean {\r\n    return (effects & (1 << EffectType.panning)) != 0;\r\n}\r\nexport function effectsIncludeChorus(effects: number): boolean {\r\n    return (effects & (1 << EffectType.chorus)) != 0;\r\n}\r\nexport function effectsIncludeEcho(effects: number): boolean {\r\n    return (effects & (1 << EffectType.echo)) != 0;\r\n}\r\nexport function effectsIncludeReverb(effects: number): boolean {\r\n    return (effects & (1 << EffectType.reverb)) != 0;\r\n}\r\nexport function rawChipToIntegrated(raw: DictionaryArray<ChipWave>): DictionaryArray<ChipWave> {\r\n    const newArray: Array<ChipWave> = new Array<ChipWave>(raw.length);\r\n    const dictionary: Dictionary<ChipWave> = {};\r\n    for (let i: number = 0; i < newArray.length; i++) {\r\n        newArray[i] = Object.assign([], raw[i]);\r\n        const value: any = newArray[i];\r\n        value.index = i;\r\n        dictionary[value.name] = <ChipWave>value;\r\n    }\r\n    for (let key in dictionary) {\r\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\r\n    }\r\n    const result: DictionaryArray<ChipWave> = <DictionaryArray<ChipWave>><any>newArray;\r\n    result.dictionary = dictionary;\r\n    return result;\r\n}","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport const HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport const SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n}\nfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\tif (/-/.test(name)) {\n\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { BeepBoxOption, DictionaryArray, toNameMap, Config } from \"../synth/SynthConfig\";\r\nimport { Song } from \"../synth/synth\";\r\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\r\n\r\nexport interface ChannelColors extends BeepBoxOption {\r\n    readonly secondaryChannel: string;\r\n    readonly primaryChannel: string;\r\n    readonly secondaryNote: string;\r\n    readonly primaryNote: string;\r\n}\r\n\r\nexport class ColorConfig {\r\n    public static colorLookup: Map<number, ChannelColors> = new Map<number, ChannelColors>();\r\n\tpublic static usesColorFormula: boolean = false;\r\n    public static readonly themes: { [name: string]: string } = {\r\n        \"dark classic\": `\r\n\t\t\t:root {\r\n\t\t\t\t--page-margin: black;\r\n\t\t\t\t--editor-background: black;\r\n\t\t\t\t--hover-preview: white;\r\n\t\t\t\t--playhead: white;\r\n\t\t\t\t--primary-text: white;\r\n\t\t\t\t--secondary-text: #999;\r\n\t\t\t\t--inverted-text: black;\r\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\r\n\t\t\t\t--loop-accent: #74f;\r\n\t\t\t\t--link-accent: #98f;\r\n\t\t\t\t--ui-widget-background: #444;\r\n\t\t\t\t--ui-widget-focus: #777;\r\n\t\t\t\t--pitch-background: #444;\r\n\t\t\t\t--tonic: #864;\r\n\t\t\t\t--fifth-note: #468;\r\n\t\t\t\t--white-piano-key: #bbb;\r\n\t\t\t\t--black-piano-key: #444;\r\n\t\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t\t--oscilloscope-line-R: rgba(119,68,255,0.99);\r\n\t\t\t\t--mod-title: white;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #444;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-noise: #444;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-mod: #234;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\r\n\t\t\t\t\t--multiplicative-mod-slider: #456;\r\n\t\t\t\t\t--overwriting-mod-slider: #654;\r\n\t\t\t\t\t--indicator-primary: #74f;\r\n\t\t\t\t\t--indicator-secondary: #444;\r\n\t\t\t\t\t--select2-opt-group: #585858;\r\n\t\t\t\t\t--input-box-outline: #333;\r\n\t\t\t\t\t--mute-button-normal: #ffa033;\r\n\t\t\t\t\t--mute-button-mod: #9a6bff;\r\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\r\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\r\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\r\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\r\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\r\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\r\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\r\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\r\n\t\t\t\t--pitch3-secondary-channel: #C75000;\r\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\r\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\r\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\r\n\t\t\t\t--pitch4-secondary-channel: #00A100;\r\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\r\n\t\t\t\t--pitch4-secondary-note:    #00C700;\r\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\r\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\r\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\r\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\r\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\r\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\r\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\r\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\r\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\r\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\r\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\r\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\r\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\r\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\r\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\r\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\r\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\r\n\t\t\t\t--pitch9-secondary-channel: #00A170;\r\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\r\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\r\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\r\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\r\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\r\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\r\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\r\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\r\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\r\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\r\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\r\n\t\t\t\t--noise2-secondary-channel: #996633;\r\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\r\n\t\t\t\t--noise2-secondary-note:    #CC9966;\r\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\r\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\r\n\t\t\t\t--noise3-primary-channel:   #77AADD;\r\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\r\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\r\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\r\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\r\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\r\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\r\n\t\t\t\t--noise5-secondary-channel: #607837;\r\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\r\n\t\t\t\t--noise5-secondary-note:    #91AA66;\r\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\r\n          --mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:\t    #f8ddff;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\r\n\t\t\t\t\t--mod-label-primary:        #999;\r\n\t\t\t\t\t--mod-label-secondary-text: #333;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\t\t\t\t\t--disabled-note-primary:    #999;\r\n\t\t\t\t\t--disabled-note-secondary:  #666;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"dark competition\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: black;\r\n\t\t\t\t\t--editor-background: black;\r\n\t\t\t\t\t--hover-preview: #ddd;\r\n\t\t\t\t\t--playhead: #ddd;\r\n\t\t\t\t\t--primary-text: #ddd;\r\n\t\t\t\t\t--secondary-text: #8e695b;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(169,0,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(221,221,221,0.2);\r\n\t\t\t\t\t--loop-accent: #bf15ba;\r\n\t\t\t\t\t--link-accent: #f888ff;\r\n\t\t\t\t\t--ui-widget-background: #443a3a;\r\n\t\t\t\t\t--ui-widget-focus: #777;\r\n\t\t\t\t\t--pitch-background: #353333;\r\n\t\t\t\t\t--tonic: #884a44;\r\n\t\t\t\t\t--fifth-note: #415498;\r\n\t\t\t\t\t--white-piano-key: #bbb;\r\n\t\t\t\t\t--black-piano-key: #444;\r\n\t\t\t\t\t--oscilloscope-line-L: #ddd;\r\n\t\t\t\t\t--oscilloscope-line-R: rgba(169,0,255,0.99);\r\n\t\t\t\t\t--mod-title: #ececec;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #444;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-noise: #444;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-mod: #234;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\r\n\t\t\t\t\t--multiplicative-mod-slider: #456;\r\n\t\t\t\t\t--overwriting-mod-slider: #654;\r\n\t\t\t\t\t--indicator-primary: #74f;\r\n\t\t\t\t\t--indicator-secondary: #444;\r\n\t\t\t\t\t--select2-opt-group: #585858;\r\n\t\t\t\t\t--input-box-outline: #333;\r\n\t\t\t\t\t--mute-button-normal: #ffa033;\r\n\t\t\t\t\t--mute-button-mod: #9a6bff;\r\n\t\t\t\t\t--pitch1-secondary-channel: #0099a1;\r\n\t\t\t\t\t--pitch1-primary-channel:   #25f3ff;\r\n\t\t\t\t\t--pitch1-secondary-note:    #00bdc7;\r\n\t\t\t\t\t--pitch1-primary-note:      #92f9ff;\r\n\t\t\t\t\t--pitch2-secondary-channel: #a1a100;\r\n\t\t\t\t\t--pitch2-primary-channel:   #ffff25;\r\n\t\t\t\t\t--pitch2-secondary-note:    #c7c700;\r\n\t\t\t\t\t--pitch2-primary-note:      #ffff92;\r\n\t\t\t\t\t--pitch3-secondary-channel: #c75000;\r\n\t\t\t\t\t--pitch3-primary-channel:   #ff9752;\r\n\t\t\t\t\t--pitch3-secondary-note:    #ff771c;\r\n\t\t\t\t\t--pitch3-primary-note:      #ffcdab;\r\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\r\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\r\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\r\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\r\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\r\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\r\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\r\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\r\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\r\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\r\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\r\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\r\n\t\t\t\t\t--pitch7-secondary-channel: #8AA100;\r\n\t\t\t\t\t--pitch7-primary-channel:   #DEFF25;\r\n\t\t\t\t\t--pitch7-secondary-note:\t#AAC700;\r\n\t\t\t\t\t--pitch7-primary-note:\t\t#E6FF92;\r\n\t\t\t\t\t--pitch8-secondary-channel: #DF0019;\r\n\t\t\t\t\t--pitch8-primary-channel:   #FF98A4;\r\n\t\t\t\t\t--pitch8-secondary-note:    #FF4E63;\r\n\t\t\t\t\t--pitch8-primary-note:      #FFB2BB;\r\n\t\t\t\t\t--pitch9-secondary-channel: #00A170;\r\n\t\t\t\t\t--pitch9-primary-channel:   #50FFC9;\r\n\t\t\t\t\t--pitch9-secondary-note:    #00C78A;\r\n\t\t\t\t\t--pitch9-primary-note:\t\t#83FFD9;\r\n\t\t\t\t\t--pitch10-secondary-channel:#A11FFF;\r\n\t\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\r\n\t\t\t\t\t--pitch10-secondary-note:   #B757FF;\r\n\t\t\t\t\t--pitch10-primary-note:     #DFACFF;\r\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\r\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\r\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\r\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\r\n\t\t\t\t\t--noise2-secondary-channel: #996633;\r\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\r\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\r\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\r\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\r\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\r\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\r\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\r\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\r\n\t\t\t\t\t--noise4-primary-channel:   #AF82D2;\r\n\t\t\t\t\t--noise4-secondary-note:    #9E71C1;\r\n\t\t\t\t\t--noise4-primary-note:      #D4C1EA;\r\n\t\t\t\t\t--noise5-secondary-channel: #607837;\r\n\t\t\t\t\t--noise5-primary-channel:   #A2BB77;\r\n\t\t\t\t\t--noise5-secondary-note:    #91AA66;\r\n\t\t\t\t\t--noise5-primary-note:      #C5E2B2;\r\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #f8ddff;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\r\n\t\t\t\t\t--mod-label-primary:        #999;\r\n\t\t\t\t\t--mod-label-secondary-text: #333;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\t\t\t\t\t--disabled-note-primary:    #999;\r\n\t\t\t\t\t--disabled-note-secondary:  #666;\r\n\r\n\t\t\t}\r\n\t\t`,\r\n        \"light classic\": `\r\n\t\t\t:root {\r\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t--page-margin: #685d88;\r\n\t\t\t\t--editor-background: white;\r\n\t\t\t\t--hover-preview: black;\r\n\t\t\t\t--playhead: rgba(0,0,0,0.5);\r\n\t\t\t\t--primary-text: black;\r\n\t\t\t\t--secondary-text: #777;\r\n\t\t\t\t--inverted-text: white;\r\n\t\t\t\t--text-selection: rgba(200,170,255,0.99);\r\n\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\r\n\t\t\t\t--loop-accent: #98f;\r\n\t\t\t\t--link-accent: #74f;\r\n\t\t\t\t--ui-widget-background: #ececec;\r\n\t\t\t\t--ui-widget-focus: #eee;\r\n\t\t\t\t--pitch-background: #ececec;\r\n\t\t\t\t--tonic: #f0d6b6;\r\n\t\t\t\t--fifth-note: #bbddf0;\r\n\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t--oscilloscope-line-L: black;\r\n\t\t\t\t--oscilloscope-line-R: rgba(200,170,255,0.99);\r\n\t\t\t\t--mod-title: black;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #ececec;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #fdfdfd;\r\n\t\t\t\t\t--track-editor-bg-noise: #ececec;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #fdfdfd;\r\n\t\t\t\t\t--track-editor-bg-mod: #dbecfd;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #ecfdff;\r\n\t\t\t\t\t--multiplicative-mod-slider: #789;\r\n\t\t\t\t\t--overwriting-mod-slider: #987;\r\n\t\t\t\t\t--indicator-primary: #98f;\r\n\t\t\t\t\t--indicator-secondary: #cde;\r\n\t\t\t\t\t--select2-opt-group: #cecece;\r\n\t\t\t\t\t--input-box-outline: #ddd;\r\n\t\t\t\t\t--mute-button-normal: #c0b47f;\r\n\t\t\t\t\t--mute-button-mod: #bd7fc0;\r\n\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\r\n\t\t\t\t--pitch1-primary-channel:   #00A0BD;\r\n\t\t\t\t--pitch1-secondary-note:    #34C2DC;\r\n\t\t\t\t--pitch1-primary-note:      #00758A;\r\n\t\t\t\t--pitch2-secondary-channel: #E3C941;\r\n\t\t\t\t--pitch2-primary-channel:   #B49700;\r\n\t\t\t\t--pitch2-secondary-note:    #D1B628;\r\n\t\t\t\t--pitch2-primary-note:      #836E00;\r\n\t\t\t\t--pitch3-secondary-channel: #FF9D61;\r\n\t\t\t\t--pitch3-primary-channel:   #E14E00;\r\n\t\t\t\t--pitch3-secondary-note:    #F67D3C;\r\n\t\t\t\t--pitch3-primary-note:      #B64000;\r\n\t\t\t\t--pitch4-secondary-channel: #4BE24B;\r\n\t\t\t\t--pitch4-primary-channel:   #00A800;\r\n\t\t\t\t--pitch4-secondary-note:    #2DC82D;\r\n\t\t\t\t--pitch4-primary-note:      #008000;\r\n\t\t\t\t--pitch5-secondary-channel: #FF90FF;\r\n\t\t\t\t--pitch5-primary-channel:   #E12EDF;\r\n\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\r\n\t\t\t\t--pitch5-primary-note:      #A600A5;\r\n\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\r\n\t\t\t\t--pitch6-primary-channel:   #6969FD;\r\n\t\t\t\t--pitch6-secondary-note:    #9393FE;\r\n\t\t\t\t--pitch6-primary-note:      #4A4AD7;\r\n\t\t\t\t--pitch7-secondary-channel: #C2D848;\r\n\t\t\t\t--pitch7-primary-channel:   #8EA800;\r\n\t\t\t\t--pitch7-secondary-note:    #B0C82D;\r\n\t\t\t\t--pitch7-primary-note:      #6C8000;\r\n\t\t\t\t--pitch8-secondary-channel: #FF90A4;\r\n\t\t\t\t--pitch8-primary-channel:   #E12E4D;\r\n\t\t\t\t--pitch8-secondary-note:    #EC6E85;\r\n\t\t\t\t--pitch8-primary-note:      #A6001D;\r\n\t\t\t\t--pitch9-secondary-channel: #41E3B5;\r\n\t\t\t\t--pitch9-primary-channel:   #00B481;\r\n\t\t\t\t--pitch9-secondary-note:    #28D1A1;\r\n\t\t\t\t--pitch9-primary-note:      #00835E;\r\n\t\t\t\t--pitch10-secondary-channel:#CA77FF;\r\n\t\t\t\t--pitch10-primary-channel:  #9609FF;\r\n\t\t\t\t--pitch10-secondary-note:   #B54FFF;\r\n\t\t\t\t--pitch10-primary-note:     #8400E3;\r\n\t\t\t\t--noise1-secondary-channel: #C1C1C1;\r\n\t\t\t\t--noise1-primary-channel:   #898989;\r\n\t\t\t\t--noise1-secondary-note:    #ADADAD;\r\n\t\t\t\t--noise1-primary-note:      #6C6C6C;\r\n\t\t\t\t--noise2-secondary-channel: #E8BB8C;\r\n\t\t\t\t--noise2-primary-channel:   #BD7D3A;\r\n\t\t\t\t--noise2-secondary-note:    #D1A374;\r\n\t\t\t\t--noise2-primary-note:      #836342;\r\n\t\t\t\t--noise3-secondary-channel: #9BC4EB;\r\n\t\t\t\t--noise3-primary-channel:   #4481BE;\r\n\t\t\t\t--noise3-secondary-note:    #7CA7D3;\r\n\t\t\t\t--noise3-primary-note:      #476685;\r\n\t\t\t\t--noise4-secondary-channel: #C5A5E0;\r\n\t\t\t\t--noise4-primary-channel:   #8553AE;\r\n\t\t\t\t--noise4-secondary-note:    #B290CC;\r\n\t\t\t\t--noise4-primary-note:      #684F7D;\r\n\t\t\t\t--noise5-secondary-channel: #B8CE93;\r\n\t\t\t\t--noise5-primary-channel:   #87A74F;\r\n\t\t\t\t--noise5-secondary-note:    #ABC183;\r\n\t\t\t\t--noise5-primary-note:      #68784C;\r\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77dd55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #2ad84a;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ba124a;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:        #7a1caa;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #a86810;\r\n\t\t\t\t\t--mod-label-primary:        #dddddd;\r\n\t\t\t\t\t--mod-label-secondary-text: #777;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\t\t\t\t\t--disabled-note-primary:    #666;\r\n\t\t\t\t\t--disabled-note-secondary:  #aaa;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t}\r\n\r\n\t\t\t\t.select2-selection__rendered {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\t\t`,\r\n\t\t\"old jummbox classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #040410;\r\n\t\t\t\t\t--editor-background: #040410;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t\t\t--primary-text: white;\r\n\t\t\t\t\t--secondary-text: #84859a;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: #044b94;\r\n\t\t\t\t\t--loop-accent: #74f;\r\n\t\t\t\t\t--link-accent: #98f;\r\n\t\t\t\t\t--ui-widget-background: #393e4f;\r\n\t\t\t\t\t--ui-widget-focus: #6d6886;\r\n\t\t\t\t\t--pitch-background: #393e4f;\r\n\t\t\t\t\t--tonic: #725491;\r\n\t\t\t\t\t--fifth-note: #54547a;\r\n\t\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t\t\t--oscilloscope-line-R: rgba(119,68,255,0.99);\r\n\t\t\t\t\t--mod-title: #9c64f7;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t\t\t--track-editor-bg-mod: #283560;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\r\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t\t\t--input-box-outline: #222;\r\n\t\t\t\t\t--mute-button-normal: #dda85d;\r\n\t\t\t\t\t--mute-button-mod: #886eae;\r\n\t\t\t\t\t--mod-label-primary: #282840;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\r\n\t\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.5;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.5;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.5;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.5;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 0;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 192;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 192;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 192;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #91879f;\r\n\t\t\t\t\t--disabled-note-secondary:  #6a677a;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"jummbox classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #040410;\r\n\t\t\t\t\t--editor-background: #040410;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t\t\t--primary-text: white;\r\n\t\t\t\t\t--secondary-text: #84859a;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: #044b94;\r\n\t\t\t\t\t--loop-accent: #74f;\r\n\t\t\t\t\t--link-accent: #98f;\r\n\t\t\t\t\t--ui-widget-background: #393e4f;\r\n\t\t\t\t\t--ui-widget-focus: #6d6886;\r\n\t\t\t\t\t--pitch-background: #393e4f;\r\n\t\t\t\t\t--tonic: #725491;\r\n\t\t\t\t\t--fifth-note: #54547a;\r\n\t\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t\t\t--oscilloscope-line-R: rgba(119,68,255,0.99);\r\n\t\t\t\t\t--mod-title: #9c64f7;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t\t\t--track-editor-bg-mod: #283560;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\r\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t\t\t--input-box-outline: #222;\r\n\t\t\t\t\t--mute-button-normal: #dda85d;\r\n\t\t\t\t\t--mute-button-mod: #886eae;\r\n\t\t\t\t\t--mod-label-primary: #282840;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\r\n\t\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 0;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 192;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 192;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 192;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #91879f;\r\n\t\t\t\t\t--disabled-note-secondary:  #6a677a;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"forest\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #010c03;\r\n\t\t\t\t\t--editor-background: #010c03;\r\n\t\t\t\t\t--hover-preview: #efe;\r\n\t\t\t\t\t--playhead: rgba(232, 255, 232, 0.9);\r\n\t\t\t\t\t--primary-text: #efe;\r\n\t\t\t\t\t--secondary-text: #70A070;\r\n\t\t\t\t\t--inverted-text: #280228;\r\n\t\t\t\t\t--text-selection: rgba(255,68,199,0.99);\r\n\t\t\t\t\t--box-selection-fill: #267aa3;\r\n\t\t\t\t\t--loop-accent: #ffe845;\r\n\t\t\t\t\t--link-accent: #9f8;\r\n\t\t\t\t\t--ui-widget-background: #203829;\r\n\t\t\t\t\t--ui-widget-focus: #487860;\r\n\t\t\t\t\t--pitch-background: #203829;\r\n\t\t\t\t\t--tonic: #2b8d20;\r\n\t\t\t\t\t--fifth-note: #385840;\r\n\t\t\t\t\t--white-piano-key: #bda;\r\n\t\t\t\t\t--black-piano-key: #573;\r\n\t\t\t\t\t--oscilloscope-line-L: #efe;\r\n\t\t\t\t\t--oscilloscope-line-R: rgba(255,68,199,0.99);\r\n\t\t\t\t\t--mod-title: #18e972;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #254820;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #102819;\r\n\t\t\t\t\t--track-editor-bg-noise: #304050;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #102030;\r\n\t\t\t\t\t--track-editor-bg-mod: #506030;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #2a300a;\r\n\t\t\t\t\t--multiplicative-mod-slider: #205c8f;\r\n\t\t\t\t\t--overwriting-mod-slider: #20ac6f;\r\n\t\t\t\t\t--indicator-primary: #dcd866;\r\n\t\t\t\t\t--indicator-secondary: #203829;\r\n\t\t\t\t\t--select2-opt-group: #1a6f5a;\r\n\t\t\t\t\t--input-box-outline: #242;\r\n\t\t\t\t\t--mute-button-normal: #49e980;\r\n\t\t\t\t\t--mute-button-mod: #c2e502;\r\n\t\t\t\t\t--mod-label-primary: #133613;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(27, 126, 40);\r\n\t\t\t\t\t--mod-label-primary-text: #efe;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 120;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 59;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 50;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 120;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 86;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 70;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 120;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 85;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 30;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-primary-note-hue: 120;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 80;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 200;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 22;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 200;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-primary-channel-sat: 48;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 65;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 200;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 33;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 200;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 64;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 40;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 44;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 40;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-primary-channel-sat: 60;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 40;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-secondary-note-sat: 62;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 55;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 40;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-primary-note-sat: 66;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #536e5c;\r\n\t\t\t\t\t--disabled-note-secondary:  #395440;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"canyon\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #0a0000;\r\n\t\t\t\t\t--editor-background: #0a0000;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: rgba(247, 172, 196, 0.9);\r\n\t\t\t\t\t--primary-text: #f5d6bf;\r\n\t\t\t\t\t--secondary-text: #934050;\r\n\t\t\t\t\t--inverted-text: #290505;\r\n\t\t\t\t\t--text-selection: rgba(255, 208, 68, 0.99);\r\n\t\t\t\t\t--box-selection-fill: #94044870;\r\n\t\t\t\t\t--loop-accent: #ff1e1e;\r\n\t\t\t\t\t--link-accent: #da7b76;\r\n\t\t\t\t\t--ui-widget-background: #533137;\r\n\t\t\t\t\t--ui-widget-focus: #743e4b;\r\n\t\t\t\t\t--pitch-background: #4f3939;\r\n\t\t\t\t\t--tonic: #9e4145;\r\n\t\t\t\t\t--fifth-note: #5b3e6b;\r\n\t\t\t\t\t--white-piano-key: #d89898;\r\n\t\t\t\t\t--black-piano-key: #572b29;\r\n\t\t\t\t\t--oscilloscope-line-L: #f5d6bf;\r\n\t\t\t\t\t--oscilloscope-line-R: rgba(255, 208, 68, 0.99);\r\n\t\t\t\t\t--mod-title: #d7c386;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #5e3a41;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #281d1c;\r\n\t\t\t\t\t--track-editor-bg-noise: #3a3551;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #272732;\r\n\t\t\t\t\t--track-editor-bg-mod: #552045;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #3e1442;\r\n\t\t\t\t\t--multiplicative-mod-slider: #9f6095;\r\n\t\t\t\t\t--overwriting-mod-slider: #b55050;\r\n\t\t\t\t\t--indicator-primary: #f2f764;\r\n\t\t\t\t\t--indicator-secondary: #4f3939;\r\n\t\t\t\t\t--select2-opt-group: #673030;\r\n\t\t\t\t\t--input-box-outline: #443131;\r\n\t\t\t\t\t--mute-button-normal: #d81833;\r\n\t\t\t\t\t--mute-button-mod: #9e2691;\r\n\t\t\t\t\t--mod-label-primary: #5f2b39;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(158, 66, 122);\r\n\t\t\t\t\t--mod-label-primary-text: #e6caed;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 73.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 90;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 83.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 35;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 60;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 60;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 60;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 60;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 222;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 222;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 222;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 54;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 222;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 75;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #515164;\r\n\t\t\t\t\t--disabled-note-secondary:  #2a2a3a;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"midnight\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #000;\r\n\t\t\t--editor-background: #000;\r\n\t\t\t--hover-preview: #757575;\r\n\t\t\t--playhead: #fff;\r\n\t\t\t--primary-text: #fff;\r\n\t\t\t--secondary-text: #acacac;\r\n\t\t\t--inverted-text: #290505;\r\n\t\t\t--text-selection: rgba(155, 155, 155, 0.99);\r\n\t\t\t--box-selection-fill: #79797970;\r\n\t\t\t--loop-accent: #646464;\r\n\t\t\t--link-accent: #707070;\r\n\t\t\t--ui-widget-background: #353535;\r\n\t\t\t--ui-widget-focus: #464646;\r\n\t\t\t--pitch-background: #222121;\r\n\t\t\t--tonic: #555955;\r\n\t\t\t--fifth-note: #1a1818;\r\n\t\t\t--white-piano-key: #a89e9e;\r\n\t\t\t--black-piano-key: #2d2424;\r\n\t\t\t--oscilloscope-line-L: #fff;\r\n\t\t\t--oscilloscope-line-R: rgba(155, 155, 155, 0.99);\r\n\t\t\t--mod-title: #9e9e9e;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #373737;\r\n\t\t\t--track-editor-bg-pitch-dim: #131313;\r\n\t\t\t--track-editor-bg-noise: #484848;\r\n\t\t\t--track-editor-bg-noise-dim: #131313;\r\n\t\t\t--track-editor-bg-mod: #373737;\r\n\t\t\t--track-editor-bg-mod-dim: #131313;\r\n\t\t\t--multiplicative-mod-slider: #555;\r\n\t\t\t--overwriting-mod-slider: #464545;\r\n\t\t\t--indicator-primary: #e0e0e0;\r\n\t\t\t--indicator-secondary: #404040;\r\n\t\t\t--select2-opt-group: #3c3b3b;\r\n\t\t\t--input-box-outline: #757575;\r\n\t\t\t--mute-button-normal: #8e8d8d;\r\n\t\t\t--mute-button-mod: #ddd;\r\n\t\t\t--mod-label-primary: #262526;\r\n\t\t\t--mod-label-secondary-text: rgb(227, 222, 225);\r\n\t\t\t--mod-label-primary-text: #b9b9b9;\r\n\t\t\t--pitch-secondary-channel-hue: 240;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 228;\r\n\t\t\t--pitch-secondary-channel-sat: 73.3;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 25;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: 240;\r\n\t\t\t--pitch-primary-channel-hue-scale: 228;\r\n\t\t\t--pitch-primary-channel-sat: 80;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 60.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: 240;\r\n\t\t\t--pitch-secondary-note-hue-scale: 228;\r\n\t\t\t--pitch-secondary-note-sat: 73.9;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 32;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: 240;\r\n\t\t\t--pitch-primary-note-hue-scale: 228;\r\n\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 80.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 160;\r\n\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 160;\r\n\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 160;\r\n\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 160;\r\n\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 62;\r\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 30;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 62;\r\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 62;\r\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 34;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 62;\r\n\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 75;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary:    #66a;\r\n\t\t\t--disabled-note-secondary:  #447;\r\n\t\t}\r\n\t`,\r\n        \"jummbox light\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t\t--page-margin: #fefdff;\r\n\t\t\t\t\t--editor-background: #fefdff;\r\n\t\t\t\t\t--hover-preview: #302880;\r\n\t\t\t\t\t--playhead: rgba(62, 32, 120, 0.9);\r\n\t\t\t\t\t--primary-text: #401890;\r\n\t\t\t\t\t--secondary-text: #8769af;\r\n\t\t\t\t\t--inverted-text: #fefdff;\r\n\t\t\t\t\t--text-selection: rgba(255,160,235,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(30,62,220,0.5);\r\n\t\t\t\t\t--loop-accent: #4c35d4;\r\n\t\t\t\t\t--link-accent: #7af;\r\n\t\t\t\t\t--ui-widget-background: #bf9cec;\r\n\t\t\t\t\t--ui-widget-focus: #e9c4ff;\r\n\t\t\t\t\t--pitch-background: #e2d9f9;\r\n\t\t\t\t\t--tonic: #c288cc;\r\n\t\t\t\t\t--fifth-note: #d8c9fd;\r\n\t\t\t\t\t--white-piano-key: #e2e2ff;\r\n\t\t\t\t\t--black-piano-key: #66667a;\r\n\t\t\t\t\t--oscilloscope-line-L: #401890;\r\n\t\t\t\t\t--oscilloscope-line-R: rgba(255,160,235,0.99);\r\n\t\t\t\t\t--mod-title: #700de8;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #d9e5ec;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #eaeef5;\r\n\t\t\t\t\t--track-editor-bg-noise: #ffc3ae;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #ffe0cf;\r\n\t\t\t\t\t--track-editor-bg-mod: #c9accc;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #ebe3ef;\r\n\t\t\t\t\t--multiplicative-mod-slider: #807caf;\r\n\t\t\t\t\t--overwriting-mod-slider: #909cdf;\r\n\t\t\t\t\t--indicator-primary: #ae38ff;\r\n\t\t\t\t\t--indicator-secondary: #bbd4ec;\r\n\t\t\t\t\t--select2-opt-group: #c1b7f1;\r\n\t\t\t\t\t--input-box-outline: #bbb;\r\n\t\t\t\t\t--mute-button-normal: #e9b752;\r\n\t\t\t\t\t--mute-button-mod: #9558ee;\r\n\t\t\t\t\t--mod-label-primary: #ececff;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(197, 145, 247);\r\n\t\t\t\t\t--mod-label-primary-text: #302880;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 53.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 72;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 97;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 45.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 95;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 43.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: -0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 220;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 62;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: -0.1;\r\n\t\t\t\t\t--noise-primary-channel-hue: 220;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 53;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 53.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: -0.1;\r\n\t\t\t\t\t--noise-secondary-note-hue: 220;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 58.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 85;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: -1;\r\n\t\t\t\t\t--noise-primary-note-hue: 220;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 56.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 54;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: -1;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 90;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 60;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 90;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 100;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 65;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 90;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 95;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 90;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 55;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #868;\r\n\t\t\t\t\t--disabled-note-secondary:  #767;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.select2-selection__rendered {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\r\n\t\t\"beachcombing\": `\r\n\t\t\t:root {\r\n\t\t\t--page-margin: #010121;\r\n\t\t\t--editor-background: #020222;\r\n\t\t\t--hover-preview: #f3ffff;\r\n\t\t\t--playhead: #fff;\r\n\t\t\t--primary-text: #c1f1ff;\r\n\t\t\t--secondary-text: #546775;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t--box-selection-fill: #3e0028;\r\n\t\t\t--loop-accent: #5a00ff;\r\n\t\t\t--link-accent: #ff00c8fc;\r\n\t\t\t--ui-widget-background: #1f2b52;\r\n\t\t\t--ui-widget-focus: #384e91;\r\n\t\t\t--pitch-background: #2c3155;\r\n\t\t\t--tonic: #a32f6e;\r\n\t\t\t--fifth-note: #0044a0;\r\n\t\t\t--white-piano-key: #fff;\r\n\t\t\t--black-piano-key: #202d42;\r\n\t\t\t--oscilloscope-line-L: #c1f1ff;\r\n\t\t\t--oscilloscope-line-R: rgba(119,68,255,0.99);\r\n\t\t\t--mod-title: #ef22bb;\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #34406c;\r\n\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t--track-editor-bg-noise: #562e3b;\r\n\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t--track-editor-bg-mod: #372e66;\r\n\t\t\t--track-editor-bg-mod-dim: #2a1640;\r\n\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t--indicator-primary: #ff67c2;\r\n\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t--input-box-outline: #222;\r\n\t\t\t--mute-button-normal: #7ce1ff;\r\n\t\t\t--mute-button-mod: #db519d;\r\n\t\t\t--pitch1-secondary-channel: #329b70;\r\n\t\t\t--pitch1-primary-channel: #53ffb8;\r\n\t\t\t--pitch1-secondary-note: #4cb98c;\r\n\t\t\t--pitch1-primary-note: #98ffd4;\r\n\t\t\t--pitch2-secondary-channel: #8e8632;\r\n\t\t\t--pitch2-primary-channel: #fff36a;\r\n\t\t\t--pitch2-secondary-note: #afaf22;\r\n\t\t\t--pitch2-primary-note: #f9f93f;\r\n\t\t\t--pitch3-secondary-channel: #018e8e;\r\n\t\t\t--pitch3-primary-channel: #00ffff;\r\n\t\t\t--pitch3-secondary-note: #24b7b7;\r\n\t\t\t--pitch3-primary-note: #a7ffff;\r\n\t\t\t--pitch4-secondary-channel: #6c003d;\r\n\t\t\t--pitch4-primary-channel: #ff0090;\r\n\t\t\t--pitch4-secondary-note: #a73c78;\r\n\t\t\t--pitch4-primary-note: #ff98d2;\r\n\t\t\t--pitch5-secondary-channel: #0e8153;\r\n\t\t\t--pitch5-primary-channel: #59ffbd;\r\n\t\t\t--pitch5-secondary-note: #489979;\r\n\t\t\t--pitch5-primary-note: #b0ffe0;\r\n\t\t\t--pitch6-secondary-channel: #185aab;\r\n\t\t\t--pitch6-primary-channel: #4e7ce5;\r\n\t\t\t--pitch6-secondary-note: #3e99d9;\r\n\t\t\t--pitch6-primary-note: #b3e3ff;\r\n\t\t\t--pitch7-secondary-channel: #4f007d;\r\n\t\t\t--pitch7-primary-channel: #a200ff;\r\n\t\t\t--pitch7-secondary-note: #9741c9;\r\n\t\t\t--pitch7-primary-note: #d386ff;\r\n\t\t\t--pitch8-secondary-channel: #101c8d;\r\n\t\t\t--pitch8-primary-channel: #1c5df1;\r\n\t\t\t--pitch8-secondary-note: #FF4E63;\r\n\t\t\t--pitch8-primary-note: #FFB2BB;\r\n\t\t\t--pitch9-secondary-channel: #00A170;\r\n\t\t\t--pitch9-primary-channel: #50FFC9;\r\n\t\t\t--pitch9-secondary-note: #00C78A;\r\n\t\t\t--pitch9-primary-note: #83FFD9;\r\n\t\t\t--pitch10-secondary-channel: #A11FFF;\r\n\t\t\t--pitch10-primary-channel: #CE8BFF;\r\n\t\t\t--pitch10-secondary-note: #B757FF;\r\n\t\t\t--pitch10-primary-note: #DFACFF;\r\n\t\t\t--noise1-secondary-channel: #635070;\r\n\t\t\t--noise1-primary-channel: #9071db;\r\n\t\t\t--noise1-secondary-note: #915dc1;\r\n\t\t\t--noise1-primary-note: #c5a5ff;\r\n\t\t\t--noise2-secondary-channel: #993367;\r\n\t\t\t--noise2-primary-channel: #dd777c;\r\n\t\t\t--noise2-secondary-note: #cc6695;\r\n\t\t\t--noise2-primary-note: #f0bbd1;\r\n\t\t\t--noise3-secondary-channel: #4a8c8f;\r\n\t\t\t--noise3-primary-channel: #77c5dd;\r\n\t\t\t--noise3-secondary-note: #6fb4cf;\r\n\t\t\t--noise3-primary-note: #bbf2ff;\r\n\t\t\t--noise4-secondary-channel: #8e3e7d;\r\n\t\t\t--noise4-primary-channel: #c682d2;\r\n\t\t\t--noise4-secondary-note: #b871c1;\r\n\t\t\t--noise4-primary-note: #ffb8f0;\r\n\t\t\t--noise5-secondary-channel: #785e37;\r\n\t\t\t--noise5-primary-channel: #bb9d77;\r\n\t\t\t--noise5-secondary-note: #aa8c66;\r\n\t\t\t--noise5-primary-note: #e2d1b2;\r\n\t\t\t--mod1-secondary-channel: #4e8397;\r\n\t\t\t--mod1-primary-channel: #92e6f3;\r\n\t\t\t--mod1-secondary-note: #76b9d9;\r\n\t\t\t--mod1-primary-note: #cde3ff;\r\n\t\t\t--mod2-secondary-channel: #ad5774;\r\n\t\t\t--mod2-primary-channel: #eba4ae;\r\n\t\t\t--mod2-secondary-note: #c9719b;\r\n\t\t\t--mod2-primary-note: #fdcee7;\r\n\t\t\t--mod3-secondary-channel: #6f579f;\r\n\t\t\t--mod3-primary-channel: #b192f7;\r\n\t\t\t--mod3-secondary-note: #a778e1;\r\n\t\t\t--mod3-primary-note: #f8ddff;\r\n\t\t\t--mod4-secondary-channel: #a88a36;\r\n\t\t\t--mod4-primary-channel: #bec825;\r\n\t\t\t--mod4-secondary-note: #aecb57;\r\n\t\t\t--mod4-primary-note: #dee9bd;\r\n\t\t\t--mod-label-primary: #2c2c56;\r\n\t\t\t--mod-label-secondary-text: rgb(71,69,147);\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #91879f;\r\n\t\t\t--disabled-note-secondary: #6a677a;\r\n\r\n\r\n\t\t\t}\r\n\t\t`,\r\n\r\n\t\t\"roe\": `\r\n\t\t\t:root {\r\n\t\t\t--page-margin: #050000;\r\n\t\t\t--editor-background: #050000;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: #b8cee0;\r\n\t\t\t--secondary-text: #cb3434;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgb(255 68 68 / 99%);\r\n\t\t\t--box-selection-fill: rgb(255 0 0 / 30%);\r\n\t\t\t--loop-accent: #7744FF;\r\n\t\t\t--link-accent: #FF2A2A;\r\n\t\t\t--ui-widget-background: #1a2642;\r\n\t\t\t--ui-widget-focus: #2c3f6d;\r\n\t\t\t--pitch-background: #15111a;\r\n\t\t\t--tonic: #1b3041;\r\n\t\t\t--fifth-note: #381818;\r\n\t\t\t--white-piano-key: #cdcdcd;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--oscilloscope-line-L: #b8cee0;\r\n\t\t\t--oscilloscope-line-R: rgb(255 68 68 / 99%);\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #302938;\r\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\r\n\t\t\t--track-editor-bg-noise: #261f42;\r\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\r\n\t\t\t--track-editor-bg-mod: #183049;\r\n\t\t\t--track-editor-bg-mod-dim: #102132;\r\n\t\t\t--multiplicative-mod-slider: #344a7f;\r\n\t\t\t--overwriting-mod-slider: #344a7f;\r\n\t\t\t--indicator-primary: #FF2A2A;\r\n\t\t\t--indicator-secondary: #800000;\r\n\t\t\t--select2-opt-group: #141e34;\r\n\t\t\t--input-box-outline: #141e34;\r\n\t\t\t--mute-button-normal: #299eff;\r\n\t\t\t--mute-button-mod: #165a93;\r\n\t\t\t--pitch1-secondary-channel: #273c90;\r\n\t\t\t--pitch1-primary-channel: #476BFF;\r\n\t\t\t--pitch1-secondary-note: #273c90;\r\n\t\t\t--pitch1-primary-note: #476BFF;\r\n\t\t\t--pitch2-secondary-channel: #3a3898;\r\n\t\t\t--pitch2-primary-channel: #625FFB;\r\n\t\t\t--pitch2-secondary-note: #3a3898;\r\n\t\t\t--pitch2-primary-note: #625FFB;\r\n\t\t\t--pitch3-secondary-channel: #542780;\r\n\t\t\t--pitch3-primary-channel: #9C49EC;\r\n\t\t\t--pitch3-secondary-note: #542780;\r\n\t\t\t--pitch3-primary-note: #9C49EC;\r\n\t\t\t--pitch4-secondary-channel: #84225d;\r\n\t\t\t--pitch4-primary-channel: #fd3fb1;\r\n\t\t\t--pitch4-secondary-note: #84225d;\r\n\t\t\t--pitch4-primary-note: #fd3fb1;\r\n\t\t\t--pitch5-secondary-channel: #8d2323;\r\n\t\t\t--pitch5-primary-channel: #ff3f3f;\r\n\t\t\t--pitch5-secondary-note: #8d2323;\r\n\t\t\t--pitch5-primary-note: #ff3f3f;\r\n\t\t\t--pitch6-secondary-channel: #84225d;\r\n\t\t\t--pitch6-primary-channel: #fd3fb1;\r\n\t\t\t--pitch6-secondary-note: #84225d;\r\n\t\t\t--pitch6-primary-note: #fd3fb1;\r\n\t\t\t--pitch7-secondary-channel: #542780;\r\n\t\t\t--pitch7-primary-channel: #9C49EC;\r\n\t\t\t--pitch7-secondary-note: #542780;\r\n\t\t\t--pitch7-primary-note: #9C49EC;\r\n\t\t\t--pitch8-secondary-channel: #3a3898;\r\n\t\t\t--pitch8-primary-channel: #625FFB;\r\n\t\t\t--pitch8-secondary-note: #3a3898;\r\n\t\t\t--pitch8-primary-note: #625FFB;\r\n\t\t\t--pitch9-secondary-channel: #273c90;\r\n\t\t\t--pitch9-primary-channel: #476BFF;\r\n\t\t\t--pitch9-secondary-note: #273c90;\r\n\t\t\t--pitch9-primary-note: #476BFF;\r\n\t\t\t--pitch10-secondary-channel: #165a93;\r\n\t\t\t--pitch10-primary-channel: #299EFF;\r\n\t\t\t--pitch10-secondary-note: #165a93;\r\n\t\t\t--pitch10-primary-note: #299EFF;\r\n\t\t\t--noise1-secondary-channel: #4281FF;\r\n\t\t\t--noise1-primary-channel: #96b9ff;\r\n\t\t\t--noise1-secondary-note: #4281FF;\r\n\t\t\t--noise1-primary-note: #96b9ff;\r\n\t\t\t--noise2-secondary-channel: #7347FF;\r\n\t\t\t--noise2-primary-channel: #c3b0ff;\r\n\t\t\t--noise2-secondary-note: #7347FF;\r\n\t\t\t--noise2-primary-note: #c3b0ff;\r\n\t\t\t--noise3-secondary-channel: #9F3CBF;\r\n\t\t\t--noise3-primary-channel: #e29cf9;\r\n\t\t\t--noise3-secondary-note: #9F3CBF;\r\n\t\t\t--noise3-primary-note: #e29cf9;\r\n\t\t\t--noise4-secondary-channel: #D3326F;\r\n\t\t\t--noise4-primary-channel: #fb9bbf;\r\n\t\t\t--noise4-secondary-note: #D3326F;\r\n\t\t\t--noise4-primary-note: #fb9bbf;\r\n\t\t\t--noise5-secondary-channel: #FF2A2A;\r\n\t\t\t--noise5-primary-channel: #ffa2a2;\r\n\t\t\t--noise5-secondary-note: #FF2A2A;\r\n\t\t\t--noise5-primary-note: #ffa2a2;\r\n\t\t\t--mod1-secondary-channel: #47587a;\r\n\t\t\t--mod1-primary-channel: #96b9ff;\r\n\t\t\t--mod1-secondary-note: #47587a;\r\n\t\t\t--mod1-primary-note: #96b9ff;\r\n\t\t\t--mod2-secondary-channel: #716791;\r\n\t\t\t--mod2-primary-channel: #c3b0ff;\r\n\t\t\t--mod2-secondary-note: #716791;\r\n\t\t\t--mod2-primary-note: #c3b0ff;\r\n\t\t\t--mod3-secondary-channel: #6f4c7b;\r\n\t\t\t--mod3-primary-channel: #e29cf9;\r\n\t\t\t--mod3-secondary-note: #6f4c7b;\r\n\t\t\t--mod3-primary-note: #e29cf9;\r\n\t\t\t--mod4-secondary-channel: #9e6279;\r\n\t\t\t--mod4-primary-channel: #fb9bbf;\r\n\t\t\t--mod4-secondary-note: #9e6279;\r\n\t\t\t--mod4-primary-note: #fb9bbf;\r\n\t\t\t--mod-label-primary: #15111a;\r\n\t\t\t--mod-label-secondary-text: #cb3434;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #c9c9c9;\r\n\t\t\t--disabled-note-secondary: #616161;\r\n\t\t}`,\r\n\r\n\t\t\"moonlight\": `\r\n\t\t\t:root {\r\n\t\t\t--page-margin: #020514;\r\n\t\t\t--editor-background: #020514;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: #D4DCE9;\r\n\t\t\t--secondary-text: #3E87DA;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: #03599bd9;\r\n\t\t\t--box-selection-fill: hsl(206deg 66% 41% / 85%);\r\n\t\t\t--loop-accent: #639BD6;\r\n\t\t\t--link-accent: #A8C6E8;\r\n\t\t\t--ui-widget-background: #1e2940;\r\n\t\t\t--ui-widget-focus: #324b81;\r\n\t\t\t--pitch-background: #223849;\r\n\t\t\t--tonic: #33536c;\r\n\t\t\t--fifth-note: hsl(206deg 36% 16%);\r\n\t\t\t--white-piano-key: #c1bfe9;\r\n\t\t\t--black-piano-key: #454354;\r\n\t\t\t--oscilloscope-line-L: #D4DCE9;\r\n\t\t\t--oscilloscope-line-R: #03599bd9;\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #25568d80;\r\n\t\t\t--track-editor-bg-pitch-dim: #10253c80;\r\n\t\t\t--track-editor-bg-noise: #25568d80;\r\n\t\t\t--track-editor-bg-noise-dim: #10253c80;\r\n\t\t\t--track-editor-bg-mod: #25568d80;\r\n\t\t\t--track-editor-bg-mod-dim: #10253c80;\r\n\t\t\t--multiplicative-mod-slider: #0476cd;\r\n\t\t\t--overwriting-mod-slider: #035899;\r\n\t\t\t--indicator-primary: #57a1f4;\r\n\t\t\t--indicator-secondary: #2e5684;\r\n\t\t\t--select2-opt-group: #24355c;\r\n\t\t\t--input-box-outline: #141e34;\r\n\t\t\t--mute-button-normal: #6ebffc;\r\n\t\t\t--mute-button-mod: #0a92fa;\r\n\t\t\t--pitch1-secondary-channel: #47425c;\r\n\t\t\t--pitch1-primary-channel: #918bac;\r\n\t\t\t--pitch1-secondary-note: #6b6489;\r\n\t\t\t--pitch1-primary-note: #a8a3bf;\r\n\t\t\t--pitch2-secondary-channel: #626493;\r\n\t\t\t--pitch2-primary-channel: #bdbed3;\r\n\t\t\t--pitch2-secondary-note: #626493;\r\n\t\t\t--pitch2-primary-note: #bdbed3;\r\n\t\t\t--pitch3-secondary-channel: #6e89b4;\r\n\t\t\t--pitch3-primary-channel: #d4dce9;\r\n\t\t\t--pitch3-secondary-note: #6e89b4;\r\n\t\t\t--pitch3-primary-note: #d4dce9;\r\n\t\t\t--pitch4-secondary-channel: #4c77a9;\r\n\t\t\t--pitch4-primary-channel: #a8c6e8;\r\n\t\t\t--pitch4-secondary-note: #4c77a9;\r\n\t\t\t--pitch4-primary-note: #a8c6e8;\r\n\t\t\t--pitch5-secondary-channel: #314e6d;\r\n\t\t\t--pitch5-primary-channel: #639bd6;\r\n\t\t\t--pitch5-secondary-note: #46698f;\r\n\t\t\t--pitch5-primary-note: #639bd6;\r\n\t\t\t--pitch6-secondary-channel: #143d6b;\r\n\t\t\t--pitch6-primary-channel: #3e87da;\r\n\t\t\t--pitch6-secondary-note: #143d6b;\r\n\t\t\t--pitch6-primary-note: #3e87da;\r\n\t\t\t--pitch7-secondary-channel: #314e6d;\r\n\t\t\t--pitch7-primary-channel: #639bd6;\r\n\t\t\t--pitch7-secondary-note: #314e6d;\r\n\t\t\t--pitch7-primary-note: #639bd6;\r\n\t\t\t--pitch8-secondary-channel: #4c77a9;\r\n\t\t\t--pitch8-primary-channel: #a8c6e8;\r\n\t\t\t--pitch8-secondary-note: #4c77a9;\r\n\t\t\t--pitch8-primary-note: #a8c6e8;\r\n\t\t\t--pitch9-secondary-channel: #6e89b4;\r\n\t\t\t--pitch9-primary-channel: #d4dce9;\r\n\t\t\t--pitch9-secondary-note: #6e89b4;\r\n\t\t\t--pitch9-primary-note: #d4dce9;\r\n\t\t\t--pitch10-secondary-channel: #626493;\r\n\t\t\t--pitch10-primary-channel: #bdbed3;\r\n\t\t\t--pitch10-secondary-note: #626493;\r\n\t\t\t--pitch10-primary-note: #bdbed3;\r\n\t\t\t--noise1-secondary-channel: #4b4a55;\r\n\t\t\t--noise1-primary-channel: #9795a3;\r\n\t\t\t--noise1-secondary-note: #4b4a55;\r\n\t\t\t--noise1-primary-note: #9795a3;\r\n\t\t\t--noise2-secondary-channel: #858e9d;\r\n\t\t\t--noise2-primary-channel: #d7dce5;\r\n\t\t\t--noise2-secondary-note: #858e9d;\r\n\t\t\t--noise2-primary-note: #d7dce5;\r\n\t\t\t--noise3-secondary-channel: #394e65;\r\n\t\t\t--noise3-primary-channel: #809bb7;\r\n\t\t\t--noise3-secondary-note: #394e65;\r\n\t\t\t--noise3-primary-note: #809bb7;\r\n\t\t\t--noise4-secondary-channel: #37577b;\r\n\t\t\t--noise4-primary-channel: #6189b8;\r\n\t\t\t--noise4-secondary-note: #37577b;\r\n\t\t\t--noise4-primary-note: #6189b8;\r\n\t\t\t--noise5-secondary-channel: #223849;\r\n\t\t\t--noise5-primary-channel: #5588af;\r\n\t\t\t--noise5-secondary-note: #223849;\r\n\t\t\t--noise5-primary-note: #5588af;\r\n\t\t\t--mod1-secondary-channel: #3e336c;\r\n\t\t\t--mod1-primary-channel: #6d60a4;\r\n\t\t\t--mod1-secondary-note: #3e336c;\r\n\t\t\t--mod1-primary-note: #6d60a4;\r\n\t\t\t--mod2-secondary-channel: #716791;\r\n\t\t\t--mod2-primary-channel: #bdbed3;\r\n\t\t\t--mod2-secondary-note: #716791;\r\n\t\t\t--mod2-primary-note: #bdbed3;\r\n\t\t\t--mod3-secondary-channel: #6b91bd;\r\n\t\t\t--mod3-primary-channel: #4b8fdd;\r\n\t\t\t--mod3-secondary-note: #597ca7;\r\n\t\t\t--mod3-primary-note: #7eade3;\r\n\t\t\t--mod4-secondary-channel: #14559f;\r\n\t\t\t--mod4-primary-channel: #3386e6;\r\n\t\t\t--mod4-secondary-note: #14559f;\r\n\t\t\t--mod4-primary-note: #3386e6;\r\n\t\t\t--mod-label-primary: #1e2940;\r\n\t\t\t--mod-label-secondary-text: #748ebe;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #828282;\r\n\t\t\t--disabled-note-secondary: #4f4f4f;\r\n\t\t\t}`,\r\n\r\n\t\t\"autumn\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #060304;\r\n\t\t\t--editor-background: #060304;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #999;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgb(115 80 76);\r\n\t\t\t--box-selection-fill: rgb(174 73 81 / 45%);\r\n\t\t\t--loop-accent: #834A69;\r\n\t\t\t--link-accent: #98f;\r\n\t\t\t--ui-widget-background: #2a2523;\r\n\t\t\t--ui-widget-focus: #4e4c44;\r\n\t\t\t--pitch-background: #121212;\r\n\t\t\t--tonic: #4f4f4f;\r\n\t\t\t--fifth-note: #222;\r\n\t\t\t--white-piano-key: #b59b9b;\r\n\t\t\t--black-piano-key: #231e1e;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: rgb(115 80 76);\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #352f38;\r\n\t\t\t--track-editor-bg-pitch-dim: #232025;\r\n\t\t\t--track-editor-bg-noise: #3c3029;\r\n\t\t\t--track-editor-bg-noise-dim: #251d19;\r\n\t\t\t--track-editor-bg-mod: #202623;\r\n\t\t\t--track-editor-bg-mod-dim: #131715;\r\n\t\t\t--multiplicative-mod-slider: #D9D16E;\r\n\t\t\t--overwriting-mod-slider: #2D826F;\r\n\t\t\t--indicator-primary: #D9D16E;\r\n\t\t\t--indicator-secondary: #444226;\r\n\t\t\t--select2-opt-group: #20191c;\r\n\t\t\t--input-box-outline: #20191c;\r\n\t\t\t--mute-button-normal: var(--pitch2-primary-channel);\r\n\t\t\t--mute-button-mod: var(--pitch4-primary-channel);\r\n\t\t\t--pitch1-secondary-channel: #704a34;\r\n\t\t\t--pitch1-primary-channel: #D9895A;\r\n\t\t\t--pitch1-secondary-note: #704a34;\r\n\t\t\t--pitch1-primary-note: #D9895A;\r\n\t\t\t--pitch2-secondary-channel: #5f3538;\r\n\t\t\t--pitch2-primary-channel: #AE4951;\r\n\t\t\t--pitch2-secondary-note: #5f3538;\r\n\t\t\t--pitch2-primary-note: #AE4951;\r\n\t\t\t--pitch3-secondary-channel: #5c4336;\r\n\t\t\t--pitch3-primary-channel: #CA9A81;\r\n\t\t\t--pitch3-secondary-note: #5c4336;\r\n\t\t\t--pitch3-primary-note: #CA9A81;\r\n\t\t\t--pitch4-secondary-channel: #1d3143;\r\n\t\t\t--pitch4-primary-channel: #386995;\r\n\t\t\t--pitch4-secondary-note: #1d3143;\r\n\t\t\t--pitch4-primary-note: #386995;\r\n\t\t\t--pitch5-secondary-channel: #9c8a58;\r\n\t\t\t--pitch5-primary-channel: #D9D16E;\r\n\t\t\t--pitch5-secondary-note: #7c783f;\r\n\t\t\t--pitch5-primary-note: #D9D16E;\r\n\t\t\t--pitch6-secondary-channel: #886562;\r\n\t\t\t--pitch6-primary-channel: #D3A9A5;\r\n\t\t\t--pitch6-secondary-note: #886562;\r\n\t\t\t--pitch6-primary-note: #D3A9A5;\r\n\t\t\t--pitch7-secondary-channel: #1c3f37;\r\n\t\t\t--pitch7-primary-channel: #2D826F;\r\n\t\t\t--pitch7-secondary-note: #1c3f37;\r\n\t\t\t--pitch7-primary-note: #2D826F;\r\n\t\t\t--pitch8-secondary-channel: #442e2d;\r\n\t\t\t--pitch8-primary-channel: #815150;\r\n\t\t\t--pitch8-secondary-note: #442e2d;\r\n\t\t\t--pitch8-primary-note: #815150;\r\n\t\t\t--pitch9-secondary-channel: #8e6f60;\r\n\t\t\t--pitch9-primary-channel: #E5B8A1;\r\n\t\t\t--pitch9-secondary-note: #8e6f60;\r\n\t\t\t--pitch9-primary-note: #E5B8A1;\r\n\t\t\t--pitch10-secondary-channel: #4f3142;\r\n\t\t\t--pitch10-primary-channel: #834A69;\r\n\t\t\t--pitch10-secondary-note: #4f3142;\r\n\t\t\t--pitch10-primary-note: #834A69;\r\n\t\t\t--noise1-secondary-channel: #6b5346;\r\n\t\t\t--noise1-primary-channel: #b99c89;\r\n\t\t\t--noise1-secondary-note: #6b5346;\r\n\t\t\t--noise1-primary-note: #F0D0BB;\r\n\t\t\t--noise2-secondary-channel: #4a3839;\r\n\t\t\t--noise2-primary-channel: #9c6b6e;\r\n\t\t\t--noise2-secondary-note: #4a3839;\r\n\t\t\t--noise2-primary-note: #c18b8f;\r\n\t\t\t--noise3-secondary-channel: #2d3c4a;\r\n\t\t\t--noise3-primary-channel: #536e86;\r\n\t\t\t--noise3-secondary-note: #2d3c4a;\r\n\t\t\t--noise3-primary-note: #8fa8c0;\r\n\t\t\t--noise4-secondary-channel: #273f3a;\r\n\t\t\t--noise4-primary-channel: #4e8377;\r\n\t\t\t--noise4-secondary-note: #273f3a;\r\n\t\t\t--noise4-primary-note: #87baae;\r\n\t\t\t--noise5-secondary-channel: #372730;\r\n\t\t\t--noise5-primary-channel: #7f5e70;\r\n\t\t\t--noise5-secondary-note: #372730;\r\n\t\t\t--noise5-primary-note: #cc96b3;\r\n\t\t\t--mod1-secondary-channel: #783f1f;\r\n\t\t\t--mod1-primary-channel: #dc6d2c;\r\n\t\t\t--mod1-secondary-note: #783f1f;\r\n\t\t\t--mod1-primary-note: #dc6d2c;\r\n\t\t\t--mod2-secondary-channel: #0b3153;\r\n\t\t\t--mod2-primary-channel: #1464ac;\r\n\t\t\t--mod2-secondary-note: #0b3153;\r\n\t\t\t--mod2-primary-note: #1464ac;\r\n\t\t\t--mod3-secondary-channel: #075040;\r\n\t\t\t--mod3-primary-channel: #08a17f;\r\n\t\t\t--mod3-secondary-note: #075040;\r\n\t\t\t--mod3-primary-note: #08a17f;\r\n\t\t\t--mod4-secondary-channel: #631640;\r\n\t\t\t--mod4-primary-channel: #b4186d;\r\n\t\t\t--mod4-secondary-note: #631640;\r\n\t\t\t--mod4-primary-note: #b4186d;\r\n\t\t\t--mod-label-primary: #000;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #5d5d5d;\r\n\t\t\t--disabled-note-secondary: #292929;\r\n\t\t}`,\r\n\r\n\t\t\"fruit\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #040507;\r\n\t\t\t--editor-background: #040507;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #999;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgb(115 103 76);\r\n\t\t\t--box-selection-fill: rgb(174 109 73 / 45%);\r\n\t\t\t--loop-accent: #EC897D;\r\n\t\t\t--link-accent: #FDE484;\r\n\t\t\t--ui-widget-background: #22222c;\r\n\t\t\t--ui-widget-focus: #39394c;\r\n\t\t\t--pitch-background: #101010;\r\n\t\t\t--tonic: #2c2d34;\r\n\t\t\t--fifth-note: #191a20;\r\n\t\t\t--white-piano-key: #bbbaba;\r\n\t\t\t--black-piano-key: #2d2d2d;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: rgb(115 103 76);\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #2b2d40;\r\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\r\n\t\t\t--track-editor-bg-noise: #3c3644;\r\n\t\t\t--track-editor-bg-noise-dim: #26222b;\r\n\t\t\t--track-editor-bg-mod: #322a2a;\r\n\t\t\t--track-editor-bg-mod-dim: #191515;\r\n\t\t\t--multiplicative-mod-slider: #977da9;\r\n\t\t\t--overwriting-mod-slider: #798FA7;\r\n\t\t\t--indicator-primary: #EAAC9D;\r\n\t\t\t--indicator-secondary: #5e413a;\r\n\t\t\t--select2-opt-group: #191920;\r\n\t\t\t--input-box-outline: #191920;\r\n\t\t\t--mute-button-normal: #798FA7;\r\n\t\t\t--mute-button-mod: #354457;\r\n\t\t\t--pitch1-secondary-channel: #91655a;\r\n\t\t\t--pitch1-primary-channel: #EAAC9D;\r\n\t\t\t--pitch1-secondary-note: #91655a;\r\n\t\t\t--pitch1-primary-note: #EAAC9D;\r\n\t\t\t--pitch2-secondary-channel: #8f6513;\r\n\t\t\t--pitch2-primary-channel: #FFAF12;\r\n\t\t\t--pitch2-secondary-note: #8f6513;\r\n\t\t\t--pitch2-primary-note: #FFAF12;\r\n\t\t\t--pitch3-secondary-channel: #212f46;\r\n\t\t\t--pitch3-primary-channel: #34558B;\r\n\t\t\t--pitch3-secondary-note: #212f46;\r\n\t\t\t--pitch3-primary-note: #34558B;\r\n\t\t\t--pitch4-secondary-channel: #2e6b5b;\r\n\t\t\t--pitch4-primary-channel: #4EC5A7;\r\n\t\t\t--pitch4-secondary-note: #2e6b5b;\r\n\t\t\t--pitch4-primary-note: #4EC5A7;\r\n\t\t\t--pitch5-secondary-channel: #555D46;\r\n\t\t\t--pitch5-primary-channel: #aabf84;\r\n\t\t\t--pitch5-secondary-note: #555D46;\r\n\t\t\t--pitch5-primary-note: #aabf84;\r\n\t\t\t--pitch6-secondary-channel: #A2553B;\r\n\t\t\t--pitch6-primary-channel: #e59a81;\r\n\t\t\t--pitch6-secondary-note: #A2553B;\r\n\t\t\t--pitch6-primary-note: #e59a81;\r\n\t\t\t--pitch7-secondary-channel: #7b4021;\r\n\t\t\t--pitch7-primary-channel: #FE813E;\r\n\t\t\t--pitch7-secondary-note: #7b4021;\r\n\t\t\t--pitch7-primary-note: #FE813E;\r\n\t\t\t--pitch8-secondary-channel: #847753;\r\n\t\t\t--pitch8-primary-channel: #EFDAA3;\r\n\t\t\t--pitch8-secondary-note: #847753;\r\n\t\t\t--pitch8-primary-note: #EFDAA3;\r\n\t\t\t--pitch9-secondary-channel: #2c3642;\r\n\t\t\t--pitch9-primary-channel: #798FA7;\r\n\t\t\t--pitch9-secondary-note: #2c3642;\r\n\t\t\t--pitch9-primary-note: #798FA7;\r\n\t\t\t--pitch10-secondary-channel: #0d4453;\r\n\t\t\t--pitch10-primary-channel: #107895;\r\n\t\t\t--pitch10-secondary-note: #0d4453;\r\n\t\t\t--pitch10-primary-note: #107895;\r\n\t\t\t--noise1-secondary-channel: #71617C;\r\n\t\t\t--noise1-primary-channel: #977da9;\r\n\t\t\t--noise1-secondary-note: #71617C;\r\n\t\t\t--noise1-primary-note: #977da9;\r\n\t\t\t--noise2-secondary-channel: #3B3D4A;\r\n\t\t\t--noise2-primary-channel: #707591;\r\n\t\t\t--noise2-secondary-note: #3B3D4A;\r\n\t\t\t--noise2-primary-note: #707591;\r\n\t\t\t--noise3-secondary-channel: #625f5e;\r\n\t\t\t--noise3-primary-channel: #A19D9C;\r\n\t\t\t--noise3-secondary-note: #625f5e;\r\n\t\t\t--noise3-primary-note: #A19D9C;\r\n\t\t\t--noise4-secondary-channel: #ab847b;\r\n\t\t\t--noise4-primary-channel: #EAAC9D;\r\n\t\t\t--noise4-secondary-note: #ab847b;\r\n\t\t\t--noise4-primary-note: #EAAC9D;\r\n\t\t\t--noise5-secondary-channel: #B49D74;\r\n\t\t\t--noise5-primary-channel: #dec69b;\r\n\t\t\t--noise5-secondary-note: #B49D74;\r\n\t\t\t--noise5-primary-note: #dec69b;\r\n\t\t\t--mod1-secondary-channel: #722124;\r\n\t\t\t--mod1-primary-channel: #D13A41;\r\n\t\t\t--mod1-secondary-note: #722124;\r\n\t\t\t--mod1-primary-note: #D13A41;\r\n\t\t\t--mod2-secondary-channel: #213657;\r\n\t\t\t--mod2-primary-channel: #34558B;\r\n\t\t\t--mod2-secondary-note: #213657;\r\n\t\t\t--mod2-primary-note: #34558B;\r\n\t\t\t--mod3-secondary-channel: #555D46;\r\n\t\t\t--mod3-primary-channel: #848f6d;\r\n\t\t\t--mod3-secondary-note: #555D46;\r\n\t\t\t--mod3-primary-note: #848f6d;\r\n\t\t\t--mod4-secondary-channel: #71617C;\r\n\t\t\t--mod4-primary-channel: #a68ab9;\r\n\t\t\t--mod4-secondary-note: #71617C;\r\n\t\t\t--mod4-primary-note: #a68ab9;\r\n\t\t\t--mod-label-primary: #282828;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #5d5d5d;\r\n\t\t\t--disabled-note-secondary: #292929;\r\n\t\t}`,\r\n\r\n\t\t\"sunset\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #040300;\r\n\t\t\t--editor-background: #040300;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #999;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgb(94 0 157);\r\n\t\t\t--box-selection-fill: rgb(174 173 73 / 45%);\r\n\t\t\t--loop-accent: #EC897D;\r\n\t\t\t--link-accent: #FDE484;\r\n\t\t\t--ui-widget-background: #241b24;\r\n\t\t\t--ui-widget-focus: #3a2e39;\r\n\t\t\t--pitch-background: #141414;\r\n\t\t\t--tonic: #2C212B;\r\n\t\t\t--fifth-note: #2E2A15;\r\n\t\t\t--white-piano-key: #bbbaba;\r\n\t\t\t--black-piano-key: #2d2d2d;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: rgb(94 0 157);\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #2d2e42;\r\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\r\n\t\t\t--track-editor-bg-noise: #393340;\r\n\t\t\t--track-editor-bg-noise-dim: #26222b;\r\n\t\t\t--track-editor-bg-mod: #232a2c;\r\n\t\t\t--track-editor-bg-mod-dim: #151819;\r\n\t\t\t--multiplicative-mod-slider: #977da9;\r\n\t\t\t--overwriting-mod-slider: #798FA7;\r\n\t\t\t--indicator-primary: #F28891;\r\n\t\t\t--indicator-secondary: #601d23;\r\n\t\t\t--select2-opt-group: #151015;\r\n\t\t\t--input-box-outline: #151015;\r\n\t\t\t--mute-button-normal: #E4739D;\r\n\t\t\t--mute-button-mod: #9650A6;\r\n\t\t\t--pitch1-secondary-channel: #7F7721;\r\n\t\t\t--pitch1-primary-channel: #F3E79A;\r\n\t\t\t--pitch1-secondary-note: #7F7721;\r\n\t\t\t--pitch1-primary-note: #F3E79A;\r\n\t\t\t--pitch2-secondary-channel: #785E20;\r\n\t\t\t--pitch2-primary-channel: #F7D086;\r\n\t\t\t--pitch2-secondary-note: #785E20;\r\n\t\t\t--pitch2-primary-note: #F7D086;\r\n\t\t\t--pitch3-secondary-channel: #6E4219;\r\n\t\t\t--pitch3-primary-channel: #F9B881;\r\n\t\t\t--pitch3-secondary-note: #6E4219;\r\n\t\t\t--pitch3-primary-note: #F9B881;\r\n\t\t\t--pitch4-secondary-channel: #79351F;\r\n\t\t\t--pitch4-primary-channel: #F7A086;\r\n\t\t\t--pitch4-secondary-note: #79351F;\r\n\t\t\t--pitch4-primary-note: #F7A086;\r\n\t\t\t--pitch5-secondary-channel: #81272F;\r\n\t\t\t--pitch5-primary-channel: #F28891;\r\n\t\t\t--pitch5-secondary-note: #81272F;\r\n\t\t\t--pitch5-primary-note: #F28891;\r\n\t\t\t--pitch6-secondary-channel: #8F224D;\r\n\t\t\t--pitch6-primary-channel: #E4739D;\r\n\t\t\t--pitch6-secondary-note: #8F224D;\r\n\t\t\t--pitch6-primary-note: #E4739D;\r\n\t\t\t--pitch7-secondary-channel: #611548;\r\n\t\t\t--pitch7-primary-channel: #CF63A6;\r\n\t\t\t--pitch7-secondary-note: #611548;\r\n\t\t\t--pitch7-primary-note: #CF63A6;\r\n\t\t\t--pitch8-secondary-channel: #561253;\r\n\t\t\t--pitch8-primary-channel: #B557A9;\r\n\t\t\t--pitch8-secondary-note: #4D104A;\r\n\t\t\t--pitch8-primary-note: #B557A9;\r\n\t\t\t--pitch9-secondary-channel: #4c1260;\r\n\t\t\t--pitch9-primary-channel: #9650A6;\r\n\t\t\t--pitch9-secondary-note: #3C0F4C;\r\n\t\t\t--pitch9-primary-note: #9650A6;\r\n\t\t\t--pitch10-secondary-channel: #3e1d78;\r\n\t\t\t--pitch10-primary-channel: #704D9E;\r\n\t\t\t--pitch10-secondary-note: #27124C;\r\n\t\t\t--pitch10-primary-note: #704D9E;\r\n\t\t\t--noise1-secondary-channel: #A7A578;\r\n\t\t\t--noise1-primary-channel: #EFE9AC;\r\n\t\t\t--noise1-secondary-note: #A7A578;\r\n\t\t\t--noise1-primary-note: #EFE9AC;\r\n\t\t\t--noise2-secondary-channel: #947A5F;\r\n\t\t\t--noise2-primary-channel: #FBCEA8;\r\n\t\t\t--noise2-secondary-note: #947A5F;\r\n\t\t\t--noise2-primary-note: #FBCEA8;\r\n\t\t\t--noise3-secondary-channel: #A3635D;\r\n\t\t\t--noise3-primary-channel: #F4A5AB;\r\n\t\t\t--noise3-secondary-note: #A3635D;\r\n\t\t\t--noise3-primary-note: #F4A5AB;\r\n\t\t\t--noise4-secondary-channel: #724D60;\r\n\t\t\t--noise4-primary-channel: #CD90B6;\r\n\t\t\t--noise4-secondary-note: #724D60;\r\n\t\t\t--noise4-primary-note: #CD90B6;\r\n\t\t\t--noise5-secondary-channel: #503F5C;\r\n\t\t\t--noise5-primary-channel: #7C6A9E;\r\n\t\t\t--noise5-secondary-note: #503F5C;\r\n\t\t\t--noise5-primary-note: #7C6A9E;\r\n\t\t\t--mod1-secondary-channel: #371883;\r\n\t\t\t--mod1-primary-channel: #6416C6;\r\n\t\t\t--mod1-secondary-note: #1F0A52;\r\n\t\t\t--mod1-primary-note: #6416C6;\r\n\t\t\t--mod2-secondary-channel: #690645;\r\n\t\t\t--mod2-primary-channel: #E52FA2;\r\n\t\t\t--mod2-secondary-note: #690645;\r\n\t\t\t--mod2-primary-note: #E52FA2;\r\n\t\t\t--mod3-secondary-channel: #943618;\r\n\t\t\t--mod3-primary-channel: #eb5b2c;\r\n\t\t\t--mod3-secondary-note: #943618;\r\n\t\t\t--mod3-primary-note: #eb5b2c;\r\n\t\t\t--mod4-secondary-channel: #928409;\r\n\t\t\t--mod4-primary-channel: #ecd50e;\r\n\t\t\t--mod4-secondary-note: #928409;\r\n\t\t\t--mod4-primary-note: #ecd50e;\r\n\t\t\t--mod-label-primary: #282828;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #5d5d5d;\r\n\t\t\t--disabled-note-secondary: #292929;\r\n\t\t}`,\r\n\r\n\t\t\"toxic\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #010003;\r\n\t\t\t--editor-background: #010003;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #999;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgb(147 195 0);\r\n\t\t\t--box-selection-fill: rgb(145 174 73 / 49%);\r\n\t\t\t--loop-accent: #BCDE2C;\r\n\t\t\t--link-accent: #edff9f;\r\n\t\t\t--ui-widget-background: #261e2e;\r\n\t\t\t--ui-widget-focus: #322042;\r\n\t\t\t--pitch-background: #141c15;\r\n\t\t\t--tonic: #282c21;\r\n\t\t\t--fifth-note: #18221a;\r\n\t\t\t--white-piano-key: #e3e3e3;\r\n\t\t\t--black-piano-key: #2d2d2d;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: rgb(147 195 0);\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #38293e;\r\n\t\t\t--track-editor-bg-pitch-dim: #251c29;\r\n\t\t\t--track-editor-bg-noise: #2c304c;\r\n\t\t\t--track-editor-bg-noise-dim: #191b2b;\r\n\t\t\t--track-editor-bg-mod: #311b32;\r\n\t\t\t--track-editor-bg-mod-dim: #1d101e;\r\n\t\t\t--multiplicative-mod-slider: #977da9;\r\n\t\t\t--overwriting-mod-slider: #798FA7;\r\n\t\t\t--indicator-primary: #aae9ff;\r\n\t\t\t--indicator-secondary: #253e46;\r\n\t\t\t--select2-opt-group: #110d15;\r\n\t\t\t--input-box-outline: #110d15;\r\n\t\t\t--mute-button-normal: #8f5ad1;\r\n\t\t\t--mute-button-mod: #482574;\r\n\t\t\t--pitch1-secondary-channel: #6b7f19;\r\n\t\t\t--pitch1-primary-channel: #BCDE2C;\r\n\t\t\t--pitch1-secondary-note: #6b7f19;\r\n\t\t\t--pitch1-primary-note: #BCDE2C;\r\n\t\t\t--pitch2-secondary-channel: #497a31;\r\n\t\t\t--pitch2-primary-channel: #7BD152;\r\n\t\t\t--pitch2-secondary-note: #497a31;\r\n\t\t\t--pitch2-primary-note: #7BD152;\r\n\t\t\t--pitch3-secondary-channel: #286b40;\r\n\t\t\t--pitch3-primary-channel: #45BE71;\r\n\t\t\t--pitch3-secondary-note: #286b40;\r\n\t\t\t--pitch3-primary-note: #45BE71;\r\n\t\t\t--pitch4-secondary-channel: #125140;\r\n\t\t\t--pitch4-primary-channel: #25A884;\r\n\t\t\t--pitch4-secondary-note: #125140;\r\n\t\t\t--pitch4-primary-note: #25A884;\r\n\t\t\t--pitch5-secondary-channel: #114c49;\r\n\t\t\t--pitch5-primary-channel: #21908C;\r\n\t\t\t--pitch5-secondary-note: #114c49;\r\n\t\t\t--pitch5-primary-note: #21908C;\r\n\t\t\t--pitch6-secondary-channel: #143843;\r\n\t\t\t--pitch6-primary-channel: #2B788E;\r\n\t\t\t--pitch6-secondary-note: #143843;\r\n\t\t\t--pitch6-primary-note: #2B788E;\r\n\t\t\t--pitch7-secondary-channel: #1d354e;\r\n\t\t\t--pitch7-primary-channel: #355F8D;\r\n\t\t\t--pitch7-secondary-note: #1a2f46;\r\n\t\t\t--pitch7-primary-note: #355F8D;\r\n\t\t\t--pitch8-secondary-channel: #2c2e5a;\r\n\t\t\t--pitch8-primary-channel: #414486;\r\n\t\t\t--pitch8-secondary-note: #1e1f3d;\r\n\t\t\t--pitch8-primary-note: #414486;\r\n\t\t\t--pitch9-secondary-channel: #3c1f5e;\r\n\t\t\t--pitch9-primary-channel: #5e3b89;\r\n\t\t\t--pitch9-secondary-note: #25133b;\r\n\t\t\t--pitch9-primary-note: #5e3b89;\r\n\t\t\t--pitch10-secondary-channel: #510264;\r\n\t\t\t--pitch10-primary-channel: #720d8a;\r\n\t\t\t--pitch10-secondary-note: #440154;\r\n\t\t\t--pitch10-primary-note: #720d8a;\r\n\t\t\t--noise1-secondary-channel: #BCDE2C;\r\n\t\t\t--noise1-primary-channel: #edff9f;\r\n\t\t\t--noise1-secondary-note: #BCDE2C;\r\n\t\t\t--noise1-primary-note: #edff9f;\r\n\t\t\t--noise2-secondary-channel: #45BE71;\r\n\t\t\t--noise2-primary-channel: #89ffb4;\r\n\t\t\t--noise2-secondary-note: #45BE71;\r\n\t\t\t--noise2-primary-note: #89ffb4;\r\n\t\t\t--noise3-secondary-channel: #21908C;\r\n\t\t\t--noise3-primary-channel: #72fffa;\r\n\t\t\t--noise3-secondary-note: #21908C;\r\n\t\t\t--noise3-primary-note: #72fffa;\r\n\t\t\t--noise4-secondary-channel: #355F8D;\r\n\t\t\t--noise4-primary-channel: #7cb6f5;\r\n\t\t\t--noise4-secondary-note: #355F8D;\r\n\t\t\t--noise4-primary-note: #7cb6f5;\r\n\t\t\t--noise5-secondary-channel: #482574;\r\n\t\t\t--noise5-primary-channel: #8f5ad1;\r\n\t\t\t--noise5-secondary-note: #48257A;\r\n\t\t\t--noise5-primary-note: #8f5ad1;\r\n\t\t\t--mod1-secondary-channel: #815a16;\r\n\t\t\t--mod1-primary-channel: #F5AB29;\r\n\t\t\t--mod1-secondary-note: #815a16;\r\n\t\t\t--mod1-primary-note: #F5AB29;\r\n\t\t\t--mod2-secondary-channel: #4d341a;\r\n\t\t\t--mod2-primary-channel: #C98540;\r\n\t\t\t--mod2-secondary-note: #4d341a;\r\n\t\t\t--mod2-primary-note: #C98540;\r\n\t\t\t--mod3-secondary-channel: #643734;\r\n\t\t\t--mod3-primary-channel: #A75D58;\r\n\t\t\t--mod3-secondary-note: #643734;\r\n\t\t\t--mod3-primary-note: #A75D58;\r\n\t\t\t--mod4-secondary-channel: #461430;\r\n\t\t\t--mod4-primary-channel: #812359;\r\n\t\t\t--mod4-secondary-note: #3f112b;\r\n\t\t\t--mod4-primary-note: #812359;\r\n\t\t\t--mod-label-primary: #282828;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #5d5d5d;\r\n\t\t\t--disabled-note-secondary: #292929;\r\n\t\t}`,\r\n\r\n\t\t\"violet verdant\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #0e031a;\r\n\t\t\t--editor-background: #0e031a;\r\n\t\t\t--hover-preview: #e5ffea;\r\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t--primary-text: #f0e0ff;\r\n\t\t\t--secondary-text: #706087;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t--box-selection-fill: #225835;\r\n\t\t\t--loop-accent: #8f00fb;\r\n\t\t\t--link-accent: #82dd5d;\r\n\t\t\t--ui-widget-background: #303c66;\r\n\t\t\t--ui-widget-focus: #62559b;\r\n\t\t\t--pitch-background: #293b52;\r\n\t\t\t--tonic: #5b46ad;\r\n\t\t\t--fifth-note: #42604d;\r\n\t\t\t--white-piano-key: #f6e8ff;\r\n\t\t\t--black-piano-key: #5a4972;\r\n\t\t\t--oscilloscope-line-L: #f0e0ff;\r\n\t\t\t--oscilloscope-line-R: rgba(119,68,255,0.99);\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #392a46;\r\n\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t--track-editor-bg-noise: #403150;\r\n\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t--track-editor-bg-mod: #253c25;\r\n\t\t\t--track-editor-bg-mod-dim: #0c1811;\r\n\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t--input-box-outline: #403150;\r\n\t\t\t--mute-button-normal: #82dd5d;\r\n\t\t\t--mute-button-mod: #945de5;\r\n\t\t\t--mod-label-primary: #312840;\r\n\t\t\t--mod-label-secondary-text: rgb(88 70 104);\r\n\t\t\t--mod-label-primary-text: #82dd5d;\r\n\t\t\t--pitch-secondary-channel-hue: 64;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\r\n\t\t\t--pitch-secondary-channel-sat: 63.3;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: 64;\r\n\t\t\t--pitch-primary-channel-hue-scale: 6.1;\r\n\t\t\t--pitch-primary-channel-sat: 90;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: 32;\r\n\t\t\t--pitch-secondary-note-hue-scale: 6.1;\r\n\t\t\t--pitch-secondary-note-sat: 87.9;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: 64;\r\n\t\t\t--pitch-primary-note-hue-scale: 6.1;\r\n\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 192;\r\n\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t--noise-secondary-channel-sat: 45;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 32;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 192;\r\n\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 43.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 160;\r\n\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 45;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 192;\r\n\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 132;\r\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 132;\r\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 100;\r\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 132;\r\n\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary: #91879f;\r\n\t\t\t--disabled-note-secondary: #6a677a;\r\n\t\t}`,\r\n\r\n\t\t\"portal\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #04081a;\r\n\t\t\t--editor-background: #04081a;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #999;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t--box-selection-fill: rgb(0 72 181);\r\n\t\t\t--loop-accent: #44d4ff;\r\n\t\t\t--link-accent: #ffa500;\r\n\t\t\t--ui-widget-background: #212c4a;\r\n\t\t\t--ui-widget-focus: #121f42;\r\n\t\t\t--pitch-background: #1b263e;\r\n\t\t\t--tonic: #995d00;\r\n\t\t\t--fifth-note: #0898a1;\r\n\t\t\t--white-piano-key: #ffffff;\r\n\t\t\t--black-piano-key: #516d7a;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: rgba(119,68,255,0.99);\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #213352;\r\n\t\t\t--track-editor-bg-pitch-dim: #152032;\r\n\t\t\t--track-editor-bg-noise: #403524;\r\n\t\t\t--track-editor-bg-noise-dim: #2a1f0e;\r\n\t\t\t--track-editor-bg-mod: #234;\r\n\t\t\t--track-editor-bg-mod-dim: #123;\r\n\t\t\t--multiplicative-mod-slider: #456;\r\n\t\t\t--overwriting-mod-slider: #654;\r\n\t\t\t--indicator-primary: #5490ff;\r\n\t\t\t--indicator-secondary: #444;\r\n\t\t\t--select2-opt-group: #585858;\r\n\t\t\t--input-box-outline: #333;\r\n\t\t\t--mute-button-normal: #3372ff;\r\n\t\t\t--mute-button-mod: #dd872f;\r\n\t\t\t--pitch1-secondary-channel: #0099A1;\r\n\t\t\t--pitch1-primary-channel: #77f7ff;\r\n\t\t\t--pitch1-secondary-note: #00BDC7;\r\n\t\t\t--pitch1-primary-note: #92F9FF;\r\n\t\t\t--pitch2-secondary-channel: #0083a1;\r\n\t\t\t--pitch2-primary-channel: #35d9ff;\r\n\t\t\t--pitch2-secondary-note: #0083a1;\r\n\t\t\t--pitch2-primary-note: #a4eeff;\r\n\t\t\t--pitch3-secondary-channel: #0074c7;\r\n\t\t\t--pitch3-primary-channel: #3caeff;\r\n\t\t\t--pitch3-secondary-note: #00477a;\r\n\t\t\t--pitch3-primary-note: #aadcff;\r\n\t\t\t--pitch4-secondary-channel: #0039a1;\r\n\t\t\t--pitch4-primary-channel: #2673ff;\r\n\t\t\t--pitch4-secondary-note: #001f56;\r\n\t\t\t--pitch4-primary-note: #9bbeff;\r\n\t\t\t--pitch5-secondary-channel: #31148b;\r\n\t\t\t--pitch5-primary-channel: #7042ff;\r\n\t\t\t--pitch5-secondary-note: #190656;\r\n\t\t\t--pitch5-primary-note: #b79fff;\r\n\t\t\t--pitch6-secondary-channel: #979934;\r\n\t\t\t--pitch6-primary-channel: #fbff2f;\r\n\t\t\t--pitch6-secondary-note: #5d5e0a;\r\n\t\t\t--pitch6-primary-note: #fdff9a;\r\n\t\t\t--pitch7-secondary-channel: #b78f00;\r\n\t\t\t--pitch7-primary-channel: #ffd747;\r\n\t\t\t--pitch7-secondary-note: #5e3d00;\r\n\t\t\t--pitch7-primary-note: #ffe381;\r\n\t\t\t--pitch8-secondary-channel: #9d6500;\r\n\t\t\t--pitch8-primary-channel: #ffa400;\r\n\t\t\t--pitch8-secondary-note: #583900;\r\n\t\t\t--pitch8-primary-note: #ffd07c;\r\n\t\t\t--pitch9-secondary-channel: #744203;\r\n\t\t\t--pitch9-primary-channel: #ff8e00;\r\n\t\t\t--pitch9-secondary-note: #502d00;\r\n\t\t\t--pitch9-primary-note: #ffcb89;\r\n\t\t\t--pitch10-secondary-channel: #a32d00;\r\n\t\t\t--pitch10-primary-channel: #ff885b;\r\n\t\t\t--pitch10-secondary-note: #521700;\r\n\t\t\t--pitch10-primary-note: #ffb397;\r\n\t\t\t--noise1-secondary-channel: #6e2210;\r\n\t\t\t--noise1-primary-channel: #ff4600;\r\n\t\t\t--noise1-secondary-note: #4c1a08;\r\n\t\t\t--noise1-primary-note: #ffc9b4;\r\n\t\t\t--noise2-secondary-channel: #6a3110;\r\n\t\t\t--noise2-primary-channel: #ff782a;\r\n\t\t\t--noise2-secondary-note: #4c1f05;\r\n\t\t\t--noise2-primary-note: #ffb488;\r\n\t\t\t--noise3-secondary-channel: #72460e;\r\n\t\t\t--noise3-primary-channel: #d9871f;\r\n\t\t\t--noise3-secondary-note: #442905;\r\n\t\t\t--noise3-primary-note: #ffdcae;\r\n\t\t\t--noise4-secondary-channel: #837a0f;\r\n\t\t\t--noise4-primary-channel: #f7ea55;\r\n\t\t\t--noise4-secondary-note: #605906;\r\n\t\t\t--noise4-primary-note: #fff9ab;\r\n\t\t\t--noise5-secondary-channel: #8c8f00;\r\n\t\t\t--noise5-primary-channel: #fdff90;\r\n\t\t\t--noise5-secondary-note: #606200;\r\n\t\t\t--noise5-primary-note: #feffbc;\r\n\t\t\t--mod1-secondary-channel: #561b97;\r\n\t\t\t--mod1-primary-channel: #aa66f5;\r\n\t\t\t--mod1-secondary-note: #30075c;\r\n\t\t\t--mod1-primary-note: #cd9fff;\r\n\t\t\t--mod2-secondary-channel: #5116df;\r\n\t\t\t--mod2-primary-channel: #6b2dff;\r\n\t\t\t--mod2-secondary-note: #36138b;\r\n\t\t\t--mod2-primary-note: #bea3ff;\r\n\t\t\t--mod3-secondary-channel: #2535a1;\r\n\t\t\t--mod3-primary-channel: #3f57ff;\r\n\t\t\t--mod3-secondary-note: #0e185c;\r\n\t\t\t--mod3-primary-note: #8494ff;\r\n\t\t\t--mod4-secondary-channel: #1b5883;\r\n\t\t\t--mod4-primary-channel: #5eb7f5;\r\n\t\t\t--mod4-secondary-note: #072f4a;\r\n\t\t\t--mod4-primary-note: #63beff;\r\n\t\t\t--mod-label-primary: #24293a;\r\n\t\t\t--mod-label-secondary-text: #454d4e;\r\n\t\t\t--mod-label-primary-text: #7bd4ff;\r\n\t\t\t--disabled-note-primary: #072f4a;\r\n\t\t\t--disabled-note-secondary: #6585a7;\r\n\t\t}`,\r\n\r\n\t\t\"fusion\":\r\n\t\t`:root {\r\n\t\t\t--page-margin: #0c0306;\r\n\t\t\t--editor-background: #0c0306;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: #26d9cd;\r\n\t\t\t--secondary-text: #ff6666;\r\n\t\t\t--inverted-text: white;\r\n\t\t\t--text-selection: #ffffff;\r\n\t\t\t--box-selection-fill: #ff00004d;\r\n\t\t\t--loop-accent: #ff6666;\r\n\t\t\t--link-accent: white;\r\n\t\t\t--ui-widget-background: #232323;\r\n\t\t\t--ui-widget-focus: #303030;\r\n\t\t\t--pitch-background: hsl(61deg 100% 70% / 25%);\r\n\t\t\t--tonic: #66a3ff40;\r\n\t\t\t--fifth-note: #ff666640;\r\n\t\t\t--white-piano-key: #cdcdcd;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--oscilloscope-line-L: #26d9cd;\r\n\t\t\t--oscilloscope-line-R: #ffffff;\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #404040bf;\r\n\t\t\t--track-editor-bg-pitch-dim: #151515;\r\n\t\t\t--track-editor-bg-noise: #404040bf;\r\n\t\t\t--track-editor-bg-noise-dim: #151515;\r\n\t\t\t--track-editor-bg-mod: #404040bf;\r\n\t\t\t--track-editor-bg-mod-dim: #151515;\r\n\t\t\t--multiplicative-mod-slider: #ef7692;\r\n\t\t\t--overwriting-mod-slider: #f43e69;\r\n\t\t\t--indicator-primary: #26d9cd;\r\n\t\t\t--indicator-secondary: hsl(176deg 70% 25%);\r\n\t\t\t--select2-opt-group: #232323;\r\n\t\t\t--input-box-outline: #141e34;\r\n\t\t\t--mute-button-normal: #26d9cd;\r\n\t\t\t--mute-button-mod: hsl(346deg 70% 50%);\r\n\t\t\t--pitch1-secondary-channel: #bf4040;\r\n\t\t\t--pitch1-primary-channel: #ff6666;\r\n\t\t\t--pitch1-secondary-note: #bf4040;\r\n\t\t\t--pitch1-primary-note: #ff6666;\r\n\t\t\t--pitch2-secondary-channel: #bf5b40;\r\n\t\t\t--pitch2-primary-channel: #ff8766;\r\n\t\t\t--pitch2-secondary-note: #bf5b40;\r\n\t\t\t--pitch2-primary-note: #ff8766;\r\n\t\t\t--pitch3-secondary-channel: #bf7940;\r\n\t\t\t--pitch3-primary-channel: #ffab66;\r\n\t\t\t--pitch3-secondary-note: #bf7940;\r\n\t\t\t--pitch3-primary-note: #ffab66;\r\n\t\t\t--pitch4-secondary-channel: #bf9b40;\r\n\t\t\t--pitch4-primary-channel: #ffd466;\r\n\t\t\t--pitch4-secondary-note: #bf9b40;\r\n\t\t\t--pitch4-primary-note: #ffd466;\r\n\t\t\t--pitch5-secondary-channel: #bdbf40;\r\n\t\t\t--pitch5-primary-channel: #fcff66;\r\n\t\t\t--pitch5-secondary-note: #bdbf40;\r\n\t\t\t--pitch5-primary-note: #fcff66;\r\n\t\t\t--pitch6-secondary-channel: #9dbf40;\r\n\t\t\t--pitch6-primary-channel: #d6ff66;\r\n\t\t\t--pitch6-secondary-note: #9dbf40;\r\n\t\t\t--pitch6-primary-note: #d6ff66;\r\n\t\t\t--pitch7-secondary-channel: #9dbf40;\r\n\t\t\t--pitch7-primary-channel: #fcff66;\r\n\t\t\t--pitch7-secondary-note: #9dbf40;\r\n\t\t\t--pitch7-primary-note: #fcff66;\r\n\t\t\t--pitch8-secondary-channel: #bf9b40;\r\n\t\t\t--pitch8-primary-channel: #ffd466;\r\n\t\t\t--pitch8-secondary-note: #bf9b40;\r\n\t\t\t--pitch8-primary-note: #ffd466;\r\n\t\t\t--pitch9-secondary-channel: #bf5b40;\r\n\t\t\t--pitch9-primary-channel: #ffab66;\r\n\t\t\t--pitch9-secondary-note: #bf5b40;\r\n\t\t\t--pitch9-primary-note: #ffab66;\r\n\t\t\t--pitch10-secondary-channel: #d15a1f;\r\n\t\t\t--pitch10-primary-channel: #ff8766;\r\n\t\t\t--pitch10-secondary-note: #d15a1f;\r\n\t\t\t--pitch10-primary-note: #ff8766;\r\n\t\t\t--noise1-secondary-channel: #4073bf;\r\n\t\t\t--noise1-primary-channel: #66a3ff;\r\n\t\t\t--noise1-secondary-note: #4073bf;\r\n\t\t\t--noise1-primary-note: #66a3ff;\r\n\t\t\t--noise2-secondary-channel: #405dbf;\r\n\t\t\t--noise2-primary-channel: #668aff;\r\n\t\t\t--noise2-secondary-note: #405dbf;\r\n\t\t\t--noise2-primary-note: #668aff;\r\n\t\t\t--noise3-secondary-channel: #4f40bf;\r\n\t\t\t--noise3-primary-channel: #7866ff;\r\n\t\t\t--noise3-secondary-note: #4f40bf;\r\n\t\t\t--noise3-primary-note: #7866ff;\r\n\t\t\t--noise4-secondary-channel: #8840bf;\r\n\t\t\t--noise4-primary-channel: #bd66ff;\r\n\t\t\t--noise4-secondary-note: #8840bf;\r\n\t\t\t--noise4-primary-note: #bd66ff;\r\n\t\t\t--noise5-secondary-channel: #bf40b5;\r\n\t\t\t--noise5-primary-channel: #ff66f2;\r\n\t\t\t--noise5-secondary-note: #bf40b5;\r\n\t\t\t--noise5-primary-note: #ff66f2;\r\n\t\t\t--mod1-secondary-channel: #cc6666;\r\n\t\t\t--mod1-primary-channel: #ff9999;\r\n\t\t\t--mod1-secondary-note: #cc6666;\r\n\t\t\t--mod1-primary-note: #ff9999;\r\n\t\t\t--mod2-secondary-channel: #cc7766;\r\n\t\t\t--mod2-primary-channel: #ffaa99;\r\n\t\t\t--mod2-secondary-note: #bf5540;\r\n\t\t\t--mod2-primary-note: #ffaa99;\r\n\t\t\t--mod3-secondary-channel: #cc8866;\r\n\t\t\t--mod3-primary-channel: #ffbb99;\r\n\t\t\t--mod3-secondary-note: #cc8866;\r\n\t\t\t--mod3-primary-note: #ffbb99;\r\n\t\t\t--mod4-secondary-channel: #cc9966;\r\n\t\t\t--mod4-primary-channel: #ffcc99;\r\n\t\t\t--mod4-secondary-note: #cc9966;\r\n\t\t\t--mod4-primary-note: #ffcc99;\r\n\t\t\t--mod-label-primary: #999;\r\n\t\t\t--mod-label-secondary-text: #333;\r\n\t\t\t--mod-label-primary-text: black;\r\n\t\t\t--disabled-note-primary: #696969;\r\n\t\t\t--disabled-note-secondary: #232323;\r\n\t\t}`,\r\n\r\n\t\t\"inverse\":\r\n\t\t\t`:root {\r\n\t\t\t--page-margin: #c4c8e3;\r\n\t\t\t--editor-background: #c4c8e3;\r\n\t\t\t--hover-preview: #000000;\r\n\t\t\t--playhead: #243953;\r\n\t\t\t--primary-text: black;\r\n\t\t\t--secondary-text: #855b95;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgb(132 125 255);\r\n\t\t\t--box-selection-fill: rgb(174 109 73 / 65%);\r\n\t\t\t--loop-accent: #EC897D;\r\n\t\t\t--link-accent: #4e00c8;\r\n\t\t\t--ui-widget-background: #e7e7ff;\r\n\t\t\t--ui-widget-focus: #d0d3e9;\r\n\t\t\t--pitch-background: #ffffff;\r\n\t\t\t--tonic: #bbbbbb;\r\n\t\t\t--fifth-note: #dcdcdc;\r\n\t\t\t--white-piano-key: #ffffff;\r\n\t\t\t--black-piano-key: #615f66;\r\n\t\t\t--oscilloscope-line-L: black;\r\n\t\t\t--oscilloscope-line-R: rgb(132 125 255);\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #e9ebff;\r\n\t\t\t--track-editor-bg-pitch-dim: #e9ebff;\r\n\t\t\t--track-editor-bg-noise: #fdf2fe;\r\n\t\t\t--track-editor-bg-noise-dim: #fdf2fe;\r\n\t\t\t--track-editor-bg-mod: #dbdefe;\r\n\t\t\t--track-editor-bg-mod-dim: #dbdefe;\r\n\t\t\t--multiplicative-mod-slider: #6900b3;\r\n\t\t\t--overwriting-mod-slider: #004b9d;\r\n\t\t\t--indicator-primary: #ff633d;\r\n\t\t\t--indicator-secondary: #933822;\r\n\t\t\t--select2-opt-group: #e7e7ff;\r\n\t\t\t--input-box-outline: #e7e7ff;\r\n\t\t\t--mute-button-normal: #0072ef;\r\n\t\t\t--mute-button-mod: #002e67;\r\n\t\t\t--pitch1-secondary-channel: #b77d6e;\r\n\t\t\t--pitch1-primary-channel: #ff9d85;\r\n\t\t\t--pitch1-secondary-note: #b77d6e;\r\n\t\t\t--pitch1-primary-note: #ff9d85;\r\n\t\t\t--pitch2-secondary-channel: #be8821;\r\n\t\t\t--pitch2-primary-channel: #FFAF12;\r\n\t\t\t--pitch2-secondary-note: #be8821;\r\n\t\t\t--pitch2-primary-note: #FFAF12;\r\n\t\t\t--pitch3-secondary-channel: #3a62a4;\r\n\t\t\t--pitch3-primary-channel: #528ae6;\r\n\t\t\t--pitch3-secondary-note: #3a62a4;\r\n\t\t\t--pitch3-primary-note: #528ae6;\r\n\t\t\t--pitch4-secondary-channel: #3e8d78;\r\n\t\t\t--pitch4-primary-channel: #4EC5A7;\r\n\t\t\t--pitch4-secondary-note: #3e8d78;\r\n\t\t\t--pitch4-primary-note: #4EC5A7;\r\n\t\t\t--pitch5-secondary-channel: #84906d;\r\n\t\t\t--pitch5-primary-channel: #aabf84;\r\n\t\t\t--pitch5-secondary-note: #84906d;\r\n\t\t\t--pitch5-primary-note: #aabf84;\r\n\t\t\t--pitch6-secondary-channel: #bd6345;\r\n\t\t\t--pitch6-primary-channel: #e59a81;\r\n\t\t\t--pitch6-secondary-note: #bd6345;\r\n\t\t\t--pitch6-primary-note: #e59a81;\r\n\t\t\t--pitch7-secondary-channel: #aa592f;\r\n\t\t\t--pitch7-primary-channel: #FE813E;\r\n\t\t\t--pitch7-secondary-note: #aa592f;\r\n\t\t\t--pitch7-primary-note: #FE813E;\r\n\t\t\t--pitch8-secondary-channel: #b2a171;\r\n\t\t\t--pitch8-primary-channel: #ffd76d;\r\n\t\t\t--pitch8-secondary-note: #b2a171;\r\n\t\t\t--pitch8-primary-note: #ffd76d;\r\n\t\t\t--pitch9-secondary-channel: #4f6177;\r\n\t\t\t--pitch9-primary-channel: #798FA7;\r\n\t\t\t--pitch9-secondary-note: #4f6177;\r\n\t\t\t--pitch9-primary-note: #798FA7;\r\n\t\t\t--pitch10-secondary-channel: #165162;\r\n\t\t\t--pitch10-primary-channel: #107895;\r\n\t\t\t--pitch10-secondary-note: #165162;\r\n\t\t\t--pitch10-primary-note: #107895;\r\n\t\t\t--noise1-secondary-channel: #71617C;\r\n\t\t\t--noise1-primary-channel: #977da9;\r\n\t\t\t--noise1-secondary-note: #71617C;\r\n\t\t\t--noise1-primary-note: #977da9;\r\n\t\t\t--noise2-secondary-channel: #4a4c5b;\r\n\t\t\t--noise2-primary-channel: #707591;\r\n\t\t\t--noise2-secondary-note: #4a4c5b;\r\n\t\t\t--noise2-primary-note: #707591;\r\n\t\t\t--noise3-secondary-channel: #817c7b;\r\n\t\t\t--noise3-primary-channel: #A19D9C;\r\n\t\t\t--noise3-secondary-note: #817c7b;\r\n\t\t\t--noise3-primary-note: #A19D9C;\r\n\t\t\t--noise4-secondary-channel: #ab847b;\r\n\t\t\t--noise4-primary-channel: #EAAC9D;\r\n\t\t\t--noise4-secondary-note: #ab847b;\r\n\t\t\t--noise4-primary-note: #EAAC9D;\r\n\t\t\t--noise5-secondary-channel: #B49D74;\r\n\t\t\t--noise5-primary-channel: #dec69b;\r\n\t\t\t--noise5-secondary-note: #B49D74;\r\n\t\t\t--noise5-primary-note: #dec69b;\r\n\t\t\t--mod1-secondary-channel: #722124;\r\n\t\t\t--mod1-primary-channel: #D13A41;\r\n\t\t\t--mod1-secondary-note: #722124;\r\n\t\t\t--mod1-primary-note: #D13A41;\r\n\t\t\t--mod2-secondary-channel: #213657;\r\n\t\t\t--mod2-primary-channel: #34558B;\r\n\t\t\t--mod2-secondary-note: #213657;\r\n\t\t\t--mod2-primary-note: #34558B;\r\n\t\t\t--mod3-secondary-channel: #555D46;\r\n\t\t\t--mod3-primary-channel: #848f6d;\r\n\t\t\t--mod3-secondary-note: #555D46;\r\n\t\t\t--mod3-primary-note: #848f6d;\r\n\t\t\t--mod4-secondary-channel: #71617C;\r\n\t\t\t--mod4-primary-channel: #a68ab9;\r\n\t\t\t--mod4-secondary-note: #71617C;\r\n\t\t\t--mod4-primary-note: #a68ab9;\r\n\t\t\t--mod-label-primary: #e9e9e9;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: black;\r\n\t\t\t--disabled-note-primary: #959595;\r\n\t\t\t--disabled-note-secondary: #6e6e6e;\r\n\t\t\t}`,\r\n\r\n\t\t\"nebula\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #040410;\r\n\t\t\t--editor-background: #150e1f;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #8C849A;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgba(141,79,201,0.99);\r\n\t\t\t--box-selection-fill: #311E44;\r\n\t\t\t--loop-accent: #CC688C;\r\n\t\t\t--link-accent: #817DC9;\r\n\t\t\t--ui-widget-background: #44394F;\r\n\t\t\t--ui-widget-focus: #7A6386;\r\n\t\t\t--pitch-background: #393e4f40;\r\n\t\t\t--tonic: #7D5C9EC0;\r\n\t\t\t--fifth-note: #ab77bd50;\r\n\t\t\t--white-piano-key: #EEEEEE;\r\n\t\t\t--black-piano-key: #5F5566;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: rgba(141,79,201,0.99);\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #46374C;\r\n\t\t\t--track-editor-bg-pitch-dim: #1F1C2850;\r\n\t\t\t--track-editor-bg-noise: #3D353B;\r\n\t\t\t--track-editor-bg-noise-dim: #16131550;\r\n\t\t\t--track-editor-bg-mod: #623F4C;\r\n\t\t\t--track-editor-bg-mod-dim: #361A2450;\r\n\t\t\t--multiplicative-mod-slider: #9F6E6A;\r\n\t\t\t--overwriting-mod-slider: #A664B5;\r\n\t\t\t--indicator-primary: #CC6B8E;\r\n\t\t\t--indicator-secondary: #44394F;\r\n\t\t\t--select2-opt-group: #6A576F;\r\n\t\t\t--input-box-outline: #222;\r\n\t\t\t--mute-button-normal: #BF91DC;\r\n\t\t\t--mute-button-mod: #DC8C9A;\r\n\t\t\t--mod-label-primary: #3A2840;\r\n\t\t\t--mod-label-secondary-text: #62485E;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--pitch-secondary-channel-hue: -96;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 4.2;\r\n\t\t\t--pitch-secondary-channel-sat: 50.3;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: -96;\r\n\t\t\t--pitch-primary-channel-hue-scale: 4.2;\r\n\t\t\t--pitch-primary-channel-sat: 70;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: -96;\r\n\t\t\t--pitch-secondary-note-hue-scale: 4.2;\r\n\t\t\t--pitch-secondary-note-sat: 70.9;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: -96;\r\n\t\t\t--pitch-primary-note-hue-scale: 4.2;\r\n\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 16;\r\n\t\t\t--noise-secondary-channel-hue-scale: -1.33;\r\n\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 16;\r\n\t\t\t--noise-primary-channel-hue-scale: -1.33;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 12;\r\n\t\t\t--noise-secondary-note-hue-scale: -1.33;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 12;\r\n\t\t\t--noise-primary-note-hue-scale: -1.33;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 12;\r\n\t\t\t--mod-secondary-channel-hue-scale: -.75;\r\n\t\t\t--mod-secondary-channel-sat: 50;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 12;\r\n\t\t\t--mod-primary-channel-hue-scale: -.75;\r\n\t\t\t--mod-primary-channel-sat: 70;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 12;\r\n\t\t\t--mod-secondary-note-hue-scale: -.75;\r\n\t\t\t--mod-secondary-note-sat: 75;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 12;\r\n\t\t\t--mod-primary-note-hue-scale: -.75;\r\n\t\t\t--mod-primary-note-sat: 85;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary: #aaa;\r\n\t\t\t--disabled-note-secondary: #666;\r\n\t\t}`,\r\n\r\n\t\t\"roe light\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #fff5f5;\r\n\t\t\t--editor-background: #fff5f5;\r\n\t\t\t--hover-preview: #0e8bf1;\r\n\t\t\t--playhead: 000;\r\n\t\t\t--primary-text: #0e8bf1;\r\n\t\t\t--secondary-text: #f10e0e;\r\n\t\t\t--inverted-text: white;\r\n\t\t\t--text-selection: #ff4444fc;\r\n\t\t\t--box-selection-fill: #ff00004d;\r\n\t\t\t--loop-accent: #9a75ff;\r\n\t\t\t--link-accent: #ff7070;\r\n\t\t\t--ui-widget-background: #bdc9e5;\r\n\t\t\t--ui-widget-focus: #a3b7e5;\r\n\t\t\t--pitch-background: #d0c7db;\r\n\t\t\t--tonic: #bed3e4;\r\n\t\t\t--fifth-note: #e7c6c6;\r\n\t\t\t--white-piano-key: #cdcdcd;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--oscilloscope-line-L: #0e8bf1;\r\n\t\t\t--oscilloscope-line-R: #ff4444fc;\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #e5e1ea;\r\n\t\t\t--track-editor-bg-pitch-dim: #cbc4d4;\r\n\t\t\t--track-editor-bg-noise: #e0ddee;\r\n\t\t\t--track-editor-bg-noise-dim: #c1bade;\r\n\t\t\t--track-editor-bg-mod: #d8e6f3;\r\n\t\t\t--track-editor-bg-mod-dim: #b1cce7;\r\n\t\t\t--multiplicative-mod-slider: #8097cb;\r\n\t\t\t--overwriting-mod-slider: #8097cb;\r\n\t\t\t--indicator-primary: #FF2A2A;\r\n\t\t\t--indicator-secondary: #92a6d3;\r\n\t\t\t--select2-opt-group: #b6c4e2;\r\n\t\t\t--input-box-outline: #bdc9e5;\r\n\t\t\t--mute-button-normal: #66baff;\r\n\t\t\t--mute-button-mod: #1a98ff;\r\n\t\t\t--pitch1-secondary-channel: #273c90;\r\n\t\t\t--pitch1-primary-channel: #476BFF;\r\n\t\t\t--pitch1-secondary-note: #273c90;\r\n\t\t\t--pitch1-primary-note: #476BFF;\r\n\t\t\t--pitch2-secondary-channel: #3a3898;\r\n\t\t\t--pitch2-primary-channel: #625FFB;\r\n\t\t\t--pitch2-secondary-note: #3a3898;\r\n\t\t\t--pitch2-primary-note: #625FFB;\r\n\t\t\t--pitch3-secondary-channel: #542780;\r\n\t\t\t--pitch3-primary-channel: #9C49EC;\r\n\t\t\t--pitch3-secondary-note: #542780;\r\n\t\t\t--pitch3-primary-note: #9C49EC;\r\n\t\t\t--pitch4-secondary-channel: #84225d;\r\n\t\t\t--pitch4-primary-channel: #fd3fb1;\r\n\t\t\t--pitch4-secondary-note: #84225d;\r\n\t\t\t--pitch4-primary-note: #fd3fb1;\r\n\t\t\t--pitch5-secondary-channel: #8d2323;\r\n\t\t\t--pitch5-primary-channel: #ff3f3f;\r\n\t\t\t--pitch5-secondary-note: #8d2323;\r\n\t\t\t--pitch5-primary-note: #ff3f3f;\r\n\t\t\t--pitch6-secondary-channel: #84225d;\r\n\t\t\t--pitch6-primary-channel: #fd3fb1;\r\n\t\t\t--pitch6-secondary-note: #84225d;\r\n\t\t\t--pitch6-primary-note: #fd3fb1;\r\n\t\t\t--pitch7-secondary-channel: #542780;\r\n\t\t\t--pitch7-primary-channel: #9C49EC;\r\n\t\t\t--pitch7-secondary-note: #542780;\r\n\t\t\t--pitch7-primary-note: #9C49EC;\r\n\t\t\t--pitch8-secondary-channel: #3a3898;\r\n\t\t\t--pitch8-primary-channel: #625FFB;\r\n\t\t\t--pitch8-secondary-note: #3a3898;\r\n\t\t\t--pitch8-primary-note: #625FFB;\r\n\t\t\t--pitch9-secondary-channel: #273c90;\r\n\t\t\t--pitch9-primary-channel: #476BFF;\r\n\t\t\t--pitch9-secondary-note: #273c90;\r\n\t\t\t--pitch9-primary-note: #476BFF;\r\n\t\t\t--pitch10-secondary-channel: #165a93;\r\n\t\t\t--pitch10-primary-channel: #299EFF;\r\n\t\t\t--pitch10-secondary-note: #165a93;\r\n\t\t\t--pitch10-primary-note: #299EFF;\r\n\t\t\t--noise1-secondary-channel: #336bdb;\r\n\t\t\t--noise1-primary-channel: #4281FF;\r\n\t\t\t--noise1-secondary-note: #336bdb;\r\n\t\t\t--noise1-primary-note: #4281FF;\r\n\t\t\t--noise2-secondary-channel: #5e38dc;\r\n\t\t\t--noise2-primary-channel: #7347FF;\r\n\t\t\t--noise2-secondary-note: #5e38dc;\r\n\t\t\t--noise2-primary-note: #7347FF;\r\n\t\t\t--noise3-secondary-channel: #7d3097;\r\n\t\t\t--noise3-primary-channel: #9F3CBF;\r\n\t\t\t--noise3-secondary-note: #7d3097;\r\n\t\t\t--noise3-primary-note: #9F3CBF;\r\n\t\t\t--noise4-secondary-channel: #ad2559;\r\n\t\t\t--noise4-primary-channel: #D3326F;\r\n\t\t\t--noise4-secondary-note: #ad2559;\r\n\t\t\t--noise4-primary-note: #D3326F;\r\n\t\t\t--noise5-secondary-channel: #d02525;\r\n\t\t\t--noise5-primary-channel: #FF2A2A;\r\n\t\t\t--noise5-secondary-note: #d02525;\r\n\t\t\t--noise5-primary-note: #FF2A2A;\r\n\t\t\t--mod1-secondary-channel: #35415a;\r\n\t\t\t--mod1-primary-channel: #47587a;\r\n\t\t\t--mod1-secondary-note: #35415a;\r\n\t\t\t--mod1-primary-note: #47587a;\r\n\t\t\t--mod2-secondary-channel: #5a5374;\r\n\t\t\t--mod2-primary-channel: #716791;\r\n\t\t\t--mod2-secondary-note: #5a5374;\r\n\t\t\t--mod2-primary-note: #716791;\r\n\t\t\t--mod3-secondary-channel: #53385c;\r\n\t\t\t--mod3-primary-channel: #6f4c7b;\r\n\t\t\t--mod3-secondary-note: #53385c;\r\n\t\t\t--mod3-primary-note: #6f4c7b;\r\n\t\t\t--mod4-secondary-channel: #7e4e60;\r\n\t\t\t--mod4-primary-channel: #9e6279;\r\n\t\t\t--mod4-secondary-note: #7e4e60;\r\n\t\t\t--mod4-primary-note: #9e6279;\r\n\t\t\t--mod-label-primary: #d0c7db;\r\n\t\t\t--mod-label-secondary-text: #cb3434;\r\n\t\t\t--mod-label-primary-text: black;\r\n\t\t\t--disabled-note-primary: #616161;\r\n\t\t\t--disabled-note-secondary: #474747;\r\n\t\t}`,\r\n\r\n\t\t\"energized\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #000a08;\r\n\t\t\t--editor-background: #000a08;\r\n\t\t\t--hover-preview: #ffffcc;\r\n\t\t\t--playhead: #ccfff5;\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #d9d98c;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: #ffff6659;\r\n\t\t\t--box-selection-fill: #ffffff33;\r\n\t\t\t--loop-accent: #ffff00;\r\n\t\t\t--link-accent: #00ffcc;\r\n\t\t\t--ui-widget-background: #141f1d;\r\n\t\t\t--ui-widget-focus: #24423d;\r\n\t\t\t--pitch-background: #001410;\r\n\t\t\t--tonic: #00241d;\r\n\t\t\t--fifth-note: #ffff6633;\r\n\t\t\t--white-piano-key: #66998f;\r\n\t\t\t--black-piano-key: #141f1d;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: #ffff6659;\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #66998f40;\r\n\t\t\t--track-editor-bg-pitch-dim: #293d3940;\r\n\t\t\t--track-editor-bg-noise: #66998f40;\r\n\t\t\t--track-editor-bg-noise-dim: #293d3940;\r\n\t\t\t--track-editor-bg-mod: #99996640;\r\n\t\t\t--track-editor-bg-mod-dim: #3d3d2940;\r\n\t\t\t--multiplicative-mod-slider: #ffff00;\r\n\t\t\t--overwriting-mod-slider: #00ffcc;\r\n\t\t\t--indicator-primary: #ffff00;\r\n\t\t\t--indicator-secondary: #141f1d;\r\n\t\t\t--select2-opt-group: #1b312e;\r\n\t\t\t--input-box-outline: #141f1d;\r\n\t\t\t--mute-button-normal: #00ffcc;\r\n\t\t\t--mute-button-mod: #00997a;\r\n\t\t\t--pitch1-secondary-channel: #bfbf40;\r\n\t\t\t--pitch1-primary-channel: #ffff64;\r\n\t\t\t--pitch1-secondary-note: #bfbf40;\r\n\t\t\t--pitch1-primary-note: #ffff64;\r\n\t\t\t--pitch2-secondary-channel: #a2bf40;\r\n\t\t\t--pitch2-primary-channel: #e0ff7d;\r\n\t\t\t--pitch2-secondary-note: #a2bf40;\r\n\t\t\t--pitch2-primary-note: #e0ff7d;\r\n\t\t\t--pitch3-secondary-channel: #75bf40;\r\n\t\t\t--pitch3-primary-channel: #c1ff96;\r\n\t\t\t--pitch3-secondary-note: #75bf40;\r\n\t\t\t--pitch3-primary-note: #c1ff96;\r\n\t\t\t--pitch4-secondary-channel: #40bf51;\r\n\t\t\t--pitch4-primary-channel: #a2ffaf;\r\n\t\t\t--pitch4-secondary-note: #40bf51;\r\n\t\t\t--pitch4-primary-note: #a2ffaf;\r\n\t\t\t--pitch5-secondary-channel: #40bf86;\r\n\t\t\t--pitch5-primary-channel: #83ffc8;\r\n\t\t\t--pitch5-secondary-note: #40bf86;\r\n\t\t\t--pitch5-primary-note: #83ffc8;\r\n\t\t\t--pitch6-secondary-channel: #40bfa6;\r\n\t\t\t--pitch6-primary-channel: #64ffe1;\r\n\t\t\t--pitch6-secondary-note: #40bfa6;\r\n\t\t\t--pitch6-primary-note: #64ffe1;\r\n\t\t\t--pitch7-secondary-channel: #40bf86;\r\n\t\t\t--pitch7-primary-channel: #83ffc8;\r\n\t\t\t--pitch7-secondary-note: #40bf86;\r\n\t\t\t--pitch7-primary-note: #83ffc8;\r\n\t\t\t--pitch8-secondary-channel: #40bf51;\r\n\t\t\t--pitch8-primary-channel: #a2ffaf;\r\n\t\t\t--pitch8-secondary-note: #40bf51;\r\n\t\t\t--pitch8-primary-note: #a2ffaf;\r\n\t\t\t--pitch9-secondary-channel: #75bf40;\r\n\t\t\t--pitch9-primary-channel: #c1ff96;\r\n\t\t\t--pitch9-secondary-note: #75bf40;\r\n\t\t\t--pitch9-primary-note: #c1ff96;\r\n\t\t\t--pitch10-secondary-channel: #a2bf40;\r\n\t\t\t--pitch10-primary-channel: #e0ff7d;\r\n\t\t\t--pitch10-secondary-note: #a2bf40;\r\n\t\t\t--pitch10-primary-note: #e0ff7d;\r\n\t\t\t--noise1-secondary-channel: #a6a659;\r\n\t\t\t--noise1-primary-channel: #ffffcc;\r\n\t\t\t--noise1-secondary-note: #a6a659;\r\n\t\t\t--noise1-primary-note: #ffffcc;\r\n\t\t\t--noise2-secondary-channel: #94a659;\r\n\t\t\t--noise2-primary-channel: #f3ffcc;\r\n\t\t\t--noise2-secondary-note: #94a659;\r\n\t\t\t--noise2-primary-note: #f3ffcc;\r\n\t\t\t--noise3-secondary-channel: #79a659;\r\n\t\t\t--noise3-primary-channel: #e1ffcc;\r\n\t\t\t--noise3-secondary-note: #79a659;\r\n\t\t\t--noise3-primary-note: #e1ffcc;\r\n\t\t\t--noise4-secondary-channel: #94a659;\r\n\t\t\t--noise4-primary-channel: #f3ffcc;\r\n\t\t\t--noise4-secondary-note: #94a659;\r\n\t\t\t--noise4-primary-note: #f3ffcc;\r\n\t\t\t--noise5-secondary-channel: #a6a659;\r\n\t\t\t--noise5-primary-channel: #ffffcc;\r\n\t\t\t--noise5-secondary-note: #a6a659;\r\n\t\t\t--noise5-primary-note: #ffffcc;\r\n\t\t\t--mod1-secondary-channel: #a3a329;\r\n\t\t\t--mod1-primary-channel: #ffff00;\r\n\t\t\t--mod1-secondary-note: #a3a329;\r\n\t\t\t--mod1-primary-note: #ffff00;\r\n\t\t\t--mod2-secondary-channel: #a38529;\r\n\t\t\t--mod2-primary-channel: #ffbf00;\r\n\t\t\t--mod2-secondary-note: #a38529;\r\n\t\t\t--mod2-primary-note: #ffbf00;\r\n\t\t\t--mod3-secondary-channel: #a36629;\r\n\t\t\t--mod3-primary-channel: #ff7f00;\r\n\t\t\t--mod3-secondary-note: #a36629;\r\n\t\t\t--mod3-primary-note: #ff7f00;\r\n\t\t\t--mod4-secondary-channel: #a38529;\r\n\t\t\t--mod4-primary-channel: #ffbf00;\r\n\t\t\t--mod4-secondary-note: #a38529;\r\n\t\t\t--mod4-primary-note: #ffbf00;\r\n\t\t\t--mod-label-primary: #141f1d;\r\n\t\t\t--mod-label-secondary-text: #d9d98c;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #808080;\r\n\t\t\t--disabled-note-secondary: #666666;\r\n\t\t}`,\r\n\r\n\t\t\"neapolitan\":\r\n\t\t`:root {\r\n\t\t\t--page-margin: #120807;\r\n\t\t\t--editor-background: #120807;\r\n\t\t\t--hover-preview: #e79a82;\r\n\t\t\t--playhead: #e79a82;\r\n\t\t\t--primary-text: #decdbf;\r\n\t\t\t--secondary-text: #fa99bb;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: #990036;\r\n\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\r\n\t\t\t--loop-accent: #f6377a;\r\n\t\t\t--link-accent: #f6377a;\r\n\t\t\t--ui-widget-background: #24160f;\r\n\t\t\t--ui-widget-focus: #362217;\r\n\t\t\t--pitch-background: #1e1106;\r\n\t\t\t--tonic: #382414;\r\n\t\t\t--fifth-note: #41240c;\r\n\t\t\t--white-piano-key: #e1c5b7;\r\n\t\t\t--black-piano-key: #482c1e;\r\n\t\t\t--oscilloscope-line-L: #decdbf;\r\n\t\t\t--oscilloscope-line-R: #990036;\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #4d2a19;\r\n\t\t\t--track-editor-bg-pitch-dim: #27150c;\r\n\t\t\t--track-editor-bg-noise: #4d2a19;\r\n\t\t\t--track-editor-bg-noise-dim: #27150c;\r\n\t\t\t--track-editor-bg-mod: #4d2a19;\r\n\t\t\t--track-editor-bg-mod-dim: #27150c;\r\n\t\t\t--multiplicative-mod-slider: #decdbf;\r\n\t\t\t--overwriting-mod-slider: #decdbf;\r\n\t\t\t--indicator-primary: #decdbf;\r\n\t\t\t--indicator-secondary: #362217;\r\n\t\t\t--select2-opt-group: #24160f;\r\n\t\t\t--input-box-outline: #24160f;\r\n\t\t\t--mute-button-normal: #ff66a1;\r\n\t\t\t--mute-button-mod: #e61968;\r\n\t\t\t--pitch1-secondary-channel: #680029;\r\n\t\t\t--pitch1-primary-channel: #cc0052;\r\n\t\t\t--pitch1-secondary-note: #660029;\r\n\t\t\t--pitch1-primary-note: #cc0052;\r\n\t\t\t--pitch2-secondary-channel: #7e1b43;\r\n\t\t\t--pitch2-primary-channel: #d32e71;\r\n\t\t\t--pitch2-secondary-note: #7e1b43;\r\n\t\t\t--pitch2-primary-note: #d32e71;\r\n\t\t\t--pitch3-secondary-channel: #aa275e;\r\n\t\t\t--pitch3-primary-channel: #da5d91;\r\n\t\t\t--pitch3-secondary-note: #aa275e;\r\n\t\t\t--pitch3-primary-note: #da5d91;\r\n\t\t\t--pitch4-secondary-channel: #cc3878;\r\n\t\t\t--pitch4-primary-channel: #e18bb0;\r\n\t\t\t--pitch4-secondary-note: #cc3878;\r\n\t\t\t--pitch4-primary-note: #e18bb0;\r\n\t\t\t--pitch5-secondary-channel: #d06c9b;\r\n\t\t\t--pitch5-primary-channel: #e9bad0;\r\n\t\t\t--pitch5-secondary-note: #d06c9b;\r\n\t\t\t--pitch5-primary-note: #e9bad0;\r\n\t\t\t--pitch6-secondary-channel: #c9acc5;\r\n\t\t\t--pitch6-primary-channel: #f0e8ef;\r\n\t\t\t--pitch6-secondary-note: #c9acc5;\r\n\t\t\t--pitch6-primary-note: #f0e8ef;\r\n\t\t\t--pitch7-secondary-channel: #d06c9b;\r\n\t\t\t--pitch7-primary-channel: #e9bad0;\r\n\t\t\t--pitch7-secondary-note: #d06c9b;\r\n\t\t\t--pitch7-primary-note: #e9bad0;\r\n\t\t\t--pitch8-secondary-channel: #cc3878;\r\n\t\t\t--pitch8-primary-channel: #e18bb0;\r\n\t\t\t--pitch8-secondary-note: #cc3878;\r\n\t\t\t--pitch8-primary-note: #e18bb0;\r\n\t\t\t--pitch9-secondary-channel: #aa275e;\r\n\t\t\t--pitch9-primary-channel: #da5d91;\r\n\t\t\t--pitch9-secondary-note: #aa275e;\r\n\t\t\t--pitch9-primary-note: #da5d91;\r\n\t\t\t--pitch10-secondary-channel: #7e1b43;\r\n\t\t\t--pitch10-primary-channel: #d32e71;\r\n\t\t\t--pitch10-secondary-note: #7e1b43;\r\n\t\t\t--pitch10-primary-note: #d32e71;\r\n\t\t\t--noise1-secondary-channel: #683a37;\r\n\t\t\t--noise1-primary-channel: #A85F5A;\r\n\t\t\t--noise1-secondary-note: #683a37;\r\n\t\t\t--noise1-primary-note: #A85F5A;\r\n\t\t\t--noise2-secondary-channel: #7c4a41;\r\n\t\t\t--noise2-primary-channel: #B47A70;\r\n\t\t\t--noise2-secondary-note: #7c4a41;\r\n\t\t\t--noise2-primary-note: #B47A70;\r\n\t\t\t--noise3-secondary-channel: #935f4d;\r\n\t\t\t--noise3-primary-channel: #c09587;\r\n\t\t\t--noise3-secondary-note: #935f4d;\r\n\t\t\t--noise3-primary-note: #C09587;\r\n\t\t\t--noise4-secondary-channel: #aa795a;\r\n\t\t\t--noise4-primary-channel: #cdb09d;\r\n\t\t\t--noise4-secondary-note: #aa795a;\r\n\t\t\t--noise4-primary-note: #CDAF9D;\r\n\t\t\t--noise5-secondary-channel: #bb987c;\r\n\t\t\t--noise5-primary-channel: #decdbf;\r\n\t\t\t--noise5-secondary-note: #bb987c;\r\n\t\t\t--noise5-primary-note: #decdbf;\r\n\t\t\t--mod1-secondary-channel: #6ca784;\r\n\t\t\t--mod1-primary-channel: #accdb9;\r\n\t\t\t--mod1-secondary-note: #6ca784;\r\n\t\t\t--mod1-primary-note: #accdb9;\r\n\t\t\t--mod2-secondary-channel: #7daa9f;\r\n\t\t\t--mod2-primary-channel: #bbd3cd;\r\n\t\t\t--mod2-secondary-note: #7daa9f;\r\n\t\t\t--mod2-primary-note: #bbd3cd;\r\n\t\t\t--mod3-secondary-channel: #70a3a9;\r\n\t\t\t--mod3-primary-channel: #afcccf;\r\n\t\t\t--mod3-secondary-note: #70a3a9;\r\n\t\t\t--mod3-primary-note: #afcccf;\r\n\t\t\t--mod4-secondary-channel: #5698b8;\r\n\t\t\t--mod4-primary-channel: #9ec3d6;\r\n\t\t\t--mod4-secondary-note: #5698b8;\r\n\t\t\t--mod4-primary-note: #9ec3d6;\r\n\t\t\t--mod-label-primary: #24160f;\r\n\t\t\t--mod-label-secondary-text: #E5AFC2;\r\n\t\t\t--mod-label-primary-text: #decdbf;\r\n\t\t\t--disabled-note-primary: #bababa;\r\n\t\t\t--disabled-note-secondary: #878787;\r\n\t\t}`,\r\n\r\n\t\t\"mono\":\r\n\t\t`:root {\r\n\t\t\t--page-margin: #000;\r\n\t\t\t--editor-background: #000;\r\n\t\t\t--hover-preview: #808080;\r\n\t\t\t--playhead: #808080;\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #cccccc;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: #696969;\r\n\t\t\t--box-selection-fill: #cccccc40;\r\n\t\t\t--loop-accent: #808080;\r\n\t\t\t--link-accent: white;\r\n\t\t\t--ui-widget-background: #232323;\r\n\t\t\t--ui-widget-focus: #303030;\r\n\t\t\t--pitch-background: #1a1a1a;\r\n\t\t\t--tonic: #262626;\r\n\t\t\t--fifth-note: #0d0d0d;\r\n\t\t\t--white-piano-key: #808080;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: #696969;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #262626;\r\n\t\t\t--track-editor-bg-pitch-dim: #1a1a1a;\r\n\t\t\t--track-editor-bg-noise: #262626;\r\n\t\t\t--track-editor-bg-noise-dim: #1a1a1a;\r\n\t\t\t--track-editor-bg-mod: #262626;\r\n\t\t\t--track-editor-bg-mod-dim: #1a1a1a;\r\n\t\t\t--multiplicative-mod-slider: #808080;\r\n\t\t\t--overwriting-mod-slider: #808080;\r\n\t\t\t--indicator-primary: #808080;\r\n\t\t\t--indicator-secondary: #333333;\r\n\t\t\t--select2-opt-group: #232323;\r\n\t\t\t--input-box-outline: #222;\r\n\t\t\t--mute-button-normal: #808080;\r\n\t\t\t--mute-button-mod: #808080;\r\n\t\t\t--mod-label-primary: #232323;\r\n\t\t\t--mod-label-secondary-text: #696969;\r\n\t\t\t--mod-label-primary-text: #cdcdcd;\r\n\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 25;\r\n\t\t\t--pitch-secondary-channel-sat: 10;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 70;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0;\r\n\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t--pitch-primary-channel-hue-scale: 25;\r\n\t\t\t--pitch-primary-channel-sat: 50;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 95;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0;\r\n\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t--pitch-secondary-note-hue-scale: 25;\r\n\t\t\t--pitch-secondary-note-sat: 10;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 70;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0;\r\n\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t--pitch-primary-note-hue-scale: 25;\r\n\t\t\t--pitch-primary-note-sat: 50;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-note-lum: 95;\r\n\t\t\t--pitch-primary-note-lum-scale: 0;\r\n\t\t\t--noise-secondary-channel-hue: 125;\r\n\t\t\t--noise-secondary-channel-hue-scale: 50;\r\n\t\t\t--noise-secondary-channel-sat: 10;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--noise-secondary-channel-lum: 70;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 125;\r\n\t\t\t--noise-primary-channel-hue-scale: 50;\r\n\t\t\t--noise-primary-channel-sat: 50;\r\n\t\t\t--noise-primary-channel-sat-scale: 0.1;\r\n\t\t\t--noise-primary-channel-lum: 95;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 125;\r\n\t\t\t--noise-secondary-note-hue-scale: 50;\r\n\t\t\t--noise-secondary-note-sat: 10;\r\n\t\t\t--noise-secondary-note-sat-scale: 0.1;\r\n\t\t\t--noise-secondary-note-lum: 70;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 125;\r\n\t\t\t--noise-primary-note-hue-scale: 50;\r\n\t\t\t--noise-primary-note-sat: 50;\r\n\t\t\t--noise-primary-note-sat-scale: 0.1;\r\n\t\t\t--noise-primary-note-lum: 95;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 255;\r\n\t\t\t--mod-secondary-channel-hue-scale: 75;\r\n\t\t\t--mod-secondary-channel-sat: 10;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 70;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 255;\r\n\t\t\t--mod-primary-channel-hue-scale: 75;\r\n\t\t\t--mod-primary-channel-sat: 50;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 95;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 255;\r\n\t\t\t--mod-secondary-note-hue-scale: 75;\r\n\t\t\t--mod-secondary-note-sat: 10;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 70;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 255;\r\n\t\t\t--mod-primary-note-hue-scale: 75;\r\n\t\t\t--mod-primary-note-sat: 50;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 95;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary: #c6c6c6;\r\n\t\t\t--disabled-note-secondary: #8c8c8c;\r\n\t\t}`,\r\n\r\n\t\t\"poly\":\r\n\t\t`:root {\r\n\t\t\t--page-margin: #000;\r\n\t\t\t--editor-background: #000;\r\n\t\t\t--hover-preview: #808080;\r\n\t\t\t--playhead: #808080;\r\n\t\t\t--primary-text: white;\r\n\t\t\t--secondary-text: #cccccc;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: #696969;\r\n\t\t\t--box-selection-fill: #cccccc40;\r\n\t\t\t--loop-accent: #808080;\r\n\t\t\t--link-accent: white;\r\n\t\t\t--ui-widget-background: #232323;\r\n\t\t\t--ui-widget-focus: #303030;\r\n\t\t\t--pitch-background: #1a1a1a;\r\n\t\t\t--tonic: #262626;\r\n\t\t\t--fifth-note: #0d0d0d;\r\n\t\t\t--white-piano-key: #808080;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--oscilloscope-line-L: white;\r\n\t\t\t--oscilloscope-line-R: #696969;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #262626;\r\n\t\t\t--track-editor-bg-pitch-dim: #1a1a1a;\r\n\t\t\t--track-editor-bg-noise: #262626;\r\n\t\t\t--track-editor-bg-noise-dim: #1a1a1a;\r\n\t\t\t--track-editor-bg-mod: #262626;\r\n\t\t\t--track-editor-bg-mod-dim: #1a1a1a;\r\n\t\t\t--multiplicative-mod-slider: #808080;\r\n\t\t\t--overwriting-mod-slider: #808080;\r\n\t\t\t--indicator-primary: #808080;\r\n\t\t\t--indicator-secondary: #333333;\r\n\t\t\t--select2-opt-group: #232323;\r\n\t\t\t--input-box-outline: #222;\r\n\t\t\t--mute-button-normal: #808080;\r\n\t\t\t--mute-button-mod: #808080;\r\n\t\t\t--mod-label-primary: #232323;\r\n\t\t\t--mod-label-secondary-text: #696969;\r\n\t\t\t--mod-label-primary-text: #cdcdcd;\r\n\t\t\t--pitch-secondary-channel-hue: 208;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 10;\r\n\t\t\t--pitch-secondary-channel-sat: 100;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0;\r\n\t\t\t--pitch-secondary-channel-lum: 88;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0;\r\n\t\t\t--pitch-primary-channel-hue: 207;\r\n\t\t\t--pitch-primary-channel-hue-scale: 10;\r\n\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0;\r\n\t\t\t--pitch-primary-channel-lum: 910;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0;\r\n\t\t\t--pitch-secondary-note-hue: 208;\r\n\t\t\t--pitch-secondary-note-hue-scale: 10;\r\n\t\t\t--pitch-secondary-note-sat: 100;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0;\r\n\t\t\t--pitch-secondary-note-lum: 88;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0;\r\n\t\t\t--pitch-primary-note-hue: 208;\r\n\t\t\t--pitch-primary-note-hue-scale: 10;\r\n\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t--pitch-primary-note-sat-scale: 0;\r\n\t\t\t--pitch-primary-note-lum: 910;\r\n\t\t\t--pitch-primary-note-lum-scale: 0;\r\n\t\t\t--noise-secondary-channel-hue: 328;\r\n\t\t\t--noise-secondary-channel-hue-scale: 10;\r\n\t\t\t--noise-secondary-channel-sat: 100;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 88;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 327;\r\n\t\t\t--noise-primary-channel-hue-scale: 10;\r\n\t\t\t--noise-primary-channel-sat: 100;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 910;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 328;\r\n\t\t\t--noise-secondary-note-hue-scale: 10;\r\n\t\t\t--noise-secondary-note-sat: 100;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 88;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 327;\r\n\t\t\t--noise-primary-note-hue-scale: 10;\r\n\t\t\t--noise-primary-note-sat: 100;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 910;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 87;\r\n\t\t\t--mod-secondary-channel-hue-scale: 10;\r\n\t\t\t--mod-secondary-channel-sat: 100;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 88;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 88;\r\n\t\t\t--mod-primary-channel-hue-scale: 10;\r\n\t\t\t--mod-primary-channel-sat: 100;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 910;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 87;\r\n\t\t\t--mod-secondary-note-hue-scale: 10;\r\n\t\t\t--mod-secondary-note-sat: 100;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 88;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 88;\r\n\t\t\t--mod-primary-note-hue-scale: 10;\r\n\t\t\t--mod-primary-note-sat: 100;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 910;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary: #c6c6c6;\r\n\t\t\t--disabled-note-secondary: #8c8c8c;\r\n\t\t}`,\r\n\r\n\t\t\"blutonium\":\r\n\t\t\t`:root {\r\n\t\t\t--page-margin: #02070D;\r\n\t\t\t--editor-background: #02070D;\r\n\t\t\t--hover-preview: white;\r\n\t\t\t--playhead: white;\r\n\t\t\t--primary-text: #9bd1ee;\r\n\t\t\t--secondary-text: #5a6da8;\r\n\t\t\t--inverted-text: black;\r\n\t\t\t--text-selection: rgb(68 68 255 / 99%);\r\n\t\t\t--box-selection-fill: rgb(0 0 255 / 30%);\r\n\t\t\t--loop-accent: #024aca;\r\n\t\t\t--link-accent: #024aca;\r\n\t\t\t--ui-widget-background: #161c2e;\r\n\t\t\t--ui-widget-focus: #262c3e;\r\n\t\t\t--pitch-background: #22272D;\r\n\t\t\t--tonic: #1b3056;\r\n\t\t\t--fifth-note: #344051;\r\n\t\t\t--white-piano-key: #a6c6ed;\r\n\t\t\t--black-piano-key: #2f4687;\r\n\t\t\t--use-color-formula: false;\r\n\t\t\t--track-editor-bg-pitch: #25284c;\r\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\r\n\t\t\t--track-editor-bg-noise: #261f42;\r\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\r\n\t\t\t--track-editor-bg-mod: #183049;\r\n\t\t\t--track-editor-bg-mod-dim: #102132;\r\n\t\t\t--multiplicative-mod-slider: #344a7f;\r\n\t\t\t--overwriting-mod-slider: #344a7f;\r\n\t\t\t--indicator-primary: #024aca;\r\n\t\t\t--indicator-secondary: #00177d;\r\n\t\t\t--select2-opt-group: #141e34;\r\n\t\t\t--input-box-outline: #141e34;\r\n\t\t\t--mute-button-normal: #273b9d;\r\n\t\t\t--mute-button-mod: #27989d;\r\n\t\t\t--pitch1-secondary-channel: hsl(200, 100%, 40%);\r\n\t\t\t--pitch1-primary-channel: #99ddff;\r\n\t\t\t--pitch1-secondary-note: hsl(200, 100%, 40%);\r\n\t\t\t--pitch1-primary-note: #99ddff;\r\n\t\t\t--pitch2-secondary-channel: \thsl(212, 100%, 34%);\r\n\t\t\t--pitch2-primary-channel: #5BA8FF;\r\n\t\t\t--pitch2-secondary-note: hsl(212, 100%, 34%);\r\n\t\t\t--pitch2-primary-note: #5BA8FF;\r\n\t\t\t--pitch3-secondary-channel: #024ACA;\r\n\t\t\t--pitch3-primary-channel: #0A89FF;\r\n\t\t\t--pitch3-secondary-note: #024ACA;\r\n\t\t\t--pitch3-primary-note: #0A89FF;\r\n\t\t\t--pitch4-secondary-channel: #00177D;\r\n\t\t\t--pitch4-primary-channel: #024ACA;\r\n\t\t\t--pitch4-secondary-note: #00177D;\r\n\t\t\t--pitch4-primary-note: #024ACA;\r\n\t\t\t--pitch5-secondary-channel: #000e4e;\r\n\t\t\t--pitch5-primary-channel: #0023bf;\r\n\t\t\t--pitch5-secondary-note: #000e4e;\r\n\t\t\t--pitch5-primary-note: #0023bf;\r\n\t\t\t--pitch6-secondary-channel: #8990FE;\r\n\t\t\t--pitch6-primary-channel: #C2C6FF;\r\n\t\t\t--pitch6-secondary-note: #8990FE;\r\n\t\t\t--pitch6-primary-note: #C2C6FF;\r\n\t\t\t--pitch7-secondary-channel: #5E65D3;\r\n\t\t\t--pitch7-primary-channel: #8990FE;\r\n\t\t\t--pitch7-secondary-note: #5E65D3;\r\n\t\t\t--pitch7-primary-note: #8990FE;\r\n\t\t\t--pitch8-secondary-channel: #3138A6;\r\n\t\t\t--pitch8-primary-channel: #5E65D3;\r\n\t\t\t--pitch8-secondary-note: #3138A6;\r\n\t\t\t--pitch8-primary-note: #5E65D3;\r\n\t\t\t--pitch9-secondary-channel: #1B0B7F;\r\n\t\t\t--pitch9-primary-channel: #3138A6;\r\n\t\t\t--pitch9-secondary-note: #1B0B7F;\r\n\t\t\t--pitch9-primary-note: #3138A6;\r\n\t\t\t--pitch10-secondary-channel: #13015D;\r\n\t\t\t--pitch10-primary-channel: #1c02bd;\r\n\t\t\t--pitch10-secondary-note: #13015D;\r\n\t\t\t--pitch10-primary-note: #1c02bd;\r\n\t\t\t--noise1-secondary-channel: #A675FE;\r\n\t\t\t--noise1-primary-channel: #E2C9FF;\r\n\t\t\t--noise1-secondary-note: #A675FE;\r\n\t\t\t--noise1-primary-note: #E2C9FF;\r\n\t\t\t--noise2-secondary-channel: #6A31CA;\r\n\t\t\t--noise2-primary-channel: #A675FE;\r\n\t\t\t--noise2-secondary-note: #6A31CA;\r\n\t\t\t--noise2-primary-note: #A675FE;\r\n\t\t\t--noise3-secondary-channel: #5A1991;\r\n\t\t\t--noise3-primary-channel: #6A31CA;\r\n\t\t\t--noise3-secondary-note: #5A1991;\r\n\t\t\t--noise3-primary-note: #6A31CA;\r\n\t\t\t--noise4-secondary-channel: #2f1a68;\r\n\t\t\t--noise4-primary-channel: #5A1991;\r\n\t\t\t--noise4-secondary-note: #2f1a68;\r\n\t\t\t--noise4-primary-note: #5A1991;\r\n\t\t\t--noise5-secondary-channel: #211640;\r\n\t\t\t--noise5-primary-channel: #391b8d;\r\n\t\t\t--noise5-secondary-note: #211640;\r\n\t\t\t--noise5-primary-note: #391b8d;\r\n\t\t\t--mod1-secondary-channel: #25E2CD;\r\n\t\t\t--mod1-primary-channel: #BDFFCA;\r\n\t\t\t--mod1-secondary-note: #25E2CD;\r\n\t\t\t--mod1-primary-note: #BDFFCA;\r\n\t\t\t--mod2-secondary-channel: #0A98AC;\r\n\t\t\t--mod2-primary-channel: #25E2CD;\r\n\t\t\t--mod2-secondary-note: #0A98AC;\r\n\t\t\t--mod2-primary-note: #25E2CC;\r\n\t\t\t--mod3-secondary-channel: #005280;\r\n\t\t\t--mod3-primary-channel: #0A98AC;\r\n\t\t\t--mod3-secondary-note: #005280;\r\n\t\t\t--mod3-primary-note: #0A98AC;\r\n\t\t\t--mod4-secondary-channel: #0f3670;\r\n\t\t\t--mod4-primary-channel: #1369c1;\r\n\t\t\t--mod4-secondary-note: #0f3670;\r\n\t\t\t--mod4-primary-note: #1369c1;\r\n\t\t\t--mod-label-primary: #191d26;\r\n\t\t\t--mod-label-secondary-text: #024aca;\r\n\t\t\t--mod-label-primary-text: #ffffffa6;\r\n\t\t\t--disabled-note-primary: #c9c9c9;\r\n\t\t\t--disabled-note-secondary: #616161;\r\n\t}`,\r\n\r\n\t\t\"midbox\":\r\n\t\t`:root {\r\n\t\t\t\t\t--page-margin: #010a1e;\r\n\t\t\t\t\t--editor-background: #010a1e;\r\n\t\t\t\t\t--hover-preview: #dfe9fe;\r\n\t\t\t\t\t--playhead: #e7f5f6;\r\n\t\t\t\t\t--primary-text: #f0fdff;\r\n\t\t\t\t\t--secondary-text: #c4c7d7;\r\n\t\t\t\t\t--inverted-text: #0f0623;\r\n\t\t\t\t\t--text-selection: #3f0ab4;\r\n\t\t\t\t\t--box-selection-fill: #32afb3;\r\n\t\t\t\t\t--loop-accent: #1719ff;\r\n\t\t\t\t\t--link-accent: #83a6ed;\r\n\t\t\t\t\t--ui-widget-background: #222856;\r\n\t\t\t\t\t--ui-widget-focus: #21417c;\r\n\t\t\t\t\t--pitch-background: #10264a;\r\n\t\t\t\t\t--tonic: #0797ce;\r\n\t\t\t\t\t--fifth-note: #3e2fb5;\r\n\t\t\t\t\t--white-piano-key: #ebf3f4;\r\n\t\t\t\t\t--black-piano-key: #253353;\r\n\t\t\t\t\t--oscilloscope-line-L: #72dcfc;\r\n\t\t\t\t\t--oscilloscope-line-R: #304eff;\r\n\t\t\t\t\t--mod-title: #1b2fff;\r\n\t\t\t\t\t--plant-color: #0c46e4;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #183b65; \r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1f2c3d;\r\n\t\t\t\t\t--track-editor-bg-noise: #2e196d;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #212038;\r\n\t\t\t\t\t--track-editor-bg-mod: #066433;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #152b1f;\r\n\t\t\t\t\t--multiplicative-mod-slider: #1242a4;\r\n\t\t\t\t\t--overwriting-mod-slider: #2218db;\r\n\t\t\t\t\t--indicator-primary: #1698d3;\r\n\t\t\t\t\t--indicator-secondary: #1b478e;\r\n\t\t\t\t\t--select2-opt-group: #312f6d;\r\n\t\t\t\t\t--input-box-outline: #788b96;\r\n\t\t\t\t\t--mute-button-normal: #1d34f2;\r\n\t\t\t\t\t--mute-button-drum: #1107c6;\r\n\t\t\t\t\t--mute-button-mod: #06bad6;\r\n\t\t\t\t\t--mod-label-primary: #14383f;\r\n\t\t\t\t\t--mod-label-secondary-text: #1d7080;\r\n\t\t\t\t\t--mod-label-primary-text: #b7e9f2;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 190;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 2.5;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 80;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 50;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 190;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 2.5;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 76.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 190;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 2.5;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 90;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 30;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 190;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 2.5;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 200;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2.5;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 200;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2.5;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 200;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2.5;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 200;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2.5;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 140;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 90;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 55;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 140;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 100;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 85;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 140;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 95;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 50;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 140;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 100;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 90;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #53527b;\r\n\t\t\t\t\t--disabled-note-secondary:  #1c1b30;\r\n\t\t\t\t\t--track-font: \"Audiowide\";\r\n\t\t\t\t}\r\n\t\t\t\t@font-face {\r\n\t\t\t\t\tfont-family: \"Audiowide\";\r\n\t\t\t\t\tsrc:\r\n\t\t\t\t\t\turl(\"Audiowide-Regular.otf\") format(\"opentype\") tech(color-COLRv1),\r\n\t\t\t\t\t}\r\n\t\t\t\th1 {\r\n\t\t\t\t\tfont-family: 'Audiowide';\r\n\t\t\t\t\tfont-size: 1.9rem;\r\n\t\t\t\t\t}\r\n\t\t\t\th2 {\r\n\t\t\t\t\tfont-family: 'Audiowide';\r\n\t\t\t\t\tfont-size: 1.5rem;\r\n\t\t\t\t\t}\r\n\t\t\t\th3 {\r\n\t\t\t\t\tfont-family: 'Audiowide';\r\n\t\t\t\t\tfont-size: 1.35rem;\r\n\t\t\t\t\t}\r\n\t\t\t\th4 {\r\n\t\t\t\t\tfont-family: 'Audiowide';\r\n\t\t\t\t\tfont-size: 1.10rem;\r\n\t\t\t\t\t}\r\n\t\t\t\t@font-face {\r\n\t\t\t\t\tfont-family: \"Exo2\";\r\n\t\t\t\t\tsrc:\r\n\t\t\t\t\t\turl(\"Exo2-Medium.otf\") format(\"opentype\") tech(color-COLRv1),\r\n\t\t\t\t\t}\r\n\t\t\t\thtml {\r\n\t\t\t\t\tfont-family: 'Exo2';\r\n\t\t\t\t\t}\r\n\t\t\t\t.beepboxEditor .trackContainer {\r\n\t\t\t\t\t--track-font: 'Exo2' !important;\r\n\t\t\t\t\t}\r\n\t\t`,\r\n    };\r\n\r\n    public static readonly pageMargin: string = \"var(--page-margin)\";\r\n    public static readonly editorBackground: string = \"var(--editor-background)\";\r\n    public static readonly hoverPreview: string = \"var(--hover-preview)\";\r\n    public static readonly playhead: string = \"var(--playhead)\";\r\n    public static readonly primaryText: string = \"var(--primary-text)\";\r\n    public static readonly secondaryText: string = \"var(--secondary-text)\";\r\n    public static readonly invertedText: string = \"var(--inverted-text)\";\r\n    public static readonly textSelection: string = \"var(--text-selection)\";\r\n    public static readonly boxSelectionFill: string = \"var(--box-selection-fill)\";\r\n    public static readonly loopAccent: string = \"var(--loop-accent)\";\r\n    public static readonly linkAccent: string = \"var(--link-accent)\";\r\n    public static readonly uiWidgetBackground: string = \"var(--ui-widget-background)\";\r\n    public static readonly uiWidgetFocus: string = \"var(--ui-widget-focus)\";\r\n    public static readonly pitchBackground: string = \"var(--pitch-background)\";\r\n    public static readonly tonic: string = \"var(--tonic)\";\r\n    public static readonly fifthNote: string = \"var(--fifth-note)\";\r\n    public static readonly whitePianoKey: string = \"var(--white-piano-key)\";\r\n    public static readonly blackPianoKey: string = \"var(--black-piano-key)\";\r\n\tpublic static readonly oscilloscopeLineL: string = \"var(--oscilloscope-line-L)\";\r\n\tpublic static readonly oscilloscopeLineR: string = \"var(--oscilloscope-line-R)\";\r\n\tpublic static readonly modTitle: string = \"var(--mod-title)\";\r\n\tpublic static readonly plantColor: string = \"var(--plant-color)\"\r\n    public static readonly useColorFormula: string = \"var(--use-color-formula)\";\r\n    public static readonly pitchSecondaryChannelHue: string = \"var(--pitch-secondary-channel-hue)\";\r\n    public static readonly pitchSecondaryChannelHueScale: string = \"var(--pitch-secondary-channel-hue-scale)\";\r\n    public static readonly pitchSecondaryChannelSat: string = \"var(--pitch-secondary-channel-sat)\";\r\n    public static readonly pitchSecondaryChannelSatScale: string = \"var(--pitch-secondary-channel-sat-scale)\";\r\n    public static readonly pitchSecondaryChannelLum: string = \"var(--pitch-secondary-channel-lum)\";\r\n    public static readonly pitchSecondaryChannelLumScale: string = \"var(--pitch-secondary-channel-lum-scale)\";\r\n    public static readonly pitchPrimaryChannelHue: string = \"var(--pitch-primary-channel-hue)\";\r\n    public static readonly pitchPrimaryChannelHueScale: string = \"var(--pitch-primary-channel-hue-scale)\";\r\n    public static readonly pitchPrimaryChannelSat: string = \"var(--pitch-primary-channel-sat)\";\r\n    public static readonly pitchPrimaryChannelSatScale: string = \"var(--pitch-primary-channel-sat-scale)\";\r\n    public static readonly pitchPrimaryChannelLum: string = \"var(--pitch-primary-channel-lum)\";\r\n    public static readonly pitchPrimaryChannelLumScale: string = \"var(--pitch-primary-channel-lum-scale)\";\r\n    public static readonly pitchSecondaryNoteHue: string = \"var(--pitch-secondary-note-hue)\";\r\n    public static readonly pitchSecondaryNoteHueScale: string = \"var(--pitch-secondary-note-hue-scale)\";\r\n    public static readonly pitchSecondaryNoteSat: string = \"var(--pitch-secondary-note-sat)\";\r\n    public static readonly pitchSecondaryNoteSatScale: string = \"var(--pitch-secondary-note-sat-scale)\";\r\n    public static readonly pitchSecondaryNoteLum: string = \"var(--pitch-secondary-note-lum)\";\r\n    public static readonly pitchSecondaryNoteLumScale: string = \"var(--pitch-secondary-note-lum-scale)\";\r\n    public static readonly pitchPrimaryNoteHue: string = \"var(--pitch-primary-note-hue)\";\r\n    public static readonly pitchPrimaryNoteHueScale: string = \"var(--pitch-primary-note-hue-scale)\";\r\n    public static readonly pitchPrimaryNoteSat: string = \"var(--pitch-primary-note-sat)\";\r\n    public static readonly pitchPrimaryNoteSatScale: string = \"var(--pitch-primary-note-sat-scale)\";\r\n    public static readonly pitchPrimaryNoteLum: string = \"var(--pitch-primary-note-lum)\";\r\n    public static readonly pitchPrimaryNoteLumScale: string = \"var(--pitch-primary-note-lum-scale)\";\r\n    public static readonly modSecondaryChannelHue: string = \"var(--mod-secondary-channel-hue)\";\r\n    public static readonly modSecondaryChannelHueScale: string = \"var(--mod-secondary-channel-hue-scale)\";\r\n    public static readonly modSecondaryChannelSat: string = \"var(--mod-secondary-channel-sat)\";\r\n    public static readonly modSecondaryChannelSatScale: string = \"var(--mod-secondary-channel-sat-scale)\";\r\n    public static readonly modSecondaryChannelLum: string = \"var(--mod-secondary-channel-lum)\";\r\n    public static readonly modSecondaryChannelLumScale: string = \"var(--mod-secondary-channel-lum-scale)\";\r\n    public static readonly modPrimaryChannelHue: string = \"var(--mod-primary-channel-hue)\";\r\n    public static readonly modPrimaryChannelHueScale: string = \"var(--mod-primary-channel-hue-scale)\";\r\n    public static readonly modPrimaryChannelSat: string = \"var(--mod-primary-channel-sat)\";\r\n    public static readonly modPrimaryChannelSatScale: string = \"var(--mod-primary-channel-sat-scale)\";\r\n    public static readonly modPrimaryChannelLum: string = \"var(--mod-primary-channel-lum)\";\r\n    public static readonly modPrimaryChannelLumScale: string = \"var(--mod-primary-channel-lum-scale)\";\r\n    public static readonly modSecondaryNoteHue: string = \"var(--mod-secondary-note-hue)\";\r\n    public static readonly modSecondaryNoteHueScale: string = \"var(--mod-secondary-note-hue-scale)\";\r\n    public static readonly modSecondaryNoteSat: string = \"var(--mod-secondary-note-sat)\";\r\n    public static readonly modSecondaryNoteSatScale: string = \"var(--mod-secondary-note-sat-scale)\";\r\n    public static readonly modSecondaryNoteLum: string = \"var(--mod-secondary-note-lum)\";\r\n    public static readonly modSecondaryNoteLumScale: string = \"var(--mod-secondary-note-lum-scale)\";\r\n    public static readonly modPrimaryNoteHue: string = \"var(--mod-primary-note-hue)\";\r\n    public static readonly modPrimaryNoteHueScale: string = \"var(--mod-primary-note-hue-scale)\";\r\n    public static readonly modPrimaryNoteSat: string = \"var(--mod-primary-note-sat)\";\r\n    public static readonly modPrimaryNoteSatScale: string = \"var(--mod-primary-note-sat-scale)\";\r\n    public static readonly modPrimaryNoteLum: string = \"var(--mod-primary-note-lum)\";\r\n    public static readonly modPrimaryNoteLumScale: string = \"var(--mod-primary-note-lum-scale)\";\r\n    public static readonly noiseSecondaryChannelHue: string = \"var(--noise-secondary-channel-hue)\";\r\n    public static readonly noiseSecondaryChannelHueScale: string = \"var(--noise-secondary-channel-hue-scale)\";\r\n    public static readonly noiseSecondaryChannelSat: string = \"var(--noise-secondary-channel-sat)\";\r\n    public static readonly noiseSecondaryChannelSatScale: string = \"var(--noise-secondary-channel-sat-scale)\";\r\n    public static readonly noiseSecondaryChannelLum: string = \"var(--noise-secondary-channel-lum)\";\r\n    public static readonly noiseSecondaryChannelLumScale: string = \"var(--noise-secondary-channel-lum-scale)\";\r\n    public static readonly noisePrimaryChannelHue: string = \"var(--noise-primary-channel-hue)\";\r\n    public static readonly noisePrimaryChannelHueScale: string = \"var(--noise-primary-channel-hue-scale)\";\r\n    public static readonly noisePrimaryChannelSat: string = \"var(--noise-primary-channel-sat)\";\r\n    public static readonly noisePrimaryChannelSatScale: string = \"var(--noise-primary-channel-sat-scale)\";\r\n    public static readonly noisePrimaryChannelLum: string = \"var(--noise-primary-channel-lum)\";\r\n    public static readonly noisePrimaryChannelLumScale: string = \"var(--noise-primary-channel-lum-scale)\";\r\n    public static readonly noiseSecondaryNoteHue: string = \"var(--noise-secondary-note-hue)\";\r\n    public static readonly noiseSecondaryNoteHueScale: string = \"var(--noise-secondary-note-hue-scale)\";\r\n    public static readonly noiseSecondaryNoteSat: string = \"var(--noise-secondary-note-sat)\";\r\n    public static readonly noiseSecondaryNoteSatScale: string = \"var(--noise-secondary-note-sat-scale)\";\r\n    public static readonly noiseSecondaryNoteLum: string = \"var(--noise-secondary-note-lum)\";\r\n    public static readonly noiseSecondaryNoteLumScale: string = \"var(--noise-secondary-note-lum-scale)\";\r\n    public static readonly noisePrimaryNoteHue: string = \"var(--noise-primary-note-hue)\";\r\n    public static readonly noisePrimaryNoteHueScale: string = \"var(--noise-primary-note-hue-scale)\";\r\n    public static readonly noisePrimaryNoteSat: string = \"var(--noise-primary-note-sat)\";\r\n    public static readonly noisePrimaryNoteSatScale: string = \"var(--noise-primary-note-sat-scale)\";\r\n    public static readonly noisePrimaryNoteLum: string = \"var(--noise-primary-note-lum)\";\r\n    public static readonly noisePrimaryNoteLumScale: string = \"var(--noise-primary-note-lum-scale)\";\r\n    public static readonly trackEditorBgPitch: string = \"var(--track-editor-bg-pitch)\";\r\n    public static readonly trackEditorBgPitchDim: string = \"var(--track-editor-bg-pitch-dim)\";\r\n    public static readonly trackEditorBgNoise: string = \"var(--track-editor-bg-noise)\";\r\n    public static readonly trackEditorBgNoiseDim: string = \"var(--track-editor-bg-noise-dim)\";\r\n    public static readonly trackEditorBgMod: string = \"var(--track-editor-bg-mod)\";\r\n    public static readonly trackEditorBgModDim: string = \"var(--track-editor-bg-mod-dim)\";\r\n    public static readonly multiplicativeModSlider: string = \"var(--multiplicative-mod-slider)\";\r\n    public static readonly overwritingModSlider: string = \"var(--overwriting-mod-slider)\";\r\n    public static readonly indicatorPrimary: string = \"var(--indicator-primary)\";\r\n    public static readonly indicatorSecondary: string = \"var(--indicator-secondary)\";\r\n    public static readonly select2OptGroup: string = \"var(--select2-opt-group)\";\r\n    public static readonly inputBoxOutline: string = \"var(--input-box-outline)\";\r\n    public static readonly muteButtonNormal: string = \"var(--mute-button-normal)\";\r\n\tpublic static readonly muteButtonDrum: string = \"var(--mute-button-drum)\";\r\n    public static readonly muteButtonMod: string = \"var(--mute-button-mod)\";\r\n    public static readonly modLabelPrimary: string = \"var(--mod-label-primary)\";\r\n    public static readonly modLabelSecondaryText: string = \"var(--mod-label-secondary-text)\";\r\n    public static readonly modLabelPrimaryText: string = \"var(--mod-label-primary-text)\";\r\n    public static readonly disabledNotePrimary: string = \"var(--disabled-note-primary)\";\r\n    public static readonly disabledNoteSecondary: string = \"var(--disabled-note-secondary)\";\r\n\tpublic static c_pitchSecondaryChannelHue: number = 0;\r\n\tpublic static c_pitchSecondaryChannelHueScale: number = 0;\r\n\tpublic static c_pitchSecondaryChannelSat: number = 0;\r\n\tpublic static c_pitchSecondaryChannelSatScale: number = 0;\r\n\tpublic static c_pitchSecondaryChannelLum: number = 0;\r\n\tpublic static c_pitchSecondaryChannelLumScale: number = 0;\r\n\tpublic static c_pitchPrimaryChannelHue: number = 0;\r\n\tpublic static c_pitchPrimaryChannelHueScale: number = 0;\r\n\tpublic static c_pitchPrimaryChannelSat: number = 0;\r\n\tpublic static c_pitchPrimaryChannelSatScale: number = 0;\r\n\tpublic static c_pitchPrimaryChannelLum: number = 0;\r\n\tpublic static c_pitchPrimaryChannelLumScale: number = 0;\r\n\tpublic static c_pitchSecondaryNoteHue: number = 0;\r\n\tpublic static c_pitchSecondaryNoteHueScale: number = 0;\r\n\tpublic static c_pitchSecondaryNoteSat: number = 0;\r\n\tpublic static c_pitchSecondaryNoteSatScale: number = 0;\r\n\tpublic static c_pitchSecondaryNoteLum: number = 0;\r\n\tpublic static c_pitchSecondaryNoteLumScale: number = 0;\r\n\tpublic static c_pitchPrimaryNoteHue: number = 0;\r\n\tpublic static c_pitchPrimaryNoteHueScale: number = 0;\r\n\tpublic static c_pitchPrimaryNoteSat: number = 0;\r\n\tpublic static c_pitchPrimaryNoteSatScale: number = 0;\r\n\tpublic static c_pitchPrimaryNoteLum: number = 0;\r\n\tpublic static c_pitchPrimaryNoteLumScale: number = 0;\r\n\tpublic static c_modSecondaryChannelHue: number = 0;\r\n\tpublic static c_modSecondaryChannelHueScale: number = 0;\r\n\tpublic static c_modSecondaryChannelSat: number = 0;\r\n\tpublic static c_modSecondaryChannelSatScale: number = 0;\r\n\tpublic static c_modSecondaryChannelLum: number = 0;\r\n\tpublic static c_modSecondaryChannelLumScale: number = 0;\r\n\tpublic static c_modPrimaryChannelHue: number = 0;\r\n\tpublic static c_modPrimaryChannelHueScale: number = 0;\r\n\tpublic static c_modPrimaryChannelSat: number = 0;\r\n\tpublic static c_modPrimaryChannelSatScale: number = 0;\r\n\tpublic static c_modPrimaryChannelLum: number = 0;\r\n\tpublic static c_modPrimaryChannelLumScale: number = 0;\r\n\tpublic static c_modSecondaryNoteHue: number = 0;\r\n\tpublic static c_modSecondaryNoteHueScale: number = 0;\r\n\tpublic static c_modSecondaryNoteSat: number = 0;\r\n\tpublic static c_modSecondaryNoteSatScale: number = 0;\r\n\tpublic static c_modSecondaryNoteLum: number = 0;\r\n\tpublic static c_modSecondaryNoteLumScale: number = 0;\r\n\tpublic static c_modPrimaryNoteHue: number = 0;\r\n\tpublic static c_modPrimaryNoteHueScale: number = 0;\r\n\tpublic static c_modPrimaryNoteSat: number = 0;\r\n\tpublic static c_modPrimaryNoteSatScale: number = 0;\r\n\tpublic static c_modPrimaryNoteLum: number = 0;\r\n\tpublic static c_modPrimaryNoteLumScale: number = 0;\r\n\tpublic static c_noiseSecondaryChannelHue: number = 0;\r\n\tpublic static c_noiseSecondaryChannelHueScale: number = 0;\r\n\tpublic static c_noiseSecondaryChannelSat: number = 0;\r\n\tpublic static c_noiseSecondaryChannelSatScale: number = 0;\r\n\tpublic static c_noiseSecondaryChannelLum: number = 0;\r\n\tpublic static c_noiseSecondaryChannelLumScale: number = 0;\r\n\tpublic static c_noisePrimaryChannelHue: number = 0;\r\n\tpublic static c_noisePrimaryChannelHueScale: number = 0;\r\n\tpublic static c_noisePrimaryChannelSat: number = 0;\r\n\tpublic static c_noisePrimaryChannelSatScale: number = 0;\r\n\tpublic static c_noisePrimaryChannelLum: number = 0;\r\n\tpublic static c_noisePrimaryChannelLumScale: number = 0;\r\n\tpublic static c_noiseSecondaryNoteHue: number = 0;\r\n\tpublic static c_noiseSecondaryNoteHueScale: number = 0;\r\n\tpublic static c_noiseSecondaryNoteSat: number = 0;\r\n\tpublic static c_noiseSecondaryNoteSatScale: number = 0;\r\n\tpublic static c_noiseSecondaryNoteLum: number = 0;\r\n\tpublic static c_noiseSecondaryNoteLumScale: number = 0;\r\n\tpublic static c_noisePrimaryNoteHue: number = 0;\r\n\tpublic static c_noisePrimaryNoteHueScale: number = 0;\r\n\tpublic static c_noisePrimaryNoteSat: number = 0;\r\n\tpublic static c_noisePrimaryNoteSatScale: number = 0;\r\n\tpublic static c_noisePrimaryNoteLum: number = 0;\r\n\tpublic static c_noisePrimaryNoteLumScale: number = 0;\r\n\r\n\tpublic static c_invertedText: string = \"\";\r\n\tpublic static c_trackEditorBgNoiseDim: string = \"\";\r\n\tpublic static c_trackEditorBgNoise: string = \"\";\r\n\tpublic static c_trackEditorBgModDim: string = \"\";\r\n\tpublic static c_trackEditorBgMod: string = \"\";\r\n\tpublic static c_trackEditorBgPitchDim: string = \"\";\r\n\tpublic static c_trackEditorBgPitch: string = \"\";\r\n\r\n    public static readonly pitchChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n        {\r\n            name: \"pitch1\", // cyan\r\n            secondaryChannel: \"var(--pitch1-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch1-primary-channel)\",\r\n            secondaryNote: \"var(--pitch1-secondary-note)\",\r\n            primaryNote: \"var(--pitch1-primary-note)\",\r\n        }, {\r\n            name: \"pitch2\", // yellow\r\n            secondaryChannel: \"var(--pitch2-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch2-primary-channel)\",\r\n            secondaryNote: \"var(--pitch2-secondary-note)\",\r\n            primaryNote: \"var(--pitch2-primary-note)\",\r\n        }, {\r\n            name: \"pitch3\", // orange\r\n            secondaryChannel: \"var(--pitch3-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch3-primary-channel)\",\r\n            secondaryNote: \"var(--pitch3-secondary-note)\",\r\n            primaryNote: \"var(--pitch3-primary-note)\",\r\n        }, {\r\n            name: \"pitch4\", // green\r\n            secondaryChannel: \"var(--pitch4-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch4-primary-channel)\",\r\n            secondaryNote: \"var(--pitch4-secondary-note)\",\r\n            primaryNote: \"var(--pitch4-primary-note)\",\r\n        }, {\r\n            name: \"pitch5\", // magenta\r\n            secondaryChannel: \"var(--pitch5-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch5-primary-channel)\",\r\n            secondaryNote: \"var(--pitch5-secondary-note)\",\r\n            primaryNote: \"var(--pitch5-primary-note)\",\r\n        }, {\r\n            name: \"pitch6\", // blue\r\n            secondaryChannel: \"var(--pitch6-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch6-primary-channel)\",\r\n            secondaryNote: \"var(--pitch6-secondary-note)\",\r\n            primaryNote: \"var(--pitch6-primary-note)\",\r\n        }, {\r\n            name: \"pitch7\", // olive\r\n            secondaryChannel: \"var(--pitch7-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch7-primary-channel)\",\r\n            secondaryNote: \"var(--pitch7-secondary-note)\",\r\n            primaryNote: \"var(--pitch7-primary-note)\",\r\n        }, {\r\n            name: \"pitch8\", // red\r\n            secondaryChannel: \"var(--pitch8-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch8-primary-channel)\",\r\n            secondaryNote: \"var(--pitch8-secondary-note)\",\r\n            primaryNote: \"var(--pitch8-primary-note)\",\r\n        }, {\r\n            name: \"pitch9\", // teal\r\n            secondaryChannel: \"var(--pitch9-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch9-primary-channel)\",\r\n            secondaryNote: \"var(--pitch9-secondary-note)\",\r\n            primaryNote: \"var(--pitch9-primary-note)\",\r\n        }, {\r\n            name: \"pitch10\", // purple\r\n            secondaryChannel: \"var(--pitch10-secondary-channel)\",\r\n            primaryChannel: \"var(--pitch10-primary-channel)\",\r\n            secondaryNote: \"var(--pitch10-secondary-note)\",\r\n            primaryNote: \"var(--pitch10-primary-note)\",\r\n        },\r\n    ]);\r\n    public static readonly noiseChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n        {\r\n            name: \"noise1\", // gray\r\n            secondaryChannel: \"var(--noise1-secondary-channel)\",\r\n            primaryChannel: \"var(--noise1-primary-channel)\",\r\n            secondaryNote: \"var(--noise1-secondary-note)\",\r\n            primaryNote: \"var(--noise1-primary-note)\",\r\n        }, {\r\n            name: \"noise2\", // brown\r\n            secondaryChannel: \"var(--noise2-secondary-channel)\",\r\n            primaryChannel: \"var(--noise2-primary-channel)\",\r\n            secondaryNote: \"var(--noise2-secondary-note)\",\r\n            primaryNote: \"var(--noise2-primary-note)\",\r\n        }, {\r\n            name: \"noise3\", // azure\r\n            secondaryChannel: \"var(--noise3-secondary-channel)\",\r\n            primaryChannel: \"var(--noise3-primary-channel)\",\r\n            secondaryNote: \"var(--noise3-secondary-note)\",\r\n            primaryNote: \"var(--noise3-primary-note)\",\r\n        }, {\r\n            name: \"noise4\", // purple\r\n            secondaryChannel: \"var(--noise4-secondary-channel)\",\r\n            primaryChannel: \"var(--noise4-primary-channel)\",\r\n            secondaryNote: \"var(--noise4-secondary-note)\",\r\n            primaryNote: \"var(--noise4-primary-note)\",\r\n        }, {\r\n            name: \"noise5\", // sage\r\n            secondaryChannel: \"var(--noise5-secondary-channel)\",\r\n            primaryChannel: \"var(--noise5-primary-channel)\",\r\n            secondaryNote: \"var(--noise5-secondary-note)\",\r\n            primaryNote: \"var(--noise5-primary-note)\",\r\n        },\r\n    ]);\r\n    public static readonly modChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n        {\r\n            name: \"mod1\",\r\n            secondaryChannel: \"var(--mod1-secondary-channel)\",\r\n            primaryChannel: \"var(--mod1-primary-channel)\",\r\n            secondaryNote: \"var(--mod1-secondary-note)\",\r\n            primaryNote: \"var(--mod1-primary-note)\",\r\n        }, {\r\n            name: \"mod2\",\r\n            secondaryChannel: \"var(--mod2-secondary-channel)\",\r\n            primaryChannel: \"var(--mod2-primary-channel)\",\r\n            secondaryNote: \"var(--mod2-secondary-note)\",\r\n            primaryNote: \"var(--mod2-primary-note)\",\r\n        }, {\r\n            name: \"mod3\",\r\n            secondaryChannel: \"var(--mod3-secondary-channel)\",\r\n            primaryChannel: \"var(--mod3-primary-channel)\",\r\n            secondaryNote: \"var(--mod3-secondary-note)\",\r\n            primaryNote: \"var(--mod3-primary-note)\",\r\n        }, {\r\n            name: \"mod4\",\r\n            secondaryChannel: \"var(--mod4-secondary-channel)\",\r\n            primaryChannel: \"var(--mod4-primary-channel)\",\r\n            secondaryNote: \"var(--mod4-secondary-note)\",\r\n            primaryNote: \"var(--mod4-primary-note)\",\r\n        },\r\n    ]);\r\n\r\n    public static resetColors() {\r\n        this.colorLookup.clear();\r\n    }\r\n\r\n    // Same as below, but won't return var colors\r\n    public static getComputedChannelColor(song: Song, channel: number): ChannelColors {\r\n        if (!this.usesColorFormula) {\r\n            let base: ChannelColors = ColorConfig.getChannelColor(song, channel);\r\n            // Trim away \"var(...)\"\r\n            var regex = /\\(([^)]+)\\)/;\r\n            let newChannelSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\r\n            let newChannelPrimary: string = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\r\n            let newNoteSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\r\n            let newNotePrimary: string = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\r\n            return <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n        }\r\n        else {\r\n            return ColorConfig.getChannelColor(song, channel);\r\n        }\r\n    };\r\n\r\n    public static getChannelColor(song: Song, channel: number): ChannelColors {\r\n        if (!this.usesColorFormula) {\r\n            // Set colors, not defined by formula\r\n            if (channel < song.pitchChannelCount) {\r\n                return ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length];\r\n            } else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\r\n                return ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % ColorConfig.noiseChannels.length];\r\n            } else {\r\n                return ColorConfig.modChannels[(channel - song.pitchChannelCount - song.noiseChannelCount) % ColorConfig.modChannels.length];\r\n            }\r\n        }\r\n        else {\r\n            // Determine if color is cached\r\n            if (ColorConfig.colorLookup.has(channel)) {\r\n                return ColorConfig.colorLookup.get(channel) as ChannelColors;\r\n            }\r\n            else {\r\n                // Formulaic color definition\r\n                if (channel < song.pitchChannelCount) {\r\n                    // Pitch formula\r\n                    let newChannelSecondary: string = \"hsl(\" + ((this.c_pitchSecondaryChannelHue + (channel * this.c_pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_pitchSecondaryChannelSat * (1 - (this.c_pitchSecondaryChannelSatScale * Math.floor(channel / 9)))) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_pitchSecondaryChannelLum * (1 - (this.c_pitchSecondaryChannelLumScale * Math.floor(channel / 9)))) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_pitchPrimaryChannelHue + (channel * this.c_pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_pitchPrimaryChannelSat * (1 - (this.c_pitchPrimaryChannelSatScale * Math.floor(channel / 9)))) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_pitchPrimaryChannelLum * (1 - (this.c_pitchPrimaryChannelLumScale * Math.floor(channel / 9)))) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_pitchSecondaryNoteHue + (channel * this.c_pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_pitchSecondaryNoteSat * (1 - (this.c_pitchSecondaryNoteSatScale * Math.floor(channel / 9)))) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_pitchSecondaryNoteLum * (1 - (this.c_pitchSecondaryNoteLumScale * Math.floor(channel / 9)))) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_pitchPrimaryNoteHue + (channel * this.c_pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_pitchPrimaryNoteSat * (1 - (this.c_pitchPrimaryNoteSatScale * Math.floor(channel / 9)))) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_pitchPrimaryNoteLum * (1 - (this.c_pitchPrimaryNoteLumScale * Math.floor(channel / 9)))) + \"%)\";\r\n\r\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\r\n                    return newChannelColors;\r\n\r\n                }\r\n                else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\r\n                    // Noise formula\r\n                    let newChannelSecondary: string = \"hsl(\" + ((this.c_noiseSecondaryChannelHue + (((channel - song.pitchChannelCount) * this.c_noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_noiseSecondaryChannelSat + channel * this.c_noiseSecondaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_noiseSecondaryChannelLum + channel * this.c_noiseSecondaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_noisePrimaryChannelHue + (((channel - song.pitchChannelCount) * this.c_noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_noisePrimaryChannelSat + channel * this.c_noisePrimaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_noisePrimaryChannelLum + channel * this.c_noisePrimaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_noiseSecondaryNoteHue + (((channel - song.pitchChannelCount) * this.c_noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_noiseSecondaryNoteSat + channel * this.c_noiseSecondaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_noiseSecondaryNoteLum + channel * this.c_noiseSecondaryNoteLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_noisePrimaryNoteHue + (((channel - song.pitchChannelCount) * this.c_noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_noisePrimaryNoteSat + channel * this.c_noisePrimaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_noisePrimaryNoteLum + channel * this.c_noisePrimaryNoteLumScale) + \"%)\";\r\n\r\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\r\n                    return newChannelColors;\r\n                }\r\n                else {\r\n                    // Mod formula\r\n                    let newChannelSecondary: string = \"hsl(\" + ((this.c_modSecondaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_modSecondaryChannelSat + channel * this.c_modSecondaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_modSecondaryChannelLum + channel * this.c_modSecondaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_modPrimaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_modPrimaryChannelSat + channel * this.c_modPrimaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_modPrimaryChannelLum + channel * this.c_modPrimaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_modSecondaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_modSecondaryNoteSat + channel * this.c_modSecondaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_modSecondaryNoteLum + channel * this.c_modSecondaryNoteLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_modPrimaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 360) + \",\"\r\n\t\t\t\t\t\t+ (this.c_modPrimaryNoteSat + channel * this.c_modPrimaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_modPrimaryNoteLum + channel * this.c_modPrimaryNoteLumScale) + \"%)\";\r\n\r\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\r\n                    return newChannelColors;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static readonly _styleElement: HTMLStyleElement = document.head.appendChild(HTML.style({ type: \"text/css\" }));\r\n\r\n    public static setTheme(name: string): void {\r\n\t\tlet theme: string = this.themes[name];\r\n\t\tif (theme == undefined) theme = this.themes[\"jummbox classic\"];\r\n\t\tthis._styleElement.textContent = theme;\r\n\r\n        const themeColor = <HTMLMetaElement>document.querySelector(\"meta[name='theme-color']\");\r\n        if (themeColor != null) {\r\n            themeColor.setAttribute(\"content\", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));\r\n        }\r\n\r\n        this.resetColors();\r\n\t\tthis.usesColorFormula = (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"true\");\r\n\r\n\t\tthis.c_invertedText = getComputedStyle(this._styleElement).getPropertyValue(\"--inverted-text\");\r\n\t\tthis.c_trackEditorBgNoiseDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise-dim\");\r\n\t\tthis.c_trackEditorBgNoise = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise\");\r\n\t\tthis.c_trackEditorBgModDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod-dim\");\r\n\t\tthis.c_trackEditorBgMod = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod\");\r\n\t\tthis.c_trackEditorBgPitchDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch-dim\");\r\n\t\tthis.c_trackEditorBgPitch = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch\");\r\n\r\n\t\tif (this.usesColorFormula) {\r\n\t\t\tthis.c_pitchSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue\");\r\n\t\t\tthis.c_pitchSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue-scale\");\r\n\t\t\tthis.c_pitchSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat\");\r\n\t\t\tthis.c_pitchSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat-scale\");\r\n\t\t\tthis.c_pitchSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum\");\r\n\t\t\tthis.c_pitchSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum-scale\");\r\n\t\t\tthis.c_pitchPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue\");\r\n\t\t\tthis.c_pitchPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue-scale\");\r\n\t\t\tthis.c_pitchPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat\");\r\n\t\t\tthis.c_pitchPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat-scale\");\r\n\t\t\tthis.c_pitchPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum\");\r\n\t\t\tthis.c_pitchPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum-scale\");\r\n\t\t\tthis.c_pitchSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue\");\r\n\t\t\tthis.c_pitchSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue-scale\");\r\n\t\t\tthis.c_pitchSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat\");\r\n\t\t\tthis.c_pitchSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat-scale\");\r\n\t\t\tthis.c_pitchSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum\");\r\n\t\t\tthis.c_pitchSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum-scale\");\r\n\t\t\tthis.c_pitchPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue\");\r\n\t\t\tthis.c_pitchPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue-scale\");\r\n\t\t\tthis.c_pitchPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat\");\r\n\t\t\tthis.c_pitchPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat-scale\");\r\n\t\t\tthis.c_pitchPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum\");\r\n\t\t\tthis.c_pitchPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum-scale\");\r\n\r\n\t\t\tthis.c_noiseSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue\");\r\n\t\t\tthis.c_noiseSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue-scale\");\r\n\t\t\tthis.c_noiseSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat\");\r\n\t\t\tthis.c_noiseSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat-scale\");\r\n\t\t\tthis.c_noiseSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum\");\r\n\t\t\tthis.c_noiseSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum-scale\");\r\n\t\t\tthis.c_noisePrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue\");\r\n\t\t\tthis.c_noisePrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue-scale\");\r\n\t\t\tthis.c_noisePrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat\");\r\n\t\t\tthis.c_noisePrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat-scale\");\r\n\t\t\tthis.c_noisePrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum\");\r\n\t\t\tthis.c_noisePrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum-scale\");\r\n\t\t\tthis.c_noiseSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue\");\r\n\t\t\tthis.c_noiseSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue-scale\");\r\n\t\t\tthis.c_noiseSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat\");\r\n\t\t\tthis.c_noiseSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat-scale\");\r\n\t\t\tthis.c_noiseSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum\");\r\n\t\t\tthis.c_noiseSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum-scale\");\r\n\t\t\tthis.c_noisePrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue\");\r\n\t\t\tthis.c_noisePrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue-scale\");\r\n\t\t\tthis.c_noisePrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat\");\r\n\t\t\tthis.c_noisePrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat-scale\");\r\n\t\t\tthis.c_noisePrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum\");\r\n\t\t\tthis.c_noisePrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum-scale\");\r\n\r\n\t\t\tthis.c_modSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue\");\r\n\t\t\tthis.c_modSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue-scale\");\r\n\t\t\tthis.c_modSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat\");\r\n\t\t\tthis.c_modSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat-scale\");\r\n\t\t\tthis.c_modSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum\");\r\n\t\t\tthis.c_modSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum-scale\");\r\n\t\t\tthis.c_modPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue\");\r\n\t\t\tthis.c_modPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue-scale\");\r\n\t\t\tthis.c_modPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat\");\r\n\t\t\tthis.c_modPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat-scale\");\r\n\t\t\tthis.c_modPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum\");\r\n\t\t\tthis.c_modPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum-scale\");\r\n\t\t\tthis.c_modSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue\");\r\n\t\t\tthis.c_modSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue-scale\");\r\n\t\t\tthis.c_modSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat\");\r\n\t\t\tthis.c_modSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat-scale\");\r\n\t\t\tthis.c_modSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum\");\r\n\t\t\tthis.c_modSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum-scale\");\r\n\t\t\tthis.c_modPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue\");\r\n\t\t\tthis.c_modPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue-scale\");\r\n\t\t\tthis.c_modPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat\");\r\n\t\t\tthis.c_modPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat-scale\");\r\n\t\t\tthis.c_modPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum\");\r\n\t\t\tthis.c_modPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum-scale\");\r\n\r\n        }\r\n    }\r\n\r\n    public static getComputed(name: string): string {\r\n        return getComputedStyle(this._styleElement).getPropertyValue(name);\r\n    }\r\n}\r\n","\r\n// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\r\n\r\nexport interface PresetCategory extends BeepBoxOption {\r\n    readonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n    readonly isNoise?: boolean;\r\n    readonly isMod?: boolean;\r\n    readonly generalMidi?: boolean;\r\n    readonly midiProgram?: number;\r\n    readonly midiSubharmonicOctaves?: number;\r\n    readonly customType?: InstrumentType;\r\n    readonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n    public static readonly version: string = \"V2\"; // Not using patch versions in display right now, maybe someday.\r\n    public static readonly versionDisplayName: string = \"Midbox TESTING \" + EditorConfig.version;\r\n\r\n    public static readonly releaseNotesURL: string = \"https://jummbus.bitbucket.io/patch_notes/\" + EditorConfig.version + \".html\";\r\n\r\n    public static readonly isOnMac: boolean = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\r\n    public static readonly ctrlSymbol: string = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\r\n    public static readonly ctrlName: string = EditorConfig.isOnMac ? \"command\" : \"control\";\r\n\r\n    public static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n        {\r\n            name: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"chip wave\", customType: InstrumentType.chip },\r\n                { name: \"FM (expert)\", customType: InstrumentType.fm },\r\n                { name: \"basic noise\", customType: InstrumentType.noise },\r\n                { name: \"spectrum\", customType: InstrumentType.spectrum },\r\n                { name: \"drumset\", customType: InstrumentType.drumset },\r\n                { name: \"harmonics\", customType: InstrumentType.harmonics },\r\n                { name: \"pulse width\", customType: InstrumentType.pwm },\r\n                { name: \"picked string\", customType: InstrumentType.pickedString },\r\n                { name: \"custom chip\", customType: InstrumentType.customChipWave },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Midbox Misc Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"broken music box\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":210.22,\"linearGain\":0.5},{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":500,\"linearGain\":1.4142}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":210.22,\"linearGain\":0.5},{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":500,\"linearGain\":1.4142}],\"effects\":[\"transition type\",\"chord type\",\"vibrato\",\"note filter\",\"bitcrusher\",\"chorus\",\"echo\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"chord\":\"strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"vibrato\":\"custom\",\"vibratoDepth\":0.72,\"vibratoDelay\":19,\"vibratoSpeed\":30,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":4756.83,\"linearGain\":0.0884}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":4756.83,\"linearGain\":0.0884}],\"bitcrusherOctave\":3,\"bitcrusherQuantization\":29,\"panDelay\":10,\"chorus\":29,\"echoSustain\":43,\"echoDelayBeats\":1,\"reverb\":23,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"wave\":\"rounded\",\"unison\":\"hyper\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0}]}},\r\n                { name: \"enhanced synth kick\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"peak\",\"cutoffHz\":594.6,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":19027.31,\"linearGain\":4},{\"type\":\"high-pass\",\"cutoffHz\":62.5,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":0.25}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":594.6,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":19027.31,\"linearGain\":4},{\"type\":\"high-pass\",\"cutoffHz\":62.5,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":0.25}],\"effects\":[\"pitch shift\",\"vibrato\",\"note filter\",\"distortion\",\"bitcrusher\",\"chorus\"],\"pitchShiftSemitones\":24,\"vibrato\":\"custom\",\"vibratoDepth\":2,\"vibratoDelay\":0,\"vibratoSpeed\":30,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"peak\",\"cutoffHz\":148.65,\"linearGain\":11.3137}],\"noteSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":148.65,\"linearGain\":11.3137}],\"distortion\":71,\"aliases\":false,\"bitcrusherOctave\":4,\"bitcrusherQuantization\":57,\"panDelay\":10,\"chorus\":29,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1 2←(3 4)\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":13,\"operators\":[{\"frequency\":\"20×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"16×\",\"amplitude\":8,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"operatorFrequency\",\"envelope\":\"twang 1\",\"index\":0},{\"target\":\"noteVolume\",\"envelope\":\"twang 3\"},{\"target\":\"feedbackAmplitude\",\"envelope\":\"twang 1\"},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0},{\"target\":\"noteVolume\",\"envelope\":\"modbox blip\"},{\"target\":\"operatorFrequency\",\"envelope\":\"modbox blip\",\"index\":1},{\"target\":\"operatorAmplitude\",\"envelope\":\"twang 1\",\"index\":1},{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"pitchShift\",\"envelope\":\"twang 2\"}]}},\r\n                { name: \"scratch string\", midiProgram:80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":0.1768},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":0.25}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"vibrato\",\"note filter\",\"distortion\",\"echo\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"vibrato\":\"light\",\"vibratoDepth\":0.15,\"vibratoDelay\":0,\"vibratoSpeed\":10,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":1189.21,\"linearGain\":0.3536}],\"distortion\":100,\"aliases\":false,\"panDelay\":10,\"echoSustain\":29,\"echoDelayBeats\":0.75,\"reverb\":29,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"algorithm\":\"1←2←(3 4)\",\"feedbackType\":\"1→4\",\"feedbackAmplitude\":3,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"~2×\",\"amplitude\":8,\"waveform\":\"triangle\",\"pulseWidth\":6},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"~2×\",\"amplitude\":3,\"waveform\":\"sawtooth\",\"pulseWidth\":1}],\"envelopes\":[{\"target\":\"operatorAmplitude\",\"envelope\":\"swell 1\",\"index\":3},{\"target\":\"operatorAmplitude\",\"envelope\":\"tremolo1\",\"index\":1}]}},\r\n                { name: \"xylophone saw\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":210.22,\"linearGain\":1},{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.1768}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"chord type\",\"pitch shift\",\"vibrato\",\"bitcrusher\",\"chorus\",\"echo\"],\"chord\":\"medium strum\",\"fastTwoNoteArp\":true,\"arpeggioSpeed\":12,\"pitchShiftSemitones\":24,\"vibrato\":\"light\",\"vibratoDepth\":0.15,\"vibratoDelay\":0,\"vibratoSpeed\":10,\"vibratoType\":0,\"bitcrusherOctave\":5.5,\"bitcrusherQuantization\":14,\"panDelay\":10,\"chorus\":29,\"echoSustain\":43,\"echoDelayBeats\":0.75,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"wave\":\"heavy saw\",\"unison\":\"broke\",\"envelopes\":[{\"target\":\"noteVolume\",\"envelope\":\"twang 2\"}]}},\r\n                { name: \"bow bass\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":210.22,\"linearGain\":1},{\"type\":\"low-pass\",\"cutoffHz\":11313.71,\"linearGain\":0.5},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.1768}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"chord type\",\"pitch shift\",\"vibrato\",\"note filter\",\"bitcrusher\",\"chorus\",\"echo\"],\"chord\":\"medium strum\",\"fastTwoNoteArp\":true,\"arpeggioSpeed\":12,\"pitchShiftSemitones\":24,\"vibrato\":\"custom\",\"vibratoDepth\":0.36,\"vibratoDelay\":0,\"vibratoSpeed\":30,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":2.8284}],\"bitcrusherOctave\":6,\"bitcrusherQuantization\":29,\"panDelay\":10,\"chorus\":29,\"echoSustain\":43,\"echoDelayBeats\":0.75,\"fadeInSeconds\":0,\"fadeOutTicks\":6,\"wave\":\"1/12 pulse\",\"unison\":\"deep shift\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 2\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 2\",\"index\":1}]}},\r\n                { name: \"depths\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":1681.79,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":4000,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":840.9,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":62.5,\"linearGain\":2}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"chord type\",\"pitch shift\",\"detune\",\"vibrato\",\"note filter\",\"bitcrusher\",\"chorus\",\"reverb\"],\"transition\":\"continue in pattern\",\"clicklessTransition\":false,\"chord\":\"build up\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"pitchShiftSemitones\":0,\"detuneCents\":-52,\"vibrato\":\"custom\",\"vibratoDepth\":0.56,\"vibratoDelay\":0,\"vibratoSpeed\":1,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.0884}],\"bitcrusherOctave\":3,\"bitcrusherQuantization\":29,\"panDelay\":10,\"chorus\":100,\"reverb\":71,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1←2←3←4\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":0,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"pulse width\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":8,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":3,\"waveform\":\"ramp\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"tremolo4\",\"index\":0}]}},\r\n                { name: \"disco vocal lead\", midiProgram: 80, settings: {\"type\":\"Picked String\",\"eqFilter\":[],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"pitch shift\",\"note filter\",\"distortion\",\"chorus\",\"echo\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"pitchShiftSemitones\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.0884},{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":4}],\"distortion\":100,\"aliases\":false,\"panDelay\":10,\"chorus\":100,\"echoSustain\":29,\"echoDelayBeats\":1,\"reverb\":19,\"fadeInSeconds\":0,\"fadeOutTicks\":6,\"harmonics\":[43,71,100,0,0,100,0,57,0,0,0,86,29,0,0,0,0,14,0,14,14,0,0,0,0,43,0,0],\"unison\":\"piano\",\"stringSustain\":93,\"envelopes\":[]}},\r\n                { name: \"blessed piano\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":4}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":4}],\"effects\":[\"chord type\",\"vibrato\",\"note filter\",\"distortion\",\"bitcrusher\",\"chorus\"],\"chord\":\"medium strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"vibrato\":\"custom\",\"vibratoDepth\":0.48,\"vibratoDelay\":11,\"vibratoSpeed\":16,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.0884}],\"distortion\":14,\"aliases\":false,\"bitcrusherOctave\":4,\"bitcrusherQuantization\":29,\"panDelay\":10,\"chorus\":86,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"wave\":\"triangle\",\"unison\":\"energetic\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0}]}},\r\n                { name: \"sawtooth pluck\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":16000,\"linearGain\":0.25}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"chord type\",\"pitch shift\",\"vibrato\",\"note filter\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"chord\":\"1/3 strum\",\"fastTwoNoteArp\":true,\"arpeggioSpeed\":9,\"pitchShiftSemitones\":24,\"vibrato\":\"light\",\"vibratoDepth\":0.15,\"vibratoDelay\":0,\"vibratoSpeed\":10,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":11313.71,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":4000,\"linearGain\":11.3137},{\"type\":\"peak\",\"cutoffHz\":8000,\"linearGain\":4}],\"panDelay\":10,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"wave\":\"sawtooth\",\"unison\":\"broke\",\"envelopes\":[{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"swell 1\",\"index\":2}]}},\r\n                { name: \"desolated piano\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":11313.71,\"linearGain\":0.5}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"pitch shift\",\"vibrato\",\"bitcrusher\",\"chorus\",\"reverb\"],\"pitchShiftSemitones\":24,\"vibrato\":\"custom\",\"vibratoDepth\":0.6,\"vibratoDelay\":1,\"vibratoSpeed\":18,\"vibratoType\":0,\"bitcrusherOctave\":3.5,\"bitcrusherQuantization\":0,\"panDelay\":10,\"chorus\":29,\"reverb\":26,\"fadeInSeconds\":0,\"fadeOutTicks\":48,\"algorithm\":\"1←(2 3 4)\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":7,\"operators\":[{\"frequency\":\"~1×\",\"amplitude\":15,\"waveform\":\"triangle\",\"pulseWidth\":5},{\"frequency\":\"3×\",\"amplitude\":3,\"waveform\":\"trapezoid\",\"pulseWidth\":5},{\"frequency\":\"8×\",\"amplitude\":4,\"waveform\":\"triangle\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"vibratoDepth\",\"envelope\":\"twang 2\"},{\"target\":\"feedbackAmplitude\",\"envelope\":\"twang 2\"},{\"target\":\"operatorAmplitude\",\"envelope\":\"decay 1\",\"index\":1},{\"target\":\"operatorAmplitude\",\"envelope\":\"twang 1\",\"index\":2},{\"target\":\"operatorAmplitude\",\"envelope\":\"twang 1\",\"index\":2}]}},\r\n                { name: \"distorted guitar 1\", midiProgram: 80, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":4000,\"linearGain\":0.5}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":4000,\"linearGain\":0.5}],\"effects\":[\"note filter\",\"distortion\",\"chorus\",\"echo\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":297.3,\"linearGain\":2},{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":2},{\"type\":\"peak\",\"cutoffHz\":840.9,\"linearGain\":11.3137},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":0.1768}],\"noteSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":297.3,\"linearGain\":2},{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":2},{\"type\":\"peak\",\"cutoffHz\":840.9,\"linearGain\":11.3137},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":0.1768}],\"distortion\":71,\"aliases\":false,\"panDelay\":10,\"chorus\":14,\"echoSustain\":43,\"echoDelayBeats\":1,\"reverb\":39,\"fadeInSeconds\":0,\"fadeOutTicks\":6,\"harmonics\":[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],\"unison\":\"none\",\"stringSustain\":71,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"note size\",\"index\":1}]}},\r\n                { name: \"distorted guitar 2\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":353.55,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":1189.21,\"linearGain\":0.125},{\"type\":\"peak\",\"cutoffHz\":3363.59,\"linearGain\":0.5}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":353.55,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":1189.21,\"linearGain\":0.125},{\"type\":\"peak\",\"cutoffHz\":3363.59,\"linearGain\":0.5}],\"effects\":[\"note filter\",\"bitcrusher\",\"chorus\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"peak\",\"cutoffHz\":210.22,\"linearGain\":4},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":1.4142},{\"type\":\"peak\",\"cutoffHz\":420.45,\"linearGain\":11.3137},{\"type\":\"low-pass\",\"cutoffHz\":2000,\"linearGain\":2.8284}],\"noteSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":210.22,\"linearGain\":4},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":1.4142},{\"type\":\"peak\",\"cutoffHz\":420.45,\"linearGain\":11.3137},{\"type\":\"low-pass\",\"cutoffHz\":2000,\"linearGain\":2.8284}],\"bitcrusherOctave\":6.5,\"bitcrusherQuantization\":71,\"panDelay\":10,\"chorus\":43,\"reverb\":52,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"algorithm\":\"(1 2 3)←4\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":2,\"operators\":[{\"frequency\":\"2×\",\"amplitude\":14,\"waveform\":\"trapezoid\",\"pulseWidth\":5},{\"frequency\":\"~2×\",\"amplitude\":13,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"4×\",\"amplitude\":10,\"waveform\":\"pulse width\",\"pulseWidth\":5},{\"frequency\":\"8×\",\"amplitude\":3,\"waveform\":\"triangle\",\"pulseWidth\":5}],\"envelopes\":[]}},\r\n                { name: \"distorted guitar 3\", midiProgram: 80, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":13454.34,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.5},{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":500,\"linearGain\":4}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":13454.34,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.5},{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":500,\"linearGain\":4}],\"effects\":[\"pitch shift\",\"note filter\",\"distortion\",\"chorus\",\"reverb\"],\"pitchShiftSemitones\":24,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":840.9,\"linearGain\":0.7071},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":0.3536}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":840.9,\"linearGain\":0.7071},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":0.3536}],\"distortion\":100,\"aliases\":false,\"panDelay\":10,\"chorus\":14,\"reverb\":6,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"harmonics\":[100,0,86,0,43,0,100,43,0,29,0,100,0,0,0,71,43,0,0,0,14,0,0,0,0,0,0,29],\"unison\":\"none\",\"stringSustain\":0,\"envelopes\":[{\"target\":\"noteVolume\",\"envelope\":\"twang 1\"}]}},\r\n                { name: \"high pad\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1},{\"type\":\"high-pass\",\"cutoffHz\":88.39,\"linearGain\":8}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1},{\"type\":\"high-pass\",\"cutoffHz\":88.39,\"linearGain\":8}],\"effects\":[\"pitch shift\",\"vibrato\",\"note filter\",\"chorus\"],\"pitchShiftSemitones\":12,\"vibrato\":\"custom\",\"vibratoDepth\":0.28,\"vibratoDelay\":19,\"vibratoSpeed\":30,\"vibratoType\":0,\"noteFilterType\":true,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":19027.31,\"linearGain\":0.7071}],\"noteSubFilters1\":[{\"type\":\"low-pass\",\"cutoffHz\":19027.31,\"linearGain\":0.7071}],\"panDelay\":10,\"chorus\":86,\"fadeInSeconds\":0.0125,\"fadeOutTicks\":24,\"algorithm\":\"1←3 2←4\",\"feedbackType\":\"1⟲ 2⟲ 3⟲\",\"feedbackAmplitude\":11,\"operators\":[{\"frequency\":\"4×\",\"amplitude\":13,\"waveform\":\"pulse width\",\"pulseWidth\":3},{\"frequency\":\"0.12×\",\"amplitude\":13,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"3×\",\"amplitude\":1,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"4×\",\"amplitude\":8,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"swell 1\"},{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"swell 1\"},{\"target\":\"operatorAmplitude\",\"envelope\":\"modbox blip\",\"index\":2},{\"target\":\"feedbackAmplitude\",\"envelope\":\"twang 1\"},{\"target\":\"feedbackAmplitude\",\"envelope\":\"twang 1\"},{\"target\":\"feedbackAmplitude\",\"envelope\":\"twang 1\"},{\"target\":\"operatorAmplitude\",\"envelope\":\"twang 1\",\"index\":1},{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"swell 1\"}]}},\r\n                { name: \"magical pulse\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":4000,\"linearGain\":0.0884}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"pitch shift\",\"vibrato\",\"chorus\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"pitchShiftSemitones\":24,\"vibrato\":\"custom\",\"vibratoDepth\":0.56,\"vibratoDelay\":27,\"vibratoSpeed\":14,\"vibratoType\":0,\"panDelay\":10,\"chorus\":57,\"fadeInSeconds\":0,\"fadeOutTicks\":6,\"wave\":\"sawtooth\",\"unison\":\"hyper\",\"envelopes\":[{\"target\":\"noteVolume\",\"envelope\":\"swell 3\"}]}},\r\n                { name: \"distorted lead\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"distortion\",\"bitcrusher\",\"chorus\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":2,\"bitcrusherQuantization\":0,\"panDelay\":10,\"chorus\":100,\"fadeInSeconds\":0,\"fadeOutTicks\":6,\"algorithm\":\"1←(2 3 4)\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":0,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":11,\"waveform\":\"trapezoid\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":7,\"waveform\":\"pulse width\",\"pulseWidth\":7},{\"frequency\":\"1×\",\"amplitude\":8,\"waveform\":\"ramp\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":5,\"waveform\":\"triangle\",\"pulseWidth\":5}],\"envelopes\":[]}},\r\n                { name: \"FM punch bass\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":1414.21,\"linearGain\":2.8284}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":1414.21,\"linearGain\":2.8284}],\"effects\":[\"note filter\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":1414.21,\"linearGain\":2.8284}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":1414.21,\"linearGain\":2.8284}],\"panDelay\":10,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1←(2 3 4)\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":4,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":7,\"waveform\":\"pulse width\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":4,\"waveform\":\"sine\",\"pulseWidth\":7},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"ramp\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"triangle\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0},{\"target\":\"feedbackAmplitude\",\"envelope\":\"punch\"},{\"target\":\"noteVolume\",\"envelope\":\"twang 2\"}]}},\r\n                { name: \"rough glistening piano\", midiProgram: 80, settings : {\"type\":\"harmonics\",\"eqFilter\":[{\"type\":\"peak\",\"cutoffHz\":210.22,\"linearGain\":1.4142},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.1768}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":210.22,\"linearGain\":1.4142},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.1768}],\"effects\":[\"chord type\",\"note filter\",\"chorus\",\"echo\",\"reverb\"],\"chord\":\"strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.5}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.5}],\"panDelay\":10,\"chorus\":29,\"echoSustain\":43,\"echoDelayBeats\":1,\"reverb\":23,\"fadeInSeconds\":0,\"fadeOutTicks\":48,\"harmonics\":[100,71,43,29,29,14,14,43,0,43,0,57,71,0,71,43,0,0,57,0,57,0,71,0,71,0,57,0],\"unison\":\"honky tonk\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 2\",\"index\":0}]}},\r\n                { name: \"soft glistening piano\", midiProgram: 80, settings: {\"type\":\"harmonics\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":210.22,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.3536}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":210.22,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.3536}],\"effects\":[\"chord type\",\"detune\",\"note filter\",\"chorus\",\"reverb\"],\"chord\":\"medium strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"detuneCents\":-20,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.5}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":5656.85,\"linearGain\":0.5}],\"panDelay\":10,\"chorus\":29,\"reverb\":97,\"fadeInSeconds\":0.135,\"fadeOutTicks\":48,\"harmonics\":[100,0,0,29,29,14,14,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,43,14,0,0,0,0],\"unison\":\"honky tonk\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 2\",\"index\":0}]}},\r\n                { name: \"jingle bells\", midiProgram: 80, settings: {\"type\":\"harmonics\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":707.11,\"linearGain\":2}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":707.11,\"linearGain\":2}],\"effects\":[\"chord type\",\"pitch shift\",\"detune\",\"note filter\",\"bitcrusher\",\"chorus\",\"echo\",\"reverb\"],\"chord\":\"1/3 strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"pitchShiftSemitones\":24,\"detuneCents\":8,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":16000,\"linearGain\":2},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":0.5},{\"type\":\"peak\",\"cutoffHz\":2378.41,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":2.8284}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":16000,\"linearGain\":2},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":0.5},{\"type\":\"peak\",\"cutoffHz\":2378.41,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":2.8284}],\"bitcrusherOctave\":5,\"bitcrusherQuantization\":0,\"panDelay\":10,\"chorus\":29,\"echoSustain\":57,\"echoDelayBeats\":1.667,\"reverb\":77,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"harmonics\":[100,29,57,71,0,0,0,0,0,0,0,14,43,14,0,0,0,0,0,0,14,0,14,14,0,0,0,0],\"unison\":\"none\",\"envelopes\":[{\"target\":\"noteVolume\",\"envelope\":\"twang 2\"}]}},\r\n                { name: \"odd snare\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[],\"effects\":[\"pitch shift\",\"detune\",\"note filter\",\"distortion\",\"bitcrusher\",\"chorus\",\"echo\",\"reverb\"],\"pitchShiftSemitones\":24,\"detuneCents\":600,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":176.78,\"linearGain\":2.8284}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":176.78,\"linearGain\":2.8284}],\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":4.5,\"bitcrusherQuantization\":43,\"panDelay\":10,\"chorus\":29,\"echoSustain\":43,\"echoDelayBeats\":0.083,\"reverb\":3,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"algorithm\":\"(1 2)←3←4\",\"feedbackType\":\"2⟲ 3⟲ 4⟲\",\"feedbackAmplitude\":15,\"operators\":[{\"frequency\":\"16×\",\"amplitude\":15,\"waveform\":\"pulse width\",\"pulseWidth\":5},{\"frequency\":\"32×\",\"amplitude\":12,\"waveform\":\"sine\",\"pulseWidth\":9},{\"frequency\":\"2×\",\"amplitude\":11,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"13×\",\"amplitude\":6,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"operatorAmplitude\",\"envelope\":\"twang 3\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0},{\"target\":\"operatorFrequency\",\"envelope\":\"modbox click\",\"index\":2},{\"target\":\"pitchShift\",\"envelope\":\"twang 3\"},{\"target\":\"operatorFrequency\",\"envelope\":\"twang 1\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"swell 1\",\"index\":1},{\"target\":\"operatorFrequency\",\"envelope\":\"twang 1\",\"index\":0},{\"target\":\"operatorFrequency\",\"envelope\":\"twang 1\",\"index\":0}]}},\r\n                { name: \"otherworldly kick\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[],\"effects\":[\"pitch shift\",\"vibrato\",\"distortion\",\"bitcrusher\",\"chorus\"],\"pitchShiftSemitones\":12,\"vibrato\":\"custom\",\"vibratoDepth\":0.92,\"vibratoDelay\":18,\"vibratoSpeed\":30,\"vibratoType\":0,\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":6,\"bitcrusherQuantization\":57,\"panDelay\":10,\"chorus\":14,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"algorithm\":\"1←(2 3 4)\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":0,\"operators\":[{\"frequency\":\"20×\",\"amplitude\":15,\"waveform\":\"triangle\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"operatorFrequency\",\"envelope\":\"twang 1\",\"index\":0},{\"target\":\"noteVolume\",\"envelope\":\"twang 3\"},{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"operatorFrequency\",\"envelope\":\"twang 1\",\"index\":0}]}},\r\n                { name: \"bit-crushed piano\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":1.4142},{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":500,\"linearGain\":1.4142}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":1.4142},{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":500,\"linearGain\":1.4142}],\"effects\":[\"transition type\",\"chord type\",\"pitch shift\",\"vibrato\",\"note filter\",\"bitcrusher\",\"chorus\",\"echo\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"chord\":\"strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"pitchShiftSemitones\":24,\"vibrato\":\"custom\",\"vibratoDepth\":0.72,\"vibratoDelay\":19,\"vibratoSpeed\":30,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":4756.83,\"linearGain\":0.0884}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":4756.83,\"linearGain\":0.0884}],\"bitcrusherOctave\":3,\"bitcrusherQuantization\":29,\"panDelay\":10,\"chorus\":29,\"echoSustain\":29,\"echoDelayBeats\":0.75,\"reverb\":23,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"wave\":\"triangle\",\"unison\":\"broke\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0}]}},\r\n                { name: \"boop pad\", midiProgram: 80, settings: {\"type\":\"custom chip\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":11313.71,\"linearGain\":0.1768}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":11313.71,\"linearGain\":0.1768}],\"effects\":[\"transition type\",\"note filter\",\"reverb\"],\"transition\":\"interrupt\",\"clicklessTransition\":false,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":16000,\"linearGain\":0.0884}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":16000,\"linearGain\":0.0884}],\"panDelay\":10,\"reverb\":48,\"fadeInSeconds\":0,\"fadeOutTicks\":96,\"wave\":\"square\",\"unison\":\"broke\",\"customChipWave\":{\"0\":-1,\"1\":1,\"2\":-1,\"3\":-4,\"4\":-6,\"5\":-8,\"6\":-11,\"7\":-12,\"8\":-15,\"9\":-16,\"10\":-18,\"11\":-19,\"12\":-21,\"13\":-22,\"14\":-24,\"15\":-24,\"16\":-24,\"17\":-24,\"18\":-23,\"19\":-22,\"20\":-21,\"21\":-19,\"22\":-17,\"23\":-16,\"24\":-14,\"25\":-13,\"26\":-10,\"27\":-8,\"28\":-6,\"29\":-4,\"30\":-2,\"31\":-1,\"32\":2,\"33\":3,\"34\":5,\"35\":7,\"36\":10,\"37\":12,\"38\":14,\"39\":16,\"40\":18,\"41\":19,\"42\":20,\"43\":21,\"44\":23,\"45\":23,\"46\":24,\"47\":24,\"48\":24,\"49\":24,\"50\":24,\"51\":24,\"52\":24,\"53\":24,\"54\":24,\"55\":24,\"56\":24,\"57\":24,\"58\":23,\"59\":22,\"60\":21,\"61\":19,\"62\":16,\"63\":14},\"customChipWaveIntegral\":{\"0\":0,\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0,\"21\":0,\"22\":0,\"23\":0,\"24\":0,\"25\":0,\"26\":0,\"27\":0,\"28\":0,\"29\":0,\"30\":0,\"31\":0,\"32\":0,\"33\":0,\"34\":0,\"35\":0,\"36\":0,\"37\":0,\"38\":0,\"39\":0,\"40\":0,\"41\":0,\"42\":0,\"43\":0,\"44\":0,\"45\":0,\"46\":0,\"47\":0,\"48\":0,\"49\":0,\"50\":0,\"51\":0,\"52\":0,\"53\":0,\"54\":0,\"55\":0,\"56\":0,\"57\":0,\"58\":0,\"59\":0,\"60\":0,\"61\":0,\"62\":0,\"63\":0,\"64\":0},\"envelopes\":[{\"target\":\"noteVolume\",\"envelope\":\"twang 2\"},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 2\",\"index\":0}]}},\r\n                { name: \"spectrum pad\", midiProgram: 80, settings: {\"type\":\"spectrum\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2196.8,\"linearGain\":1}],\"eqFilterType\":true,\"eqSimpleCut\":6,\"eqSimplePeak\":2,\"eqSubFilters1\":[],\"effects\":[\"vibrato\",\"distortion\",\"bitcrusher\",\"reverb\"],\"vibrato\":\"delayed\",\"vibratoDepth\":0.3,\"vibratoDelay\":18.5,\"vibratoSpeed\":10,\"vibratoType\":0,\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":4.5,\"bitcrusherQuantization\":43,\"panDelay\":10,\"reverb\":26,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"spectrum\":[100,0,0,0,0,0,0,71,0,0,0,57,0,0,57,0,43,0,43,0,0,29,0,29,0,14,14,14,0,0],\"envelopes\":[]}},\r\n                { name: \"3, 2, 1, GO! pulse\", midiProgram: 80, settings: {\"type\":\"PWM\",\"eqFilter\":[{\"type\":\"peak\",\"cutoffHz\":2828.43,\"linearGain\":2}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"pitch shift\",\"detune\",\"chorus\",\"echo\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"pitchShiftSemitones\":16,\"detuneCents\":196,\"panDelay\":10,\"chorus\":14,\"echoSustain\":29,\"echoDelayBeats\":0.5,\"reverb\":13,\"fadeInSeconds\":0,\"fadeOutTicks\":48,\"pulseWidth\":42,\"envelopes\":[{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"},{\"target\":\"pitchShift\",\"envelope\":\"twang 1\"}]}},\r\n                { name: \"ambient pulse 1\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":250,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":353.55,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.3536},{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.25}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":250,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":353.55,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.3536},{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.25}],\"effects\":[\"note filter\",\"echo\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":2.8284}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":2.8284}],\"panDelay\":10,\"echoSustain\":29,\"echoDelayBeats\":1.333,\"reverb\":35,\"fadeInSeconds\":0,\"fadeOutTicks\":96,\"algorithm\":\"(1 2)←(3 4)\",\"feedbackType\":\"4⟲\",\"feedbackAmplitude\":9,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":13,\"waveform\":\"triangle\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":13,\"waveform\":\"pulse width\",\"pulseWidth\":6},{\"frequency\":\"3×\",\"amplitude\":0,\"waveform\":\"triangle\",\"pulseWidth\":5},{\"frequency\":\"~2×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"operatorAmplitude\",\"envelope\":\"flare 1\",\"index\":2}]}},\r\n                { name: \"saturn pad\", midiProgram: 80, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2828.43,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":1.4142}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":2828.43,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":707.11,\"linearGain\":1.4142}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2828.43,\"linearGain\":0.5}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":2828.43,\"linearGain\":0.5}],\"panDelay\":10,\"reverb\":26,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"harmonics\":[0,100,100,100,0,0,0,0,43,43,0,86,0,100,0,29,0,0,0,0,71,57,0,0,86,0,0,43],\"unison\":\"shimmer\",\"stringSustain\":93,\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"tremolo3\"},{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"twang 3\"}]}},\r\n                { name: \"build-up pad\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":250,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":353.55,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.3536}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":250,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":353.55,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.3536}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":16000,\"linearGain\":0.3536}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":16000,\"linearGain\":0.3536}],\"panDelay\":10,\"reverb\":32,\"fadeInSeconds\":0,\"fadeOutTicks\":96,\"algorithm\":\"(1 2)←(3 4)\",\"feedbackType\":\"4⟲\",\"feedbackAmplitude\":9,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":13,\"waveform\":\"triangle\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":13,\"waveform\":\"pulse width\",\"pulseWidth\":6},{\"frequency\":\"3×\",\"amplitude\":0,\"waveform\":\"triangle\",\"pulseWidth\":5},{\"frequency\":\"~2×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"operatorAmplitude\",\"envelope\":\"flare 1\",\"index\":2},{\"target\":\"noteFilterFreq\",\"envelope\":\"slow swell\",\"index\":0}]}},\r\n                { name: \"ambient pulse 2\", midiProgram: 80, settings: {\"type\":\"harmonics\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":1189.21,\"linearGain\":0.7071},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":1.4142},{\"type\":\"peak\",\"cutoffHz\":420.45,\"linearGain\":8}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":1189.21,\"linearGain\":0.7071},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":1.4142},{\"type\":\"peak\",\"cutoffHz\":420.45,\"linearGain\":8}],\"effects\":[\"chord type\",\"note filter\",\"reverb\"],\"chord\":\"medium strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":1681.79,\"linearGain\":1}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":1681.79,\"linearGain\":1}],\"panDelay\":10,\"reverb\":32,\"fadeInSeconds\":0,\"fadeOutTicks\":72,\"harmonics\":[57,57,71,57,43,43,43,71,43,43,43,57,71,86,100,86,57,57,43,43,43,57,43,29,43,57,57,43],\"unison\":\"vary\",\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"tremolo5\"}]}},\r\n                { name: \"hyper synth saw\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"peak\",\"cutoffHz\":19027.31,\"linearGain\":11.3137},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":1.4142}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":19027.31,\"linearGain\":11.3137},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":1.4142}],\"effects\":[\"chord type\",\"detune\",\"vibrato\",\"distortion\",\"chorus\",\"echo\",\"reverb\"],\"chord\":\"medium strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"detuneCents\":16,\"vibrato\":\"delayed\",\"vibratoDepth\":0.3,\"vibratoDelay\":18.5,\"vibratoSpeed\":10,\"vibratoType\":0,\"distortion\":14,\"aliases\":false,\"panDelay\":10,\"chorus\":86,\"echoSustain\":43,\"echoDelayBeats\":1,\"reverb\":58,\"fadeInSeconds\":0,\"fadeOutTicks\":96,\"wave\":\"sawtooth\",\"unison\":\"hyper\",\"envelopes\":[]}},\r\n                { name: \"mechanical blip\", midiProgram: 80, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":19027.31,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.3536}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":19027.31,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.3536}],\"effects\":[\"transition type\",\"detune\",\"note filter\",\"bitcrusher\",\"chorus\",\"echo\",\"reverb\"],\"transition\":\"continue in pattern\",\"clicklessTransition\":false,\"detuneCents\":16,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":500,\"linearGain\":4},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":11.3137}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":500,\"linearGain\":4},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":11.3137}],\"noteSubFilters1\":[{\"type\":\"low-pass\",\"cutoffHz\":19027.31,\"linearGain\":0.7071}],\"bitcrusherOctave\":4.5,\"bitcrusherQuantization\":43,\"panDelay\":10,\"chorus\":43,\"echoSustain\":57,\"echoDelayBeats\":1.5,\"reverb\":23,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"wave\":\"rounded\",\"unison\":\"none\",\"envelopes\":[]}},\r\n                { name: \"another piano\", midiProgram: 80, settings: {\"type\":\"PWM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":11313.71,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":9513.66,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":2378.41,\"linearGain\":2},{\"type\":\"peak\",\"cutoffHz\":3363.59,\"linearGain\":1.4142},{\"type\":\"high-pass\",\"cutoffHz\":88.39,\"linearGain\":1}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":11313.71,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":9513.66,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":2378.41,\"linearGain\":2},{\"type\":\"peak\",\"cutoffHz\":3363.59,\"linearGain\":1.4142},{\"type\":\"high-pass\",\"cutoffHz\":88.39,\"linearGain\":1}],\"effects\":[\"detune\",\"note filter\",\"reverb\"],\"detuneCents\":16,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.125}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.125}],\"panDelay\":10,\"reverb\":26,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"pulseWidth\":44,\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"punch\"},{\"target\":\"noteVolume\",\"envelope\":\"twang 2\"},{\"target\":\"unison\",\"envelope\":\"twang 1\"},{\"target\":\"unison\",\"envelope\":\"twang 1\"},{\"target\":\"unison\",\"envelope\":\"twang 1\"},{\"target\":\"unison\",\"envelope\":\"twang 1\"},{\"target\":\"unison\",\"envelope\":\"twang 1\"}]}},\r\n                \r\n            ])\r\n        },\r\n        {\r\n            name: \"Midbox Dubstep Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"dubstep bwayyyy\", midiProgram: 80, settings: {\"type\":\"PWM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":297.3,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":594.6,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":420.45,\"linearGain\":0.5}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"vibrato\",\"note filter\",\"distortion\",\"chorus\",\"reverb\"],\"transition\":\"continue\",\"clicklessTransition\":false,\"vibrato\":\"custom\",\"vibratoDepth\":0.45,\"vibratoDelay\":23,\"vibratoSpeed\":26,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2000,\"linearGain\":11.3137}],\"distortion\":100,\"aliases\":false,\"panDelay\":10,\"chorus\":71,\"reverb\":32,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"pulseWidth\":30,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"swell 3\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"swell 2\",\"index\":0}]}},\r\n                { name: \"dubstep bass hum\", midiProgram: 80, settings: {\"type\":\"PWM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":297.3,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":1189.21,\"linearGain\":2},{\"type\":\"peak\",\"cutoffHz\":420.45,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":105.11,\"linearGain\":0.5},{\"type\":\"peak\",\"cutoffHz\":16000,\"linearGain\":2}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"pitch shift\",\"vibrato\",\"note filter\",\"distortion\",\"bitcrusher\",\"chorus\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"pitchShiftSemitones\":0,\"vibrato\":\"custom\",\"vibratoDepth\":0.45,\"vibratoDelay\":23,\"vibratoSpeed\":26,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":1414.21,\"linearGain\":11.3137}],\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":2,\"bitcrusherQuantization\":14,\"panDelay\":10,\"chorus\":43,\"reverb\":32,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"pulseWidth\":10,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"flare 1\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"flare 3\",\"index\":0}]}},\r\n                { name: \"dubstep yaa\", midiProgram: 80, settings: {\"type\":\"PWM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":297.3,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":1189.21,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":594.6,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":105.11,\"linearGain\":0.3536}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"effects\":[\"transition type\",\"pitch shift\",\"vibrato\",\"note filter\",\"bitcrusher\",\"chorus\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"pitchShiftSemitones\":0,\"vibrato\":\"custom\",\"vibratoDepth\":0.45,\"vibratoDelay\":23,\"vibratoSpeed\":26,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":1414.21,\"linearGain\":11.3137}],\"bitcrusherOctave\":2.5,\"bitcrusherQuantization\":29,\"panDelay\":10,\"chorus\":86,\"reverb\":10,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"pulseWidth\":8,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"swell 1\",\"index\":0}]}},\r\n                { name: \"dubstep yeoww\", midiProgram: 80, settings: {\"type\":\"PWM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":297.3,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":1189.21,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":594.6,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":105.11,\"linearGain\":0.3536}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":9513.66,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":297.3,\"linearGain\":1},{\"type\":\"peak\",\"cutoffHz\":1189.21,\"linearGain\":0.3536},{\"type\":\"peak\",\"cutoffHz\":594.6,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":105.11,\"linearGain\":0.3536}],\"effects\":[\"transition type\",\"chord type\",\"vibrato\",\"note filter\",\"distortion\",\"bitcrusher\",\"chorus\",\"reverb\"],\"transition\":\"continue in pattern\",\"clicklessTransition\":false,\"chord\":\"slow strum\",\"fastTwoNoteArp\":false,\"arpeggioSpeed\":12,\"vibrato\":\"custom\",\"vibratoDepth\":0.44,\"vibratoDelay\":23,\"vibratoSpeed\":26,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":11.3137}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":11.3137}],\"distortion\":100,\"aliases\":false,\"bitcrusherOctave\":4,\"bitcrusherQuantization\":0,\"panDelay\":10,\"chorus\":86,\"reverb\":35,\"fadeInSeconds\":0,\"fadeOutTicks\":24,\"pulseWidth\":40,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 3\",\"index\":0},{\"target\":\"pulseWidth\",\"envelope\":\"tremolo6\"}]}},\r\n                { name: \"dubstep lead\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"peak\",\"cutoffHz\":1189.21,\"linearGain\":0.0884}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":1189.21,\"linearGain\":0.0884}],\"effects\":[\"transition type\",\"pitch shift\",\"note filter\",\"distortion\",\"bitcrusher\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"pitchShiftSemitones\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"peak\",\"cutoffHz\":594.6,\"linearGain\":5.6569},{\"type\":\"low-pass\",\"cutoffHz\":1000,\"linearGain\":2}],\"noteSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":594.6,\"linearGain\":5.6569},{\"type\":\"low-pass\",\"cutoffHz\":1000,\"linearGain\":2}],\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":6.5,\"bitcrusherQuantization\":86,\"panDelay\":10,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1←(2 3 4)\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":15,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"note size\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"note size\",\"index\":1}]}},\r\n                { name: \"dubstep dyaii\", midiProgram: 80, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.5},{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":0.5},{\"type\":\"peak\",\"cutoffHz\":11313.71,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":1000,\"linearGain\":0.0884}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.5},{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":0.5},{\"type\":\"peak\",\"cutoffHz\":11313.71,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":1000,\"linearGain\":0.0884}],\"effects\":[\"transition type\",\"vibrato\",\"note filter\",\"distortion\",\"bitcrusher\",\"chorus\",\"reverb\"],\"transition\":\"slide\",\"clicklessTransition\":false,\"vibrato\":\"custom\",\"vibratoDepth\":0.44,\"vibratoDelay\":23,\"vibratoSpeed\":26,\"vibratoType\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":707.11,\"linearGain\":8},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":11.3137}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":707.11,\"linearGain\":8},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":11.3137}],\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":3,\"bitcrusherQuantization\":71,\"panDelay\":10,\"chorus\":71,\"reverb\":32,\"fadeInSeconds\":0,\"fadeOutTicks\":12,\"harmonics\":[100,0,71,86,0,0,100,86,86,71,57,57,29,14,57,71,0,0,0,0,0,0,0,0,0,0,0,0],\"unison\":\"none\",\"stringSustain\":100,\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"note size\"},{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"twang 3\"}]}},\r\n                { name: \"dubstep alarm\", midiProgram: 80, settings: {\"type\":\"FM\",\"eqFilter\":[{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.5}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":0.0884},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.5}],\"effects\":[\"transition type\",\"pitch shift\",\"note filter\",\"distortion\",\"bitcrusher\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"pitchShiftSemitones\":0,\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":1414.21,\"linearGain\":11.3137}],\"noteSubFilters0\":[{\"type\":\"high-pass\",\"cutoffHz\":1414.21,\"linearGain\":11.3137}],\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":6.5,\"bitcrusherQuantization\":100,\"panDelay\":10,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1←(2 3 4)\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":6,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"note size\",\"index\":0}]}},\r\n\r\n            ])\r\n        },\r\n        {\r\n            name:\"Midbox Noise Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"hollow retro riser\", midiProgram: 80, isNoise: true, settings: {\"type\":\"noise\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":16000,\"linearGain\":0.3536}],\"eqFilterType\":true,\"eqSimpleCut\":8,\"eqSimplePeak\":0,\"eqSubFilters1\":[],\"effects\":[\"bitcrusher\",\"chorus\",\"echo\",\"reverb\"],\"bitcrusherOctave\":4,\"bitcrusherQuantization\":43,\"panDelay\":10,\"chorus\":29,\"echoSustain\":57,\"echoDelayBeats\":0.5,\"reverb\":29,\"fadeInSeconds\":0,\"fadeOutTicks\":-3,\"wave\":\"hollow\",\"envelopes\":[]}},\r\n\r\n            ])\r\n        },\r\n        {\r\n            name: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\r\n                { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\r\n                { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\r\n                { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n                { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\r\n                { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\r\n                { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\r\n                { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\r\n                { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n                { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n                { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n                { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n                { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n                { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\r\n\r\n            ])\r\n        },\r\n        {\r\n            name: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\r\n                { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\r\n                { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\r\n                { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\r\n                { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\r\n                { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\r\n\r\n            ])\r\n        },\r\n        {\r\n            name: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n                { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\r\n                { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\r\n                { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n                { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n                { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n                { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n                { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\r\n                { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n                { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n                { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n                { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n                { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n                { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n                { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n                { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n                { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n                { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n                { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n                { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\r\n                { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\r\n                { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\r\n                { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\r\n                { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\r\n                { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\r\n                { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n                { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n                { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n                { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n                { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n                { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n                { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\r\n                { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n                { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n                { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n                { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n                { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n                { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\r\n                { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n                { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\r\n                { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\r\n                { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n                { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n                { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n                { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n                { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n                { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n                { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n                { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n                { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n                { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n                { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n                { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\r\n                { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n                { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n                { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n                { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\r\n                { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\r\n                { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\r\n                { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\r\n                { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\r\n                { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\r\n                { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\r\n                { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n                { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\r\n                { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\r\n                { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\r\n                { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n                { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n                { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n                { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n                { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n                { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n                { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\r\n                { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n                { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n                { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\r\n                { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\r\n                { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n                { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n                { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n                { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\r\n                { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\r\n                { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\r\n                { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n                { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n                { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n            ])\r\n        },\r\n    ]);\r\n\r\n    public static valueToPreset(presetValue: number): Preset | null {\r\n        const categoryIndex: number = presetValue >> 6;\r\n        const presetIndex: number = presetValue & 0x3F;\r\n        return EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\r\n    }\r\n\r\n    public static midiProgramToPresetValue(program: number): number | null {\r\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n                const preset: Preset = category.presets[presetIndex];\r\n                if (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static nameToPresetValue(presetName: string): number | null {\r\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n                const preset: Preset = category.presets[presetIndex];\r\n                if (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\t\t\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\t\t\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\t\tconst real0: number = realArray[startIndex ];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\t\tconst imag0: number = imagArray[startIndex ];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\t\t\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\t\r\n\treverseIndexBits(array, fullArrayLength);\r\n\t\t\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\t\tarray[index ] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\t\t\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\t\tarray[index ] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\t\t\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\t\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\t\tarray[index ] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\t\t\r\n\treverseIndexBits(array, fullArrayLength);\r\n}","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}","/*\r\nThis file contains code to compute digital audio filter coefficients based on\r\nthe desired type, cutoff frequency, and other parameters. You can use these\r\ncoefficients to apply the filter to audio samples. It also contains code to\r\nanalyze these filters, which is useful for graphically displaying their effects.\r\n\r\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\r\nfilters, because older output samples contribute feedback to newer output\r\nsamples and thus contribute to all future samples, although typically filters\r\nare design to reduce the contribution of older samples over time.\r\n\r\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\r\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\r\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\r\nvolume of the signal at all but induce phase changes above the cutoff frequency.\r\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\r\nbut raise or lower the volume at that frequency. \r\n\r\nThe number of old samples used in the filter determines the \"order\" of the\r\nfilter. First-order filters generally have shallower slopes, and second-order\r\nfilters generally have steeper slopes and can be configured to \"resonate\",\r\nmeaning they have a louder peak at the cutoff frequency. This file contains\r\nfirst-order filters and second-order filters, meaning one or two older samples\r\nare involved, as well as the current input sample.\r\n\r\nThe class FilterCoefficients is defined lower in this file. You can use it to\r\nset up a first order filter like this:\r\n\r\n\tconst cutoffRadiansPerSample: number = 2 * Math.PI * cutoffHz / sampleRate;\r\n\tconst filter: FilterCoefficients = new FilterCoefficients();\r\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\r\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\r\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\r\n\tconst a: number[] = filter.a;\r\n\t// input sample coefficients are conventionally called b0, b1, etc\r\n\tconst b: number[] = filter.b;\r\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\r\n\tconst x: number[] = [0, 0, 0];\r\n\t// filter output samples, y[0] will be computed by the filter based on input\r\n\t// samples and older output samples.\r\n\tconst y: number[] = [0, 0, 0];\r\n\r\nThen to apply the first-order filter to samples inside a loop, using the current\r\ninput sample (x[0]) as well as previous input and output samples, do this:\r\n\r\n\t// Compute the next output sample y[0]:\r\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\r\n\t// Remember the input and output samples for next time:\r\n\tx[1] = x[0];\r\n\ty[1] = y[0];\r\n\r\n2nd order filters are similar, but have more parameters and require more old\r\nsamples:\r\n\r\n\t// Compute the next output sample y[0]:\r\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\r\n\t// Remember the input and output samples for next time:\r\n\tx[2] = x[1];\r\n\tx[1] = x[0];\r\n\ty[2] = y[1];\r\n\ty[1] = y[0];\r\n\r\nYou can compose multiple filters into a higher order filter, although doing so\r\nreduces the numerical stability of the filter:\r\n\r\n\tfilter3.combination(filter1, filter2);\r\n\t// filter3.order will equal: filter1.order + filter2.order\r\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\r\n\r\nThis file also contains a class called FrequencyResponse. You can use it to\r\ndetermine how much gain or attenuation a filter would apply to sounds at a\r\nspecific input frequency, as well as the phase offset:\r\n\r\n\tconst inputRadians: number = 2 * Math.PI * cutoffHz / sampleRate;\r\n\tconst response: FrequencyResponse = new FrequencyResponse();\r\n\tresponse.analyze(filter, inputRadians);\r\n\tconst gainResponse = response.magnitude();\r\n\tconst phaseResponse = response.angle();\r\n\r\nThat's basically all you need to know to use this code, but I'll also explain\r\nhow the analysis works.\r\n\r\nA first-order digital IIR filter is ordinarily implemented in a form like this:\r\n\r\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\r\n\r\nIf we adopt standard naming conventions for audio filters, this same code would\r\ninstead look like:\r\n\r\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\r\n\ty0 = b0*x0 + b1*x1 - a1*y1;\r\n\r\nLeaving behind the world of code for a moment and entering the world of algebra,\r\nwe can rewrite this equation by moving all the output terms to the left side,\r\nand we can add a coefficient to the y0 term called a0 (which is typically\r\nnormalized to 1.0, which is why I didn't bother including it until now):\r\n\r\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\r\n\r\nThis is known as the symmetrical form of the filter, and it will help us analyze\r\nthe impact of the filter on an input audio signal. Here's a lesson that helped\r\nme understand the symmetrical form:\r\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\r\n\r\nThe end of that lesson introduces a concept called the \"delay operator\" which\r\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\r\nwhen you multiply them. For example:\r\n\r\n\tx0 * z^-1 = x1\r\n\r\nThe lesson doesn't explain how it actually works. Audio signals aren't always\r\npredictable, which means that you generally can't do math on a single sample to\r\ncompute what the previous sample was. However, some audio signals ARE\r\npredictable, such as pure sine waves. Fortunately, all audio signals can be\r\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\r\ntime, and use it to analyze the filter's impact on waves at that frequency. In\r\npractice, this tells us what the filter will do to unpredictable input samples\r\nthat contain a partial sine wave at that frequency.\r\n\r\nTechnically, you can't just use a single sine wave sample to determine the\r\nprevious sine wave sample, because each possible value is passed going upwards\r\nand downwards once per period and the direction is ambigous. This is where we\r\nneed to move into the complex number domain, where the real and imaginary\r\ncomponents can provide enough information to compute the previous position on\r\nthe input signal. So now instead of talking about sine waves, we're talking\r\nabout waves where the imaginary component is a sine wave and the real component\r\nis a cosine wave at the same frequency. Together, they trace around a unit\r\ncircle in the complex domain, and each sample is just a consistent rotation\r\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\r\nthis same rotation applied in reverse, and it can be computed as:\r\n\r\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\r\n\r\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\r\nexplaining what that means is probably beyond the scope of this documentation\r\naside from noting that a complex number on the unit circle represents a 2D\r\nrotation that you can apply via multiplication.\r\n\r\nNow we can rewrite the symmetrical form using the delay operator and algebra:\r\n\r\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\r\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\r\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\r\nThat last equation expresses the relationship between the input and output\r\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\r\npoint, the specific values of the input and output samples don't even matter!\r\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\r\n\r\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\r\nIf you plug in actual filter coefficients and express the delay operators as\r\ncomplex numbers with the appropriate trigonometry functions, the transfer\r\nfunction can be computed and produces a complex number that represents the\r\nrelationship between the input and output signals, whose magnitude represents\r\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\r\nrepresents how much phase shift is applied by the filter to signals at that\r\nfrequency.\r\n\r\n(Note that in order to compute the transfer function, you'll need to do\r\nsomething about the complex number in the denominator. It turns out you can turn\r\nthe denominator into a real number by multiplying both the numerator and\r\ndenominator by the complex conjugate of the denominator, which is just the\r\ndenominator with the imaginary component negated.)\r\n\r\nFinally, I'll list some of the links that helped me understand filters and\r\nprovided some of the algorithms I that use here.\r\n\r\nHere's where I found accurate 2nd order low-pass and high-pass digital filters:\r\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\r\n\r\nThis page is how I found a link to the cookbook article above. It claims these\r\nfilters are Butterworth filters:\r\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\r\n\r\nI found the first-order digital Butterworth filter coefficients at:\r\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\r\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\r\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\r\n\r\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\r\nhttps://www.drpetter.se/project_sfxr.html\r\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\r\nnearly identical, but when closer to the nyquist frequency the simpler filters\r\ncreate extra resonance.\r\n*/\r\n\r\nexport class FilterCoefficients {\r\n\tpublic readonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\r\n\tpublic readonly b: number[] = [1.0]; // input coefficients\r\n\tpublic order: number = 0;\r\n\t\r\n\tpublic linearGain0thOrder(linearGain: number): void {\r\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\r\n\t\tthis.b[0] = linearGain;\r\n\t\tthis.order = 0;\r\n\t}\r\n\t\r\n\tpublic lowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\r\n\t\t// First-order Butterworth low-pass filter according to:\r\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\t\t// A butterworth filter is one where the amplitude response is equal to:\r\n\t\t// 1 / √(1 + (freq / cutoffFreq)^(2 * order))\r\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst a0: number = 1.0 + g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[1] = this.b[0] = 1 / a0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic lowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\r\n\t\t// The output of this filter is nearly identical to the 1st order\r\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\r\n\t\t// then the output is the same as the input, and if the cutoff is higher\r\n\t\t// than that, then the output actually resonates at high frequencies\r\n\t\t// instead of attenuating.\r\n\t\t// I'm guessing this filter was converted from analog to digital using\r\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\r\n\t\t// method. The difference is that the bilinear transform warps\r\n\t\t// frequencies so that the lowpass response of zero at analogue ∞hz maps\r\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\r\n\t\t// preserves the frequency of the filter response but also adds the\r\n\t\t// reflected response from above the nyquist frequency.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tthis.a[1] = g - 1.0;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 0.0;\r\n\t\t/*\r\n\t\t// Alternatively:\r\n\t\tconst g: number = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\r\n\t\tconst a0: number = g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[0] = 1.0 / a0;\r\n\t\tthis.b[1] = 0.0 / a0;\r\n\t\t*/\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic highPass1stOrderButterworth(cornerRadiansPerSample: number): void {\r\n\t\t// First-order Butterworth high-pass filter according to:\r\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst a0: number = 1.0 + g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[0] = g / a0;\r\n\t\tthis.b[1] = -g / a0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t/*\r\n\tpublic highPass1stOrderSimplified(cornerRadiansPerSample: number): void {\r\n\t\t// The output of this filter is nearly identical to the 1st order\r\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\r\n\t\t// appoaches the nyquist.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tthis.a[1] = g - 1.0;\r\n\t\tthis.b[0] = 1.0;\r\n\t\tthis.b[1] = -1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t*/\r\n\tpublic highShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\r\n\t\t// I had trouble figuring this one out because I couldn't find any\r\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\r\n\t\t// and I could narrow down a couple of them based on the desired gain at\r\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\r\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\r\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\r\n\t\t// Obviously I don't fully understand the bilinear transform yet!\r\n\t\tconst tan: number = Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst sqrtGain: number = Math.sqrt(shelfLinearGain);\r\n\t\tconst g: number = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\r\n\t\tconst a0: number = 1.0;\r\n\t\tthis.a[1] = g / a0;\r\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\r\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\r\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\t/*\r\n\t// I haven't found a practical use for this version of the all pass filter.\r\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\r\n\tpublic allPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\r\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = -g;\r\n\t\tthis.b[1] = -1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t*/\r\n\t\r\n\tpublic allPass1stOrderFractionalDelay(delay: number) {\r\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\r\n\t\t// differently and for a different purpose! Useful for interpolating\r\n\t\t// between samples in a delay line.\r\n\t\tconst g: number = (1.0 - delay) / (1.0 + delay);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic lowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\t// This is Butterworth if peakLinearGain=1/√2 according to:\r\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\r\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\r\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\r\n\t\t// although it gets distorted near the nyquist.\r\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\r\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\r\n\t\tconst a0: number = 1.0 + alpha;\r\n\t\tthis.a[1] = -2.0*cos / a0;\r\n\t\tthis.a[2] = (1 - alpha) / a0;\r\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\r\n\t\tthis.b[1] = (1 - cos) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t\r\n\tpublic lowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\t// This filter is adapted from the one in the SFXR source code:\r\n\t\t// https://www.drpetter.se/project_sfxr.html\r\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\r\n\t\t// above, except it resonates too much when the cutoff appoaches the\r\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\r\n\t\t// nyquist/3, then the output is the same as the input.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\r\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\r\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\r\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\r\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\r\n\t\tthis.b[0] = g*g;\r\n\t\tthis.b[1] = 0;\r\n\t\tthis.b[2] = 0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t\r\n\tpublic highPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\r\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\r\n\t\tconst a0: number = 1.0 + alpha;\r\n\t\tthis.a[1] = -2.0*cos / a0;\r\n\t\tthis.a[2] = (1.0 - alpha) / a0;\r\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\r\n\t\tthis.b[1] = -(1.0 + cos) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t/*\r\n\tpublic highPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\r\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\r\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\r\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\r\n\t\tthis.b[0] = 1.0;\r\n\t\tthis.b[1] = -2.0;\r\n\t\tthis.b[2] = 1.0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t*/\r\n\tpublic peak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\r\n\t\tconst sqrtGain: number = Math.sqrt(peakLinearGain);\r\n\t\tconst bandWidth: number = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\r\n\t\t//const bandWidth: number = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\r\n\t\tconst alpha: number = Math.tan(bandWidth * 0.5);\r\n\t\tconst a0: number = 1.0 + alpha / sqrtGain;\r\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\r\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\r\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\r\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t/*\r\n\t// Create a higher order filter by combining two lower order filters.\r\n\t// However, making high order filters in this manner results in instability.\r\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\r\n\tpublic combination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\r\n\t\tthis.order = filter1.order + filter2.order;\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = 0.0;\r\n\t\t\tthis.b[i] = 0.0;\r\n\t\t}\r\n\t\tfor (let i: number = 0; i <= filter1.order; i++) {\r\n\t\t\tfor (let j: number = 0; j <= filter2.order; j++) {\r\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\r\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic scaledDifference(other: FilterCoefficients, scale: number): void {\r\n\t\tif (other.order != this.order) throw new Error();\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\r\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic copy(other: FilterCoefficients): void {\r\n\t\tthis.order = other.order;\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = other.a[i];\r\n\t\t\tthis.b[i] = other.b[i];\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\nexport class FrequencyResponse {\r\n\tpublic real: number = 0.0;\r\n\tpublic imag: number = 0.0;\r\n\tpublic denom: number = 1.0;\r\n\t\r\n\tpublic analyze(filter: FilterCoefficients, radiansPerSample: number): void {\r\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\r\n\t}\r\n\t\r\n\tpublic analyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\r\n\t\tconst a: number[] = filter.a;\r\n\t\tconst b: number[] = filter.b;\r\n\t\tconst realZ1: number = real;\r\n\t\tconst imagZ1: number = -imag;\r\n\t\tlet realNum: number = b[0] + b[1] * realZ1;\r\n\t\tlet imagNum: number = b[1] * imagZ1;\r\n\t\tlet realDenom: number = 1.0 + a[1] * realZ1;\r\n\t\tlet imagDenom: number = a[1] * imagZ1;\r\n\t\tlet realZ: number = realZ1;\r\n\t\tlet imagZ: number = imagZ1;\r\n\t\tfor (let i: number = 2; i <= filter.order; i++) {\r\n\t\t\tconst realTemp: number = realZ * realZ1 - imagZ * imagZ1;\r\n\t\t\tconst imagTemp: number = realZ * imagZ1 + imagZ * realZ1;\r\n\t\t\trealZ = realTemp;\r\n\t\t\timagZ = imagTemp;\r\n\t\t\trealNum += b[i] * realZ;\r\n\t\t\timagNum += b[i] * imagZ;\r\n\t\t\trealDenom += a[i] * realZ;\r\n\t\t\timagDenom += a[i] * imagZ;\r\n\t\t}\r\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\r\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\r\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\r\n\t}\r\n\t\r\n\tpublic magnitude(): number {\r\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\r\n\t}\r\n\t\r\n\tpublic angle(): number {\r\n\t\treturn Math.atan2(this.imag, this.real);\r\n\t}\r\n}\r\n\r\nexport class DynamicBiquadFilter {\r\n\tpublic a1: number = 0.0;\r\n\tpublic a2: number = 0.0;\r\n\tpublic b0: number = 1.0;\r\n\tpublic b1: number = 0.0;\r\n\tpublic b2: number = 0.0;\r\n\tpublic a1Delta: number = 0.0;\r\n\tpublic a2Delta: number = 0.0;\r\n\tpublic b0Delta: number = 0.0;\r\n\tpublic b1Delta: number = 0.0;\r\n\tpublic b2Delta: number = 0.0;\r\n\tpublic output1: number = 0.0;\r\n\tpublic output2: number = 0.0;\r\n\t\r\n\t// Some filter types are more stable when interpolating between coefficients\r\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\r\n\t// for filter types where the \"b\" coefficients might change sign!\r\n\tpublic useMultiplicativeInputCoefficients: boolean = false;\r\n\t\r\n\tpublic resetOutput(): void {\r\n\t\tthis.output1 = 0.0;\r\n\t\tthis.output2 = 0.0;\r\n\t}\r\n\t\r\n\tpublic loadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\r\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\r\n\t\tthis.a1 = start.a[1];\r\n\t\tthis.a2 = start.a[2];\r\n\t\tthis.b0 = start.b[0];\r\n\t\tthis.b1 = start.b[1];\r\n\t\tthis.b2 = start.b[2];\r\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\r\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\r\n\t\tif (useMultiplicativeInputCoefficients) {\r\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\r\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\r\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\r\n\t\t} else {\r\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\r\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\r\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\r\n\t\t}\r\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\r\n\t}\r\n}","// A simple events system for effectively direct links without actualy linking files or references.\r\n// Yoinked from Goldbox.\r\nclass EventManager { \r\n    private activeEvents:string[] = [];\r\n    private listeners:any = {};\r\n\r\n    constructor() {\r\n        this.activeEvents = [];\r\n        this.listeners = {};\r\n    }\r\n\r\n\r\n    public raise(eventType: string, eventModifier: number, eventData: any, extraEventData?: any): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        this.activeEvents.push(eventType);\r\n        for (let i: number = 0; i < this.listeners[eventType].length; i++) {\r\n            this.listeners[eventType][i](eventModifier,eventData,extraEventData)\r\n        }\r\n        this.activeEvents.pop();\r\n    }\r\n\r\n    public listen(eventType:string,callback:Function): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            this.listeners[eventType] = []\r\n        }\r\n        this.listeners[eventType].push(callback)\r\n    }\r\n\r\n    public unlisten(eventType: string, callback: Function): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        const lisen = this.listeners[eventType].indexOf(callback);\r\n        if (lisen != -1) {\r\n            this.listeners[eventType].splice(lisen, 1);\r\n        }\r\n    }\r\n    public unlistenAll(eventType: string): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        this.listeners[eventType]=[];\r\n    }\r\n}\r\n\r\nexport const events:EventManager = new EventManager()","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, EffectType, EnvelopeComputeIndex, Transition, Unison, Chord, Vibrato, Envelope, AutomationTarget, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegralOld, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, OperatorWave } from \"./SynthConfig\";\r\nimport { EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter } from \"./filtering\";\r\nimport { events } from \"../global/Events\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        AudioContext: any;\r\n        webkitAudioContext: any;\r\n    }\r\n}\r\n\r\nconst epsilon: number = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\r\n\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nexport function clamp(min: number, max: number, val: number): number {\r\n    max = max - 1;\r\n    if (val <= max) {\r\n        if (val >= min) return val;\r\n        else return min;\r\n    } else {\r\n        return max;\r\n    }\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n    if (min <= val && val <= max) return val;\r\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nconst enum CharCode {\r\n    SPACE = 32,\r\n    HASH = 35,\r\n    PERCENT = 37,\r\n    AMPERSAND = 38,\r\n    PLUS = 43,\r\n    DASH = 45,\r\n    DOT = 46,\r\n    NUM_0 = 48,\r\n    NUM_1 = 49,\r\n    NUM_2 = 50,\r\n    NUM_3 = 51,\r\n    NUM_4 = 52,\r\n    NUM_5 = 53,\r\n    NUM_6 = 54,\r\n    NUM_7 = 55,\r\n    NUM_8 = 56,\r\n    NUM_9 = 57,\r\n    EQUALS = 61,\r\n    A = 65,\r\n    B = 66,\r\n    C = 67,\r\n    D = 68,\r\n    E = 69,\r\n    F = 70,\r\n    G = 71,\r\n    H = 72,\r\n    I = 73,\r\n    J = 74,\r\n    K = 75,\r\n    L = 76,\r\n    M = 77,\r\n    N = 78,\r\n    O = 79,\r\n    P = 80,\r\n    Q = 81,\r\n    R = 82,\r\n    S = 83,\r\n    T = 84,\r\n    U = 85,\r\n    V = 86,\r\n    W = 87,\r\n    X = 88,\r\n    Y = 89,\r\n    Z = 90,\r\n    UNDERSCORE = 95,\r\n    a = 97,\r\n    b = 98,\r\n    c = 99,\r\n    d = 100,\r\n    e = 101,\r\n    f = 102,\r\n    g = 103,\r\n    h = 104,\r\n    i = 105,\r\n    j = 106,\r\n    k = 107,\r\n    l = 108,\r\n    m = 109,\r\n    n = 110,\r\n    o = 111,\r\n    p = 112,\r\n    q = 113,\r\n    r = 114,\r\n    s = 115,\r\n    t = 116,\r\n    u = 117,\r\n    v = 118,\r\n    w = 119,\r\n    x = 120,\r\n    y = 121,\r\n    z = 122,\r\n    LEFT_CURLY_BRACE = 123,\r\n    RIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n    beatCount = CharCode.a, // added in song url version 2\r\n    bars = CharCode.b, // added in 2\r\n    vibrato = CharCode.c, // added in 2, DEPRECATED\r\n    fadeInOut = CharCode.d, // added in 3 for transition, switched to fadeInOut in 9\r\n    loopEnd = CharCode.e, // added in 2\r\n    eqFilter = CharCode.f, // added in 3\r\n    barCount = CharCode.g, // added in 3\r\n    unison = CharCode.h, // added in 2\r\n    instrumentCount = CharCode.i, // added in 3\r\n    patternCount = CharCode.j, // added in 3\r\n    key = CharCode.k, // added in 2\r\n    loopStart = CharCode.l, // added in 2\r\n    reverb = CharCode.m, // added in 5, DEPRECATED\r\n    channelCount = CharCode.n, // added in 6\r\n    channelOctave = CharCode.o, // added in 3\r\n    patterns = CharCode.p, // added in 2\r\n    effects = CharCode.q, // added in 7\r\n    rhythm = CharCode.r, // added in 2\r\n    scale = CharCode.s, // added in 2\r\n    tempo = CharCode.t, // added in 2\r\n    preset = CharCode.u, // added in 7\r\n    volume = CharCode.v, // added in 2\r\n    wave = CharCode.w, // added in 2\r\n\r\n    filterResonance = CharCode.y, // added in 7, DEPRECATED\r\n    drumsetEnvelopes = CharCode.z, // added in 7 for filter envelopes, still used for drumset envelopes\r\n    algorithm = CharCode.A, // added in 6\r\n    feedbackAmplitude = CharCode.B, // added in 6\r\n    chord = CharCode.C, // added in 7, DEPRECATED\r\n    detune = CharCode.D, // [JB], added in 3(?), DEPRECATED\r\n    envelopes = CharCode.E, // added in 6 for FM operator envelopes, repurposed in 9 for general envelopes.\r\n    feedbackType = CharCode.F, // added in 6\r\n    arpeggioSpeed = CharCode.G, // [JB], added in 3, DEPRECATED\r\n    harmonics = CharCode.H, // added in 7\r\n    stringSustain = CharCode.I, // added in 9\r\n    songSubtitle = CharCode.K, // added in Midbox V0.3 for song subtitles\r\n    pan = CharCode.L, // added between 8 and 9, DEPRECATED\r\n    customChipWave = CharCode.M, // [JB], added in 1(?)\r\n    songTitle = CharCode.N, // [JB], added in 1(?)\r\n    limiterSettings = CharCode.O, // [JB], added in 3(?)\r\n\r\n    operatorAmplitudes = CharCode.P, // added in 6\r\n    operatorFrequencies = CharCode.Q, // added in 6\r\n    operatorWaves = CharCode.R, // [JB], added in 4\r\n    spectrum = CharCode.S, // added in 7\r\n    startInstrument = CharCode.T, // added in 6\r\n    channelNames = CharCode.U, // [JB], added in 4(?)\r\n    feedbackEnvelope = CharCode.V, // added in 6, DEPRECATED\r\n    pulseWidth = CharCode.W, // added in 7\r\n    aliases = CharCode.X, // [JB], added in 4, DEPRECATED\r\n\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n    private _bits: number[] = [];\r\n    private _readIndex: number = 0;\r\n\r\n    constructor(source: string, startIndex: number, stopIndex: number) {\r\n        for (let i: number = startIndex; i < stopIndex; i++) {\r\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n            this._bits.push((value >> 5) & 0x1);\r\n            this._bits.push((value >> 4) & 0x1);\r\n            this._bits.push((value >> 3) & 0x1);\r\n            this._bits.push((value >> 2) & 0x1);\r\n            this._bits.push((value >> 1) & 0x1);\r\n            this._bits.push(value & 0x1);\r\n        }\r\n    }\r\n\r\n    public read(bitCount: number): number {\r\n        let result: number = 0;\r\n        while (bitCount > 0) {\r\n            result = result << 1;\r\n            result += this._bits[this._readIndex++];\r\n            bitCount--;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readLongTail(minValue: number, minBits: number): number {\r\n        let result: number = minValue;\r\n        let numBits: number = minBits;\r\n        while (this._bits[this._readIndex++]) {\r\n            result += 1 << numBits;\r\n            numBits++;\r\n        }\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            if (this._bits[this._readIndex++]) {\r\n                result += 1 << numBits;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readPartDuration(): number {\r\n        return this.readLongTail(1, 3);\r\n    }\r\n\r\n    public readLegacyPartDuration(): number {\r\n        return this.readLongTail(1, 2);\r\n    }\r\n\r\n    public readPinCount(): number {\r\n        return this.readLongTail(1, 0);\r\n    }\r\n\r\n    public readPitchInterval(): number {\r\n        if (this.read(1)) {\r\n            return -this.readLongTail(1, 3);\r\n        } else {\r\n            return this.readLongTail(1, 3);\r\n        }\r\n    }\r\n}\r\n\r\nclass BitFieldWriter {\r\n    private _index: number = 0;\r\n    private _bits: number[] = [];\r\n\r\n    public clear() {\r\n        this._index = 0;\r\n    }\r\n\r\n    public write(bitCount: number, value: number): void {\r\n        bitCount--;\r\n        while (bitCount >= 0) {\r\n            this._bits[this._index++] = (value >>> bitCount) & 1;\r\n            bitCount--;\r\n        }\r\n    }\r\n\r\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\r\n        if (value < minValue) throw new Error(\"value out of bounds\");\r\n        value -= minValue;\r\n        let numBits: number = minBits;\r\n        while (value >= (1 << numBits)) {\r\n            this._bits[this._index++] = 1;\r\n            value -= 1 << numBits;\r\n            numBits++;\r\n        }\r\n        this._bits[this._index++] = 0;\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            this._bits[this._index++] = (value >>> numBits) & 1;\r\n        }\r\n    }\r\n\r\n    public writePartDuration(value: number): void {\r\n        this.writeLongTail(1, 3, value);\r\n    }\r\n\r\n    public writePinCount(value: number): void {\r\n        this.writeLongTail(1, 0, value);\r\n    }\r\n\r\n    public writePitchInterval(value: number): void {\r\n        if (value < 0) {\r\n            this.write(1, 1); // sign\r\n            this.writeLongTail(1, 3, -value);\r\n        } else {\r\n            this.write(1, 0); // sign\r\n            this.writeLongTail(1, 3, value);\r\n        }\r\n    }\r\n\r\n    public concat(other: BitFieldWriter): void {\r\n        for (let i: number = 0; i < other._index; i++) {\r\n            this._bits[this._index++] = other._bits[i];\r\n        }\r\n    }\r\n\r\n    public encodeBase64(buffer: number[]): number[] {\r\n\r\n        for (let i: number = 0; i < this._index; i += 6) {\r\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n            buffer.push(base64IntToCharCode[value]);\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    public lengthBase64(): number {\r\n        return Math.ceil(this._index / 6);\r\n    }\r\n}\r\n\r\nexport interface NotePin {\r\n    interval: number;\r\n    time: number;\r\n    size: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\r\n    return { interval: interval, time: time, size: size };\r\n}\r\n\r\nexport class Note {\r\n    public pitches: number[];\r\n    public pins: NotePin[];\r\n    public start: number;\r\n    public end: number;\r\n    public continuesLastPattern: boolean;\r\n\r\n    public constructor(pitch: number, start: number, end: number, size: number, fadeout: boolean = false) {\r\n        this.pitches = [pitch];\r\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\r\n        this.start = start;\r\n        this.end = end;\r\n        this.continuesLastPattern = false;\r\n    }\r\n\r\n    public pickMainInterval(): number {\r\n        let longestFlatIntervalDuration: number = 0;\r\n        let mainInterval: number = 0;\r\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n            const pinA: NotePin = this.pins[pinIndex - 1];\r\n            const pinB: NotePin = this.pins[pinIndex];\r\n            if (pinA.interval == pinB.interval) {\r\n                const duration: number = pinB.time - pinA.time;\r\n                if (longestFlatIntervalDuration < duration) {\r\n                    longestFlatIntervalDuration = duration;\r\n                    mainInterval = pinA.interval;\r\n                }\r\n            }\r\n        }\r\n        if (longestFlatIntervalDuration == 0) {\r\n            let loudestSize: number = 0;\r\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n                const pin: NotePin = this.pins[pinIndex];\r\n                if (loudestSize < pin.size) {\r\n                    loudestSize = pin.size;\r\n                    mainInterval = pin.interval;\r\n                }\r\n            }\r\n        }\r\n        return mainInterval;\r\n    }\r\n\r\n    public clone(): Note {\r\n        const newNote: Note = new Note(-1, this.start, this.end, 3);\r\n        newNote.pitches = this.pitches.concat();\r\n        newNote.pins = [];\r\n        for (const pin of this.pins) {\r\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\r\n        }\r\n        newNote.continuesLastPattern = this.continuesLastPattern;\r\n        return newNote;\r\n    }\r\n\r\n    public getEndPinIndex(part: number): number {\r\n        let endPinIndex: number;\r\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\r\n            if (this.pins[endPinIndex].time + this.start > part) break;\r\n        }\r\n        return endPinIndex;\r\n    }\r\n}\r\n\r\nexport class Pattern {\r\n    public notes: Note[] = [];\r\n    public readonly instruments: number[] = [0];\r\n\r\n    public cloneNotes(): Note[] {\r\n        const result: Note[] = [];\r\n        for (const note of this.notes) {\r\n            result.push(note.clone());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.notes.length = 0;\r\n        this.instruments[0] = 0;\r\n        this.instruments.length = 1;\r\n    }\r\n\r\n    public toJsonObject(song: Song, channel: Channel, isModChannel: boolean): any {\r\n        const noteArray: Object[] = [];\r\n        for (const note of this.notes) {\r\n            // Only one ins per pattern is enforced in mod channels.\r\n            let instrument: Instrument = channel.instruments[this.instruments[0]];\r\n            let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\r\n            let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\r\n            const pointArray: Object[] = [];\r\n            for (const pin of note.pins) {\r\n                let useVol: number = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\r\n                pointArray.push({\r\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n                    \"pitchBend\": pin.interval,\r\n                    \"volume\": useVol,\r\n                    \"forMod\": isModChannel,\r\n                });\r\n            }\r\n\r\n            const noteObject: any = {\r\n                \"pitches\": note.pitches,\r\n                \"points\": pointArray,\r\n            };\r\n            if (note.start == 0) {\r\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\r\n            }\r\n            noteArray.push(noteObject);\r\n        }\r\n\r\n        const patternObject: any = { \"notes\": noteArray };\r\n        if (song.patternInstruments) {\r\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\r\n        }\r\n        return patternObject;\r\n    }\r\n\r\n    public fromJsonObject(patternObject: any, song: Song, channel: Channel, importedPartsPerBeat: number, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n        if (song.patternInstruments) {\r\n            if (Array.isArray(patternObject[\"instruments\"])) {\r\n                const instruments: any[] = patternObject[\"instruments\"];\r\n                const instrumentCount: number = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\r\n                for (let j: number = 0; j < instrumentCount; j++) {\r\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\r\n                }\r\n                this.instruments.length = instrumentCount;\r\n            } else {\r\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\r\n                this.instruments.length = 1;\r\n            }\r\n        }\r\n\r\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n            const maxNoteCount: number = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\r\n\r\n            // TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary.\r\n            //let tickClock: number = 0;\r\n            for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n                if (j >= maxNoteCount) break;\r\n\r\n                const noteObject = patternObject[\"notes\"][j];\r\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n                    continue;\r\n                }\r\n\r\n                const note: Note = new Note(0, 0, 0, 0);\r\n                note.pitches = [];\r\n                note.pins = [];\r\n\r\n                for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n                    const pitch: number = noteObject[\"pitches\"][k] | 0;\r\n                    if (note.pitches.indexOf(pitch) != -1) continue;\r\n                    note.pitches.push(pitch);\r\n                    if (note.pitches.length >= Config.maxChordSize) break;\r\n                }\r\n                if (note.pitches.length < 1) continue;\r\n\r\n                //let noteClock: number = tickClock;\r\n                let startInterval: number = 0;\r\n                for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n                    const pointObject: any = noteObject[\"points\"][k];\r\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n                    const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n                    const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n                    let instrument: Instrument = channel.instruments[this.instruments[0]];\r\n                    let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\r\n\r\n                    // Only one instrument per pattern allowed in mod channels.\r\n                    let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\r\n\r\n                    // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n                    // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n                    let size: number;\r\n                    if (pointObject[\"volume\"] == undefined) {\r\n                        size = volumeCap;\r\n                    } else if (pointObject[\"forMod\"] == undefined) {\r\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                    }\r\n                    else {\r\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                    }\r\n\r\n                    if (time > song.beatsPerBar * Config.partsPerBeat) continue;\r\n                    if (note.pins.length == 0) {\r\n                        //if (time < noteClock) continue;\r\n                        note.start = time;\r\n                        startInterval = interval;\r\n                    } else {\r\n                        //if (time <= noteClock) continue;\r\n                    }\r\n                    //noteClock = time;\r\n\r\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\r\n                }\r\n                if (note.pins.length < 2) continue;\r\n\r\n                note.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n                const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n                let lowestPitch: number = maxPitch;\r\n                let highestPitch: number = 0;\r\n                for (let k: number = 0; k < note.pitches.length; k++) {\r\n                    note.pitches[k] += startInterval;\r\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n                        note.pitches.splice(k, 1);\r\n                        k--;\r\n                    }\r\n                    if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n                    if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n                }\r\n                if (note.pitches.length < 1) continue;\r\n\r\n                for (let k: number = 0; k < note.pins.length; k++) {\r\n                    const pin: NotePin = note.pins[k];\r\n                    if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n                    if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n                    if (k >= 2) {\r\n                        if (pin.interval == note.pins[k - 1].interval &&\r\n                            pin.interval == note.pins[k - 2].interval &&\r\n                            pin.size == note.pins[k - 1].size &&\r\n                            pin.size == note.pins[k - 2].size) {\r\n                            note.pins.splice(k - 1, 1);\r\n                            k--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (note.start == 0) {\r\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\r\n                } else {\r\n                    note.continuesLastPattern = false;\r\n                }\r\n\r\n                this.notes.push(note);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Operator {\r\n    public frequency: number = 6;\r\n    public amplitude: number = 0;\r\n    public waveform: number = 0;\r\n    public pulseWidth: number = 0.5;\r\n\r\n    constructor(index: number) {\r\n        this.reset(index);\r\n    }\r\n\r\n    public reset(index: number): void {\r\n        this.frequency = 6;\r\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n        this.waveform = 0;\r\n        this.pulseWidth = 5;\r\n    }\r\n\r\n    public copy(other: Operator): void {\r\n        this.frequency = other.frequency;\r\n        this.amplitude = other.amplitude;\r\n        this.waveform = other.waveform;\r\n        this.pulseWidth = other.pulseWidth;\r\n    }\r\n}\r\n\r\nexport class SpectrumWave {\r\n    public spectrum: number[] = [];\r\n    public hash: number = -1;\r\n\r\n    constructor(isNoiseChannel: boolean) {\r\n        this.reset(isNoiseChannel);\r\n    }\r\n\r\n    public reset(isNoiseChannel: boolean): void {\r\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n            if (isNoiseChannel) {\r\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n            } else {\r\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n            }\r\n        }\r\n        this.markCustomWaveDirty();\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\r\n        let hash: number = 0;\r\n        for (const point of this.spectrum) hash = ((hash * hashMult) + point) >>> 0;\r\n        this.hash = hash;\r\n    }\r\n}\r\n\r\nclass SpectrumWaveState {\r\n    public wave: Float32Array | null = null;\r\n    private _hash: number = -1;\r\n\r\n    public getCustomWave(settings: SpectrumWave, lowestOctave: number): Float32Array {\r\n        if (this._hash == settings.hash) return this.wave!;\r\n        this._hash = settings.hash;\r\n\r\n        const waveLength: number = Config.spectrumNoiseLength;\r\n        if (this.wave == null || this.wave.length != waveLength + 1) {\r\n            this.wave = new Float32Array(waveLength + 1);\r\n        }\r\n        const wave: Float32Array = this.wave;\r\n\r\n        for (let i: number = 0; i < waveLength; i++) {\r\n            wave[i] = 0;\r\n        }\r\n\r\n        const highestOctave: number = 14;\r\n        const falloffRatio: number = 0.25;\r\n        // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n        const pitchTweak: number[] = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\r\n        function controlPointToOctave(point: number): number {\r\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n        }\r\n\r\n        let combinedAmplitude: number = 1;\r\n        for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n            const value1: number = (i <= 0) ? 0 : settings.spectrum[i - 1];\r\n            const value2: number = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\r\n            const octave1: number = controlPointToOctave(i - 1);\r\n            let octave2: number = controlPointToOctave(i);\r\n            if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n            if (value1 == 0 && value2 == 0) continue;\r\n\r\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n        }\r\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n        }\r\n\r\n        inverseRealFourierTransform(wave, waveLength);\r\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n        // Duplicate the first sample at the end for easier wrap-around interpolation.\r\n        wave[waveLength] = wave[0];\r\n\r\n        return wave;\r\n    }\r\n}\r\n\r\nexport class HarmonicsWave {\r\n    public harmonics: number[] = [];\r\n    public hash: number = -1;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n            this.harmonics[i] = 0;\r\n        }\r\n        this.harmonics[0] = Config.harmonicsMax;\r\n        this.harmonics[3] = Config.harmonicsMax;\r\n        this.harmonics[6] = Config.harmonicsMax;\r\n        this.markCustomWaveDirty();\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\r\n        let hash: number = 0;\r\n        for (const point of this.harmonics) hash = ((hash * hashMult) + point) >>> 0;\r\n        this.hash = hash;\r\n    }\r\n}\r\n\r\nclass HarmonicsWaveState {\r\n    public wave: Float32Array | null = null;\r\n    private _hash: number = -1;\r\n    private _generatedForType: InstrumentType;\r\n\r\n    public getCustomWave(settings: HarmonicsWave, instrumentType: InstrumentType): Float32Array {\r\n        if (this._hash == settings.hash && this._generatedForType == instrumentType) return this.wave!;\r\n        this._hash = settings.hash;\r\n        this._generatedForType = instrumentType;\r\n\r\n        const harmonicsRendered: number = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\r\n\r\n        const waveLength: number = Config.harmonicsWavelength;\r\n        const retroWave: Float32Array = getDrumWave(0, null, null);\r\n\r\n        if (this.wave == null || this.wave.length != waveLength + 1) {\r\n            this.wave = new Float32Array(waveLength + 1);\r\n        }\r\n        const wave: Float32Array = this.wave;\r\n\r\n        for (let i: number = 0; i < waveLength; i++) {\r\n            wave[i] = 0;\r\n        }\r\n\r\n        const overallSlope: number = -0.25;\r\n        let combinedControlPointAmplitude: number = 1;\r\n\r\n        for (let harmonicIndex: number = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\r\n            const harmonicFreq: number = harmonicIndex + 1;\r\n            let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\r\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\r\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\r\n            }\r\n            const normalizedValue: number = controlValue / Config.harmonicsMax;\r\n            let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n            if (harmonicIndex < Config.harmonicsControlPoints) {\r\n                combinedControlPointAmplitude += amplitude;\r\n            }\r\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n            // Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n            // retro wave (effectively random) to avoid egregiously tall spikes.\r\n            amplitude *= retroWave[harmonicIndex + 589];\r\n\r\n            wave[waveLength - harmonicFreq] = amplitude;\r\n        }\r\n\r\n        inverseRealFourierTransform(wave, waveLength);\r\n\r\n        // Limit the maximum wave amplitude.\r\n        const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n        for (let i: number = 0; i < wave.length; i++) wave[i] *= mult;\r\n\r\n        performIntegralOld(wave);\r\n\r\n        // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n        wave[waveLength] = wave[0];\r\n\r\n        return wave;\r\n    }\r\n}\r\n\r\nexport class FilterControlPoint {\r\n    public freq: number = 0;\r\n    public gain: number = Config.filterGainCenter;\r\n    public type: FilterType = FilterType.peak;\r\n\r\n    public set(freqSetting: number, gainSetting: number): void {\r\n        this.freq = freqSetting;\r\n        this.gain = gainSetting;\r\n    }\r\n\r\n    public getHz(): number {\r\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\r\n    }\r\n\r\n    public static getHzFromSettingValue(value: number): number {\r\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\r\n    }\r\n    public static getSettingValueFromHz(hz: number): number {\r\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\r\n    }\r\n    public static getRoundedSettingValueFromHz(hz: number): number {\r\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\r\n    }\r\n\r\n    public getLinearGain(peakMult: number = 1.0): number {\r\n        const power: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\r\n        const neutral: number = (this.type == FilterType.peak) ? 0.0 : -0.5;\r\n        const interpolatedPower: number = neutral + (power - neutral) * peakMult;\r\n        return Math.pow(2.0, interpolatedPower);\r\n    }\r\n    public static getRoundedSettingValueFromLinearGain(linearGain: number): number {\r\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\r\n    }\r\n\r\n    public toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult: number = 1.0, peakMult: number = 1.0): void {\r\n        const cornerRadiansPerSample: number = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\r\n        const linearGain: number = this.getLinearGain(peakMult);\r\n        switch (this.type) {\r\n            case FilterType.lowPass:\r\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\r\n                break;\r\n            case FilterType.highPass:\r\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\r\n                break;\r\n            case FilterType.peak:\r\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\r\n                break;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    public getVolumeCompensationMult(): number {\r\n        const octave: number = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\r\n        const gainPow: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\r\n        switch (this.type) {\r\n            case FilterType.lowPass:\r\n                const freqRelativeTo8khz: number = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\r\n                // Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\r\n                const warpedFreq: number = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\r\n                const warpedOctave: number = Math.log2(warpedFreq);\r\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\r\n            case FilterType.highPass:\r\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\r\n            case FilterType.peak:\r\n                const distanceFromCenter: number = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\r\n                const freqLoudness: number = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\r\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport class FilterSettings {\r\n    public readonly controlPoints: FilterControlPoint[] = [];\r\n    public controlPointCount: number = 0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset(): void {\r\n        this.controlPointCount = 0;\r\n    }\r\n\r\n    addPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\r\n        let controlPoint: FilterControlPoint;\r\n        if (this.controlPoints.length <= this.controlPointCount) {\r\n            controlPoint = new FilterControlPoint();\r\n            this.controlPoints[this.controlPointCount] = controlPoint;\r\n        } else {\r\n            controlPoint = this.controlPoints[this.controlPointCount];\r\n        }\r\n        this.controlPointCount++;\r\n        controlPoint.type = type;\r\n        controlPoint.set(freqSetting, gainSetting);\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const filterArray: any[] = [];\r\n        for (let i: number = 0; i < this.controlPointCount; i++) {\r\n            const point: FilterControlPoint = this.controlPoints[i];\r\n            filterArray.push({\r\n                \"type\": Config.filterTypeNames[point.type],\r\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\r\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\r\n            });\r\n        }\r\n        return filterArray;\r\n    }\r\n\r\n    public fromJsonObject(filterObject: any): void {\r\n        this.controlPoints.length = 0;\r\n        if (filterObject) {\r\n            for (const pointObject of filterObject) {\r\n                const point: FilterControlPoint = new FilterControlPoint();\r\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\r\n                if (<any>point.type == -1) point.type = FilterType.peak;\r\n                if (pointObject[\"cutoffHz\"] != undefined) {\r\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\r\n                } else {\r\n                    point.freq = 0;\r\n                }\r\n                if (pointObject[\"linearGain\"] != undefined) {\r\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\r\n                } else {\r\n                    point.gain = Config.filterGainCenter;\r\n                }\r\n                this.controlPoints.push(point);\r\n            }\r\n        }\r\n        this.controlPointCount = this.controlPoints.length;\r\n    }\r\n\r\n    // Returns true if all filter control points match in number and type (but not freq/gain)\r\n    public static filtersCanMorph(filterA: FilterSettings, filterB: FilterSettings): boolean {\r\n        if (filterA.controlPointCount != filterB.controlPointCount)\r\n            return false;\r\n        for (let i: number = 0; i < filterA.controlPointCount; i++) {\r\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Interpolate two FilterSettings, where pos=0 is filterA and pos=1 is filterB\r\n    public static lerpFilters(filterA: FilterSettings, filterB: FilterSettings, pos: number): FilterSettings {\r\n\r\n        let lerpedFilter: FilterSettings = new FilterSettings();\r\n\r\n        // One setting or another is null, return the other.\r\n        if (filterA == null) {\r\n            return filterA;\r\n        }\r\n        if (filterB == null) {\r\n            return filterB;\r\n        }\r\n\r\n        pos = Math.max(0, Math.min(1, pos));\r\n\r\n        // Filter control points match in number and type\r\n        if (this.filtersCanMorph(filterA, filterB)) {\r\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\r\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\r\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\r\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\r\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\r\n            }\r\n\r\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\r\n\r\n            return lerpedFilter;\r\n        }\r\n        else {\r\n            // Not allowing morph of unmatching filters for now. It's a hornet's nest of problems, and I had it implemented and mostly working and it didn't sound very interesting since the shape becomes \"mushy\" in between\r\n            return (pos >= 1) ? filterB : filterA;\r\n        }\r\n        /* \r\n        // Filter control points do not match. Take all filterA points and move them to neutral at pos=1 (gain 7 for normal points, slide to edge and gain 7 for lo/hipass),\r\n        // and do the opposite for filterB points. Return a filter with points for both.\r\n        else {\r\n            let lerpedFilter: FilterSettings = new FilterSettings();\r\n            // Filter A's morph points\r\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\r\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\r\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\r\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (Config.filterGainCenter - filterA.controlPoints[i].gain) * pos;\r\n\r\n                if (filterA.controlPoints[i].type == FilterType.peak) {\r\n                    lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq;\r\n                }\r\n                else if (filterA.controlPoints[i].type == FilterType.highPass) {\r\n                    lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq * (1 - pos);\r\n                }\r\n                else {\r\n                    lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + ((Config.filterFreqRange - 1) - filterA.controlPoints[i].freq) * pos;\r\n                }\r\n            }\r\n            // Filter B's morph points\r\n            for (let i: number = 0, j: number = filterA.controlPointCount; i < filterB.controlPointCount; i++, j++) {\r\n                lerpedFilter.controlPoints[j] = new FilterControlPoint();\r\n                lerpedFilter.controlPoints[j].type = filterB.controlPoints[i].type;\r\n                lerpedFilter.controlPoints[j].gain = filterB.controlPoints[i].gain + (Config.filterGainCenter - filterB.controlPoints[i].gain) * (1 - pos);\r\n\r\n                if (filterB.controlPoints[i].type == FilterType.peak) {\r\n                    lerpedFilter.controlPoints[j].freq = filterB.controlPoints[i].freq;\r\n                }\r\n                else if (filterB.controlPoints[i].type == FilterType.highPass) {\r\n                    lerpedFilter.controlPoints[j].freq = filterB.controlPoints[i].freq * pos;\r\n                }\r\n                else {\r\n                    lerpedFilter.controlPoints[j].freq = filterB.controlPoints[i].freq + ((Config.filterFreqRange - 1) - filterB.controlPoints[i].freq) * (1 - pos);\r\n                }\r\n            }\r\n\r\n            lerpedFilter.controlPointCount = filterA.controlPointCount + filterB.controlPointCount;\r\n\r\n            return lerpedFilter;\r\n        }\r\n        */\r\n    }\r\n\r\n    public convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\r\n        this.reset();\r\n\r\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\r\n        const legacyFilterMax: number = 0.95;\r\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\r\n        const legacyFilterMaxResonance: number = 0.95;\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const legacyFilterResonanceRange: number = 8;\r\n\r\n        const resonant: boolean = (legacyResonanceSetting > 1);\r\n        const firstOrder: boolean = (legacyResonanceSetting == 0);\r\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\r\n        const envDecays: boolean = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\r\n\r\n        const standardSampleRate: number = 48000;\r\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\r\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\r\n\r\n        if (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\r\n            // The response is flat and there's no envelopes, so don't even bother adding any control points.\r\n        } else if (firstOrder) {\r\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\r\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\r\n            // However, BeepBox's original lowpass filters behaved oddly as they\r\n            // approach the nyquist frequency, so I've devised this curved conversion\r\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\r\n            const extraOctaves: number = 3.5;\r\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\r\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\r\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\r\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, finalRadians);\r\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\r\n\r\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\r\n            // Bias slightly toward 2^(-extraOctaves):\r\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\r\n            // Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\r\n            if (envDecays) logGain = Math.min(logGain, -1.0);\r\n            const convertedGain: number = Math.pow(2.0, logGain);\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        } else {\r\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\r\n            const invertedGain: number = 0.5 / intendedGain;\r\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\r\n            const freqRatio: number = legacyRadians / maxRadians;\r\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\r\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\r\n            let curvedHz: number;\r\n            if (envDecays) {\r\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\r\n            } else {\r\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\r\n            }\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n\r\n            let legacyFilterGain: number;\r\n            if (envDecays) {\r\n                legacyFilterGain = intendedGain;\r\n            } else {\r\n                const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\r\n                const response: FrequencyResponse = new FrequencyResponse();\r\n                response.analyze(legacyFilter, curvedRadians);\r\n                legacyFilterGain = response.magnitude();\r\n            }\r\n            if (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        }\r\n\r\n        // Added for JummBox - making a 0 point filter does not truncate control points!\r\n        this.controlPoints.length = this.controlPointCount;\r\n    }\r\n\r\n    // Similar to above, but purpose-fit for quick conversions in synth calls.\r\n    public convertLegacySettingsForSynth(legacyCutoffSetting: number, legacyResonanceSetting: number, allowFirstOrder: boolean = false): void {\r\n        this.reset();\r\n\r\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\r\n        const legacyFilterMax: number = 0.95;\r\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\r\n        const legacyFilterMaxResonance: number = 0.95;\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const legacyFilterResonanceRange: number = 8;\r\n\r\n        const firstOrder: boolean = (legacyResonanceSetting == 0 && allowFirstOrder);\r\n        const standardSampleRate: number = 48000;\r\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\r\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\r\n\r\n        if (firstOrder) {\r\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\r\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\r\n            // However, BeepBox's original lowpass filters behaved oddly as they\r\n            // approach the nyquist frequency, so I've devised this curved conversion\r\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\r\n            const extraOctaves: number = 3.5;\r\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\r\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\r\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\r\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, finalRadians);\r\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\r\n\r\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\r\n            // Bias slightly toward 2^(-extraOctaves):\r\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\r\n            const convertedGain: number = Math.pow(2.0, logGain);\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        } else {\r\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\r\n            const invertedGain: number = 0.5 / intendedGain;\r\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\r\n            const freqRatio: number = legacyRadians / maxRadians;\r\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\r\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\r\n            let curvedHz: number;\r\n\r\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\r\n            const freqSetting: number = FilterControlPoint.getSettingValueFromHz(curvedHz);\r\n\r\n            let legacyFilterGain: number;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, curvedRadians);\r\n            legacyFilterGain = response.magnitude();\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport class EnvelopeSettings {\r\n    public target: number = 0;\r\n    public index: number = 0;\r\n    public envelope: number = 0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset(): void {\r\n        this.target = 0;\r\n        this.index = 0;\r\n        this.envelope = 0;\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const envelopeObject: any = {\r\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\r\n            \"envelope\": Config.envelopes[this.envelope].name,\r\n        };\r\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\r\n            envelopeObject[\"index\"] = this.index;\r\n        }\r\n        return envelopeObject;\r\n    }\r\n\r\n    public fromJsonObject(envelopeObject: any): void {\r\n        this.reset();\r\n\r\n        let target: AutomationTarget = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\r\n        if (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\r\n        this.target = target.index;\r\n\r\n        let envelope: Envelope = Config.envelopes.dictionary[envelopeObject[\"envelope\"]];\r\n        if (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\r\n        this.envelope = envelope.index;\r\n\r\n        if (envelopeObject[\"index\"] != undefined) {\r\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\r\n        } else {\r\n            this.index = 0;\r\n        }\r\n    }\r\n}\r\n\r\n// Settings that were available to old versions of BeepBox but are no longer available in the\r\n// current version that need to be reinterpreted as a group to determine the best way to\r\n// represent them in the current version.\r\ninterface LegacySettings {\r\n    filterCutoff?: number;\r\n    filterResonance?: number;\r\n    filterEnvelope?: Envelope;\r\n    pulseEnvelope?: Envelope;\r\n    operatorEnvelopes?: Envelope[];\r\n    feedbackEnvelope?: Envelope;\r\n}\r\n\r\nexport class Instrument {\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public preset: number = 0;\r\n    public chipWave: number = 2;\r\n    public chipNoise: number = 1;\r\n    public eqFilter: FilterSettings = new FilterSettings();\r\n    public eqFilterType: boolean = false;\r\n    public eqFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\r\n    public eqFilterSimplePeak: number = 0;\r\n    public noteFilter: FilterSettings = new FilterSettings();\r\n    public noteFilterType: boolean = false;\r\n    public noteFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\r\n    public noteFilterSimplePeak: number = 0;\r\n    public eqSubFilters: (FilterSettings | null)[] = [];\r\n    public noteSubFilters: (FilterSettings | null)[] = [];\r\n    public tmpEqFilterStart: FilterSettings | null;\r\n    public tmpEqFilterEnd: FilterSettings | null;\r\n    public tmpNoteFilterStart: FilterSettings | null;\r\n    public tmpNoteFilterEnd: FilterSettings | null;\r\n    public envelopes: EnvelopeSettings[] = [];\r\n    public fadeIn: number = 0;\r\n    public fadeOut: number = Config.fadeOutNeutral;\r\n    public envelopeCount: number = 0;\r\n    public transition: number = Config.transitions.dictionary[\"normal\"].index;\r\n    public pitchShift: number = 0;\r\n    public detune: number = 0;\r\n    public vibrato: number = 0;\r\n    public interval: number = 0;\r\n    public vibratoDepth: number = 0;\r\n    public vibratoSpeed: number = 10;\r\n    public vibratoDelay: number = 0;\r\n    public vibratoType: number = 0;\r\n    public unison: number = 0;\r\n    public effects: number = 0;\r\n    public chord: number = 1;\r\n    public volume: number = 0;\r\n    public pan: number = Config.panCenter;\r\n    public panDelay: number = 10;\r\n    public fastTwoNoteArp: boolean = false;\r\n    public arpeggioSpeed: number = 12;\r\n    public arpeggioPattern: number = 0;\r\n    public strumSpeed: number = 23;\r\n    public slideSpeed: number = 21;\r\n    public legacyTieOver: boolean = false;\r\n    public clicklessTransition: boolean = false;\r\n    public continueThruPattern: boolean = false;\r\n    public aliases: boolean = false;\r\n    public pulseWidth: number = Config.pulseWidthRange;\r\n    public stringSustain: number = 10;\r\n    public distortion: number = 0;\r\n    public bitcrusherFreq: number = 0;\r\n    public bitcrusherQuantization: number = 0;\r\n    public chorus: number = 0;\r\n    public reverb: number = 0;\r\n    public echoSustain: number = 0;\r\n    public echoDelay: number = 0;\r\n    public algorithm: number = 0;\r\n    public feedbackType: number = 0;\r\n    public feedbackAmplitude: number = 0;\r\n    public LFOtime: number = 0;\r\n    public nextLFOtime: number = 0;\r\n    public arpTime: number = 0;\r\n    public customChipWave: Float32Array = new Float32Array(64);\r\n    public customChipWaveIntegral: Float32Array = new Float32Array(65); // One extra element for wrap-around in chipSynth.\r\n    public readonly operators: Operator[] = [];\r\n    public readonly spectrumWave: SpectrumWave;\r\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n    public readonly drumsetEnvelopes: number[] = [];\r\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n    public modChannels: number[] = [];\r\n    public modInstruments: number[] = [];\r\n    public modulators: number[] = [];\r\n    public modFilterTypes: number[] = [];\r\n    public invalidModulators: boolean[] = [];\r\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n        if (isModChannel) {\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.modChannels.push(0);\r\n                this.modInstruments.push(0);\r\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\r\n            }\r\n        }\r\n\r\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            this.operators[i] = new Operator(i);\r\n        }\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n        }\r\n\r\n        for (let i = 0; i < 64; i++) {\r\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n        }\r\n\r\n        let sum: number = 0.0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            sum += this.customChipWave[i];\r\n        }\r\n        const average: number = sum / this.customChipWave.length;\r\n\r\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n        let cumulative: number = 0;\r\n        let wavePrev: number = 0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            cumulative += wavePrev;\r\n            wavePrev = this.customChipWave[i] - average;\r\n            this.customChipWaveIntegral[i] = cumulative;\r\n        }\r\n\r\n        // 65th, last sample is for anti-aliasing\r\n        this.customChipWaveIntegral[64] = 0.0;\r\n\r\n    }\r\n\r\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n        // Mod channels are forced to one type.\r\n        if (isModChannel) type = InstrumentType.mod;\r\n        this.type = type;\r\n        this.preset = type;\r\n        this.volume = 0;\r\n        this.effects = (1 << EffectType.panning); // Panning enabled by default in JB.\r\n        this.chorus = Config.chorusRange - 1;\r\n        this.reverb = 0;\r\n        this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\r\n        this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\r\n        this.eqFilter.reset();\r\n        this.eqFilterType = false;\r\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\r\n        this.eqFilterSimplePeak = 0;\r\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n            this.eqSubFilters[i] = null;\r\n            this.noteSubFilters[i] = null;\r\n        }\r\n        this.noteFilter.reset();\r\n        this.noteFilterType = false;\r\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\r\n        this.noteFilterSimplePeak = 0;\r\n        this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\r\n        this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5)\r\n        this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\r\n        this.pan = Config.panCenter;\r\n        this.panDelay = 10;\r\n        this.pitchShift = Config.pitchShiftCenter;\r\n        this.detune = Config.detuneCenter;\r\n        this.vibrato = 0;\r\n        this.unison = 0;\r\n        this.stringSustain = 10;\r\n        this.clicklessTransition = false;\r\n        this.continueThruPattern = false;\r\n        this.arpeggioSpeed = 12;\r\n        this.arpeggioPattern = 0;\r\n        this.strumSpeed = 23;\r\n        this.slideSpeed = 21;\r\n        this.legacyTieOver = false;\r\n        this.aliases = false;\r\n        this.fadeIn = 0;\r\n        this.fadeOut = Config.fadeOutNeutral;\r\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\r\n        this.envelopeCount = 0;\r\n        switch (type) {\r\n            case InstrumentType.chip:\r\n                this.chipWave = 2;\r\n                // TODO: enable the chord effect?\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                break;\r\n            case InstrumentType.customChipWave:\r\n                this.chipWave = 2;\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n                break;\r\n            case InstrumentType.fm:\r\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n                this.algorithm = 0;\r\n                this.feedbackType = 0;\r\n                this.feedbackAmplitude = 0;\r\n                for (let i: number = 0; i < this.operators.length; i++) {\r\n                    this.operators[i].reset(i);\r\n                }\r\n                break;\r\n            case InstrumentType.noise:\r\n                this.chipNoise = 1;\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                break;\r\n            case InstrumentType.spectrum:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                this.spectrumWave.reset(isNoiseChannel);\r\n                break;\r\n            case InstrumentType.drumset:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                for (let i: number = 0; i < Config.drumCount; i++) {\r\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\r\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n                    }\r\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n                }\r\n                break;\r\n            case InstrumentType.harmonics:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.pwm:\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n                break;\r\n            case InstrumentType.pickedString:\r\n                this.chord = Config.chords.dictionary[\"strum\"].index;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.mod:\r\n                this.transition = 0;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 0;\r\n                this.chord = 0;\r\n                this.modChannels = [];\r\n                this.modInstruments = [];\r\n                this.modulators = [];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels.push(-2);\r\n                    this.modInstruments.push(0);\r\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\r\n                    this.invalidModulators[mod] = false;\r\n                    this.modFilterTypes[mod] = 0;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Unrecognized instrument type: \" + type);\r\n        }\r\n        // Chip/noise instruments had arpeggio and FM had custom interval but neither\r\n        // explicitly saved the chorus setting beforeSeven so enable it here. The effects\r\n        // will otherwise get overridden when reading SongTagCode.startInstrument.\r\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n            // Enable chord if it was used.\r\n            this.effects = (this.effects | (1 << EffectType.chord));\r\n        }\r\n    }\r\n\r\n    // (only) difference for JummBox: Returns whether or not the note filter was chosen for filter conversion.\r\n    public convertLegacySettings(legacySettings: LegacySettings, forceSimpleFilter: boolean): void {\r\n        let legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\r\n        let legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\r\n        let legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\r\n        let legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\r\n        let legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\r\n        let legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\r\n\r\n        // legacy defaults:\r\n        if (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\r\n        if (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\r\n        if (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\r\n        if (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\r\n        if (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\r\n        if (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\r\n\r\n        // The \"punch\" envelope is special: it goes *above* the chosen cutoff. But if the cutoff was already at the max, it couldn't go any higher... except in the current version of BeepBox I raised the max cutoff so it *can* but then it sounds different, so to preserve the original sound let's just remove the punch envelope.\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\r\n        if (cutoffAtMax && legacyFilterEnv.type == EnvelopeType.punch) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\r\n\r\n        const carrierCount: number = Config.algorithms[this.algorithm].carrierCount;\r\n        let noCarriersControlledByNoteSize: boolean = true;\r\n        let allCarriersControlledByNoteSize: boolean = true;\r\n        let noteSizeControlsSomethingElse: boolean = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\r\n        if (this.type == InstrumentType.fm) {\r\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\r\n            for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\r\n                if (i < carrierCount) {\r\n                    if (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\r\n                        allCarriersControlledByNoteSize = false;\r\n                    } else {\r\n                        noCarriersControlledByNoteSize = false;\r\n                    }\r\n                } else {\r\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.envelopeCount = 0;\r\n\r\n        if (this.type == InstrumentType.fm) {\r\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\r\n            } else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\r\n            }\r\n        }\r\n\r\n        if (legacyFilterEnv.type == EnvelopeType.none) {\r\n            this.noteFilter.reset();\r\n            this.noteFilterType = false;\r\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\r\n            this.effects &= ~(1 << EffectType.noteFilter);\r\n            if (forceSimpleFilter || this.eqFilterType) {\r\n                this.eqFilterType = true;\r\n                this.eqFilterSimpleCut = legacyCutoffSetting;\r\n                this.eqFilterSimplePeak = legacyResonanceSetting;\r\n            }\r\n        } else {\r\n            this.eqFilter.reset();\r\n\r\n            this.eqFilterType = false;\r\n            this.noteFilterType = false;\r\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\r\n            this.effects |= 1 << EffectType.noteFilter;\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index);\r\n            if (forceSimpleFilter || this.noteFilterType) {\r\n                this.noteFilterType = true;\r\n                this.noteFilterSimpleCut = legacyCutoffSetting;\r\n                this.noteFilterSimplePeak = legacyResonanceSetting;\r\n            }\r\n        }\r\n\r\n        if (legacyPulseEnv.type != EnvelopeType.none) {\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index);\r\n        }\r\n\r\n        for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\r\n            if (i < carrierCount && allCarriersControlledByNoteSize) continue;\r\n            if (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index);\r\n            }\r\n        }\r\n\r\n        if (legacyFeedbackEnv.type != EnvelopeType.none) {\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index);\r\n        }\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const instrumentObject: any = {\r\n            \"type\": Config.instrumentTypeNames[this.type],\r\n            \"volume\": this.volume,\r\n            \"eqFilter\": this.eqFilter.toJsonObject(),\r\n            \"eqFilterType\": this.eqFilterType,\r\n            \"eqSimpleCut\": this.eqFilterSimpleCut,\r\n            \"eqSimplePeak\": this.eqFilterSimplePeak\r\n        };\r\n\r\n        if (this.preset != this.type) {\r\n            instrumentObject[\"preset\"] = this.preset;\r\n        }\r\n\r\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n            if (this.eqSubFilters[i] != null)\r\n                instrumentObject[\"eqSubFilters\" + i] = this.eqSubFilters[i]!.toJsonObject();\r\n        }\r\n\r\n        const effects: string[] = [];\r\n        for (const effect of Config.effectOrder) {\r\n            if (this.effects & (1 << effect)) {\r\n                effects.push(Config.effectNames[effect]);\r\n            }\r\n        }\r\n        instrumentObject[\"effects\"] = effects;\r\n\r\n\r\n        if (effectsIncludeTransition(this.effects)) {\r\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n            instrumentObject[\"slideSpeed\"] = this.slideSpeed;\r\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\r\n            instrumentObject[\"continueThruPattern\"] = this.continueThruPattern;\r\n        }\r\n        if (effectsIncludeChord(this.effects)) {\r\n            instrumentObject[\"chord\"] = this.getChord().name;\r\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\r\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\r\n            instrumentObject[\"arpeggioPattern\"] = this.arpeggioPattern;\r\n            instrumentObject[\"strumSpeed\"] = this.strumSpeed;\r\n        }\r\n        if (effectsIncludePitchShift(this.effects)) {\r\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\r\n        }\r\n        if (effectsIncludeDetune(this.effects)) {\r\n            instrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune);\r\n        }\r\n        if (effectsIncludeVibrato(this.effects)) {\r\n            if (this.vibrato == -1) {\r\n                this.vibrato = 5;\r\n            }\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\r\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\r\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\r\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\r\n        }\r\n        if (effectsIncludeNoteFilter(this.effects)) {\r\n            instrumentObject[\"noteFilterType\"] = this.noteFilterType;\r\n            instrumentObject[\"noteSimpleCut\"] = this.noteFilterSimpleCut;\r\n            instrumentObject[\"noteSimplePeak\"] = this.noteFilterSimplePeak;\r\n            instrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\r\n\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (this.noteSubFilters[i] != null)\r\n                    instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i]!.toJsonObject();\r\n            }\r\n        }\r\n        if (effectsIncludeDistortion(this.effects)) {\r\n            instrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\r\n            instrumentObject[\"aliases\"] = this.aliases;\r\n        }\r\n        if (effectsIncludeBitcrusher(this.effects)) {\r\n            instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\r\n            instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\r\n        }\r\n        if (effectsIncludePanning(this.effects)) {\r\n            instrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\r\n            instrumentObject[\"panDelay\"] = this.panDelay;\r\n        }\r\n        if (effectsIncludeChorus(this.effects)) {\r\n            instrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\r\n        }\r\n        if (effectsIncludeEcho(this.effects)) {\r\n            instrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\r\n            instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\r\n        }\r\n        if (effectsIncludeReverb(this.effects)) {\r\n            instrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\r\n        }\r\n\r\n        if (this.type != InstrumentType.drumset) {\r\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\r\n            instrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\r\n        }\r\n\r\n        if (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\r\n            instrumentObject[\"harmonics\"] = [];\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n            }\r\n        }\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            instrumentObject[\"spectrum\"] = [];\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n            }\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            instrumentObject[\"drums\"] = [];\r\n            for (let j: number = 0; j < Config.drumCount; j++) {\r\n                const spectrum: number[] = [];\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n                }\r\n                instrumentObject[\"drums\"][j] = {\r\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n                    \"spectrum\": spectrum,\r\n                };\r\n            }\r\n        } else if (this.type == InstrumentType.chip) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"unison\"] = Config.unisons[this.unison].name;\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n        } else if (this.type == InstrumentType.pickedString) {\r\n            instrumentObject[\"unison\"] = Config.unisons[this.unison].name;\r\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            instrumentObject[\"unison\"] = Config.unisons[this.unison].name;\r\n        } else if (this.type == InstrumentType.fm) {\r\n            const operatorArray: Object[] = [];\r\n            for (const operator of this.operators) {\r\n                operatorArray.push({\r\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n                    \"amplitude\": operator.amplitude,\r\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\r\n                    \"pulseWidth\": operator.pulseWidth,\r\n                });\r\n            }\r\n            instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n            instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n            instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n            instrumentObject[\"operators\"] = operatorArray;\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"unison\"] = Config.unisons[this.unison].name;\r\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n            }\r\n        } else if (this.type == InstrumentType.mod) {\r\n            instrumentObject[\"modChannels\"] = [];\r\n            instrumentObject[\"modInstruments\"] = [];\r\n            instrumentObject[\"modSettings\"] = [];\r\n            instrumentObject[\"modStatuses\"] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type\");\r\n        }\r\n\r\n        const envelopes: any[] = [];\r\n        for (let i = 0; i < this.envelopeCount; i++) {\r\n            envelopes.push(this.envelopes[i].toJsonObject());\r\n        }\r\n        instrumentObject[\"envelopes\"] = envelopes;\r\n\r\n        return instrumentObject;\r\n    }\r\n\r\n\r\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean, legacyGlobalReverb: number = 0): void {\r\n        if (instrumentObject == undefined) instrumentObject = {};\r\n\r\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n        if (<any>type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\r\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n        if (instrumentObject[\"preset\"] != undefined) {\r\n            this.preset = instrumentObject[\"preset\"] >>> 0;\r\n        }\r\n\r\n        if (instrumentObject[\"volume\"] != undefined) {\r\n            this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\r\n        } else {\r\n            this.volume = 0;\r\n        }\r\n\r\n        if (Array.isArray(instrumentObject[\"effects\"])) {\r\n            let effects: number = 0;\r\n            for (let i: number = 0; i < instrumentObject[\"effects\"].length; i++) {\r\n                effects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\r\n            }\r\n            this.effects = (effects & ((1 << EffectType.length) - 1));\r\n        } else {\r\n            // The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\r\n            const legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n            this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\r\n            if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n        }\r\n\r\n        this.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\r\n        const transitionProperty: any = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\r\n        if (transitionProperty != undefined) {\r\n            let transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\r\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\r\n                const legacySettings = (<any>{\r\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    // Note that the old slide transition has the same name as a new slide transition that is different.\r\n                    // Only apply legacy settings if the instrument JSON was created before, based on the presence\r\n                    // of the fade in/out fields.\r\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\r\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\r\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\r\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\r\n                })[transitionProperty];\r\n                if (legacySettings != undefined) {\r\n                    transition = Config.transitions.dictionary[legacySettings.transition];\r\n                    // These may be overridden below.\r\n                    this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\r\n                    this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\r\n                }\r\n            }\r\n            if (transition != undefined) this.transition = transition.index;\r\n\r\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                // Enable transition if it was used.\r\n                this.effects = (this.effects | (1 << EffectType.transition));\r\n            }\r\n        }\r\n\r\n        // Overrides legacy settings in transition above.\r\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\r\n            this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\r\n        }\r\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\r\n            this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\r\n        }\r\n\r\n        {\r\n            // Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\r\n            const chordProperty: any = instrumentObject[\"chord\"];\r\n            const legacyChordNames: Dictionary<string> = { \"harmony\": \"simultaneous\" };\r\n            const chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\r\n            if (chord != undefined) {\r\n                this.chord = chord.index;\r\n            } else {\r\n                // Different instruments have different default chord types based on historical behaviour.\r\n                if (this.type == InstrumentType.noise) {\r\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                } else if (this.type == InstrumentType.pickedString) {\r\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\r\n                } else if (this.type == InstrumentType.chip) {\r\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                } else if (this.type == InstrumentType.fm) {\r\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n                } else {\r\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.unison = Config.unisons.dictionary[\"none\"].index; // default value.\r\n        const unisonProperty: any = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\r\n        if (unisonProperty != undefined) {\r\n            const legacyChorusNames: Dictionary<string> = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\" };\r\n            const unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\r\n            if (unison != undefined) this.unison = unison.index;\r\n        }\r\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\r\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n        }\r\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\r\n            // Enable chord if it was used.\r\n            this.effects = (this.effects | (1 << EffectType.chord));\r\n        }\r\n\r\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\r\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\r\n        }\r\n        if (instrumentObject[\"detuneCents\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\r\n        }\r\n\r\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\r\n        const vibratoProperty: any = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\r\n        if (vibratoProperty != undefined) {\r\n\r\n            const legacyVibratoNames: Dictionary<string> = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\r\n            const vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\r\n            if (vibrato != undefined)\r\n                this.vibrato = vibrato.index;\r\n            else if (vibratoProperty == \"custom\")\r\n                this.vibrato = Config.vibratos.length; // custom\r\n\r\n            if (this.vibrato == Config.vibratos.length) {\r\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                this.vibratoType = instrumentObject[\"vibratoType\"];\r\n            }\r\n            else { // Set defaults for the vibrato profile\r\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\r\n                this.vibratoSpeed = 10; // default;\r\n                this.vibratoType = Config.vibratos[this.vibrato].type;\r\n            }\r\n\r\n            // Old songs may have a vibrato effect without explicitly enabling it.\r\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\r\n                this.effects = (this.effects | (1 << EffectType.vibrato));\r\n            }\r\n        }\r\n\r\n        if (instrumentObject[\"pan\"] != undefined) {\r\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n\r\n            // Old songs may have a panning effect without explicitly enabling it.\r\n            if (this.pan != Config.panCenter) {\r\n                this.effects = (this.effects | (1 << EffectType.panning));\r\n            }\r\n        } else {\r\n            this.pan = Config.panCenter;\r\n            // Still enabling pan effect, to make it a default\r\n            this.effects = (this.effects | (1 << EffectType.panning));\r\n        }\r\n\r\n        if (instrumentObject[\"panDelay\"] != undefined) {\r\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n        } else {\r\n            this.panDelay = 10;\r\n        }\r\n\r\n        if (instrumentObject[\"detune\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n        }\r\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\r\n            this.detune = Config.detuneCenter;\r\n        }\r\n\r\n        if (instrumentObject[\"distortion\"] != undefined) {\r\n            this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"bitcrusherOctave\"] != undefined) {\r\n            this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\r\n        }\r\n        if (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\r\n            this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"echoSustain\"] != undefined) {\r\n            this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\r\n        }\r\n        if (instrumentObject[\"echoDelayBeats\"] != undefined) {\r\n            this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\r\n        }\r\n\r\n        if (!isNaN(instrumentObject[\"chorus\"])) {\r\n            this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"reverb\"] != undefined) {\r\n            this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\r\n        } else {\r\n            this.reverb = legacyGlobalReverb;\r\n        }\r\n\r\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\r\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n        } else {\r\n            this.pulseWidth = Config.pulseWidthRange;\r\n        }\r\n\r\n        if (instrumentObject[\"harmonics\"] != undefined) {\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n            }\r\n            this.harmonicsWave.markCustomWaveDirty();\r\n        } else {\r\n            this.harmonicsWave.reset();\r\n        }\r\n\r\n        if (instrumentObject[\"spectrum\"] != undefined) {\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n            }\r\n        } else {\r\n            this.spectrumWave.reset(isNoiseChannel);\r\n        }\r\n\r\n        if (instrumentObject[\"stringSustain\"] != undefined) {\r\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\r\n        } else {\r\n            this.stringSustain = 10;\r\n        }\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (this.chipNoise == -1) this.chipNoise = 1;\r\n        }\r\n\r\n        const legacyEnvelopeNames: Dictionary<string> = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\r\n        const getEnvelope = (name: any): Envelope | undefined => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];\r\n\r\n        if (this.type == InstrumentType.drumset) {\r\n            if (instrumentObject[\"drums\"] != undefined) {\r\n                for (let j: number = 0; j < Config.drumCount; j++) {\r\n                    const drum: any = instrumentObject[\"drums\"][j];\r\n                    if (drum == undefined) continue;\r\n\r\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\r\n                    if (drum[\"filterEnvelope\"] != undefined) {\r\n                        const envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\r\n                        if (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\r\n                    }\r\n                    if (drum[\"spectrum\"] != undefined) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.type == InstrumentType.chip) {\r\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 5, \"sawtooth\": 11, \"double saw\": 12, \"double pulse\": 13, \"spiky\": 14, \"plateau\": 0 };\r\n            this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (this.chipWave == -1) this.chipWave = 1;\r\n        }\r\n\r\n        if (this.type == InstrumentType.fm) {\r\n            this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n            if (this.algorithm == -1) this.algorithm = 0;\r\n            this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n            if (this.feedbackType == -1) this.feedbackType = 0;\r\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n            } else {\r\n                this.feedbackAmplitude = 0;\r\n            }\r\n\r\n            for (let j: number = 0; j < Config.operatorCount; j++) {\r\n                const operator: Operator = this.operators[j];\r\n                let operatorObject: any = undefined;\r\n                if (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\r\n                if (operatorObject == undefined) operatorObject = {};\r\n\r\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n                if (operator.frequency == -1) operator.frequency = 0;\r\n                if (operatorObject[\"amplitude\"] != undefined) {\r\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n                } else {\r\n                    operator.amplitude = 0;\r\n                }\r\n                if (operatorObject[\"waveform\"] != undefined) {\r\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\r\n                    if (operator.waveform == -1) {\r\n                        // GoldBox compatibility\r\n                        if (operatorObject[\"waveform\"] == \"square\") {\r\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\r\n                            operator.pulseWidth = 5;\r\n                        } else {\r\n                            operator.waveform = 0;\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    operator.waveform = 0;\r\n                }\r\n                if (operatorObject[\"pulseWidth\"] != undefined) {\r\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\r\n                } else {\r\n                    operator.pulseWidth = 5;\r\n                }\r\n            }\r\n        }\r\n        else if (this.type == InstrumentType.customChipWave) {\r\n            if (instrumentObject[\"customChipWave\"]) {\r\n\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n                }\r\n\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n            }\r\n        } else if (this.type == InstrumentType.mod) {\r\n            if (instrumentObject[\"modChannels\"] != undefined) {\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.type != InstrumentType.mod) {\r\n            // Arpeggio speed\r\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n            }\r\n            else {\r\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n            }\r\n\r\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n            }\r\n            else {\r\n                this.fastTwoNoteArp = useFastTwoNoteArp;\r\n            }\r\n\r\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioPattern\"] != undefined) {\r\n                this.arpeggioPattern = instrumentObject[\"arpeggioPattern\"];\r\n            }\r\n            else {\r\n                // Using the legacy arpeggio to not break imported songs.\r\n                this.arpeggioPattern = 1;\r\n            }\r\n\r\n            if (instrumentObject[\"strumSpeed\"] != undefined) {\r\n                this.strumSpeed = instrumentObject[\"strumSpeed\"];\r\n            }\r\n            else {\r\n                this.strumSpeed = 23;\r\n            } \r\n\r\n            if (instrumentObject[\"slideSpeed\"] != undefined) {\r\n                this.slideSpeed = instrumentObject[\"slideSpeed\"];\r\n            }\r\n            else {\r\n                this.slideSpeed = 21;\r\n            } \r\n\r\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n            }\r\n            else {\r\n                this.clicklessTransition = false;\r\n            }\r\n\r\n            if (instrumentObject[\"continueThruPattern\"] != undefined) {\r\n                this.continueThruPattern = instrumentObject[\"continueThruPattern\"];\r\n            }\r\n            else {\r\n                this.continueThruPattern = false;\r\n            }\r\n\r\n            if (instrumentObject[\"aliases\"] != undefined) {\r\n                this.aliases = instrumentObject[\"aliases\"];\r\n            }\r\n            else {\r\n                this.aliases = false;\r\n            }\r\n\r\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\r\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\r\n            }\r\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\r\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\r\n            }\r\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\r\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\r\n            }\r\n            if (instrumentObject[\"noteFilter\"] != undefined) {\r\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\r\n            } else {\r\n                this.noteFilter.reset();\r\n            }\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\r\n                    this.noteSubFilters[i] = new FilterSettings();\r\n                    this.noteSubFilters[i]!.fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\r\n                }\r\n            }\r\n            if (instrumentObject[\"eqFilterType\"] != undefined) {\r\n                this.eqFilterType = instrumentObject[\"eqFilterType\"];\r\n            }\r\n            if (instrumentObject[\"eqSimpleCut\"] != undefined) {\r\n                this.eqFilterSimpleCut = instrumentObject[\"eqSimpleCut\"];\r\n            }\r\n            if (instrumentObject[\"eqSimplePeak\"] != undefined) {\r\n                this.eqFilterSimplePeak = instrumentObject[\"eqSimplePeak\"];\r\n            }\r\n            if (Array.isArray(instrumentObject[\"eqFilter\"])) {\r\n                this.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\r\n            } else {\r\n                this.eqFilter.reset();\r\n\r\n                const legacySettings: LegacySettings = {};\r\n\r\n                // Try converting from legacy filter settings.\r\n                const filterCutoffMaxHz: number = 8000;\r\n                const filterCutoffRange: number = 11;\r\n                const filterResonanceRange: number = 8;\r\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\r\n                } else {\r\n                    legacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n                }\r\n                if (instrumentObject[\"filterResonance\"] != undefined) {\r\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n                } else {\r\n                    legacySettings.filterResonance = 0;\r\n                }\r\n\r\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\r\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\r\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\r\n                if (Array.isArray(instrumentObject[\"operators\"])) {\r\n                    legacySettings.operatorEnvelopes = [];\r\n                    for (let j: number = 0; j < Config.operatorCount; j++) {\r\n                        let envelope: Envelope | undefined;\r\n                        if (instrumentObject[\"operators\"][j] != undefined) {\r\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\r\n                        }\r\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\r\n                    }\r\n                }\r\n\r\n                // Try converting from even older legacy filter settings.\r\n                if (instrumentObject[\"filter\"] != undefined) {\r\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                    const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\r\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n                    const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n                    let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n                    if (legacyFilter == -1) legacyFilter = 0;\r\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\r\n                    legacySettings.filterResonance = 0;\r\n                }\r\n\r\n                this.convertLegacySettings(legacySettings, true);\r\n            }\r\n\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (Array.isArray(instrumentObject[\"eqSubFilters\" + i])) {\r\n                    this.eqSubFilters[i] = new FilterSettings();\r\n                    this.eqSubFilters[i]!.fromJsonObject(instrumentObject[\"eqSubFilters\" + i]);\r\n                }\r\n            }\r\n\r\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\r\n                const envelopeArray: any[] = instrumentObject[\"envelopes\"];\r\n                for (let i = 0; i < envelopeArray.length; i++) {\r\n                    if (this.envelopeCount >= Config.maxEnvelopeCount) break;\r\n                    const tempEnvelope: EnvelopeSettings = new EnvelopeSettings();\r\n                    tempEnvelope.fromJsonObject(envelopeArray[i]);\r\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static frequencyFromPitch(pitch: number): number {\r\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n    }\r\n\r\n    public addEnvelope(target: number, index: number, envelope: number): void {\r\n        let makeEmpty: boolean = false;\r\n        if (!this.supportsEnvelopeTarget(target, index)) makeEmpty = true;\r\n        if (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\r\n        while (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings();\r\n        const envelopeSettings: EnvelopeSettings = this.envelopes[this.envelopeCount];\r\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\r\n        envelopeSettings.index = makeEmpty ? 0 : index;\r\n        envelopeSettings.envelope = envelope;\r\n        this.envelopeCount++;\r\n    }\r\n\r\n    public supportsEnvelopeTarget(target: number, index: number): boolean {\r\n        const automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\r\n        if (index >= automationTarget.maxCount) {\r\n            return false;\r\n        }\r\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\r\n            return false;\r\n        }\r\n        if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\r\n            return false;\r\n        }\r\n        if (automationTarget.isFilter) {\r\n            //if (automationTarget.perNote) {\r\n            let useControlPointCount: number = this.noteFilter.controlPointCount;\r\n            if (this.noteFilterType)\r\n                useControlPointCount = 1;\r\n            if (index >= useControlPointCount) return false;\r\n            //} else {\r\n            //\tif (index >= this.eqFilter.controlPointCount)   return false;\r\n            //}\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public clearInvalidEnvelopeTargets(): void {\r\n        for (let envelopeIndex: number = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\r\n            const target: number = this.envelopes[envelopeIndex].target;\r\n            const index: number = this.envelopes[envelopeIndex].index;\r\n            if (!this.supportsEnvelopeTarget(target, index)) {\r\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\r\n                this.envelopes[envelopeIndex].index = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTransition(): Transition {\r\n        return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :\r\n            (this.type == InstrumentType.mod ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\r\n    }\r\n\r\n    public getFadeInSeconds(): number {\r\n        return (this.type == InstrumentType.drumset) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\r\n    }\r\n\r\n    public getFadeOutTicks(): number {\r\n        return (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut)\r\n    }\r\n\r\n    public getChord(): Chord {\r\n        return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\r\n    }\r\n\r\n    public getDrumsetEnvelope(pitch: number): Envelope {\r\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n    }\r\n}\r\n\r\nexport class Channel {\r\n    public octave: number = 0;\r\n    public readonly instruments: Instrument[] = [];\r\n    public readonly patterns: Pattern[] = [];\r\n    public readonly bars: number[] = [];\r\n    public muted: boolean = false;\r\n    public name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n    private static readonly _format: string = \"BeepBox\";\r\n    private static readonly _oldestBeepboxVersion: number = 2;\r\n    private static readonly _latestBeepboxVersion: number = 9;\r\n    private static readonly _oldestJummBoxVersion: number = 1;\r\n    private static readonly _latestJummBoxVersion: number = 5;\r\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox.\r\n    private static readonly _variant = 0x6A; //\"j\" ~ jummbox\r\n\r\n    public title: string;\r\n    public subtitle: string;\r\n    public scale: number;\r\n    public key: number;\r\n    public tempo: number;\r\n    public reverb: number;\r\n    public beatsPerBar: number;\r\n    public barCount: number;\r\n    public patternsPerChannel: number;\r\n    public rhythm: number;\r\n    public layeredInstruments: boolean;\r\n    public patternInstruments: boolean;\r\n    public loopStart: number;\r\n    public loopLength: number;\r\n    public pitchChannelCount: number;\r\n    public noiseChannelCount: number;\r\n    public modChannelCount: number;\r\n    public readonly channels: Channel[] = [];\r\n    public limitDecay: number = 4.0;\r\n    public limitRise: number = 4000.0;\r\n    public compressionThreshold: number = 1.0;\r\n    public limitThreshold: number = 1.0;\r\n    public compressionRatio: number = 1.0;\r\n    public limitRatio: number = 1.0;\r\n    public masterGain: number = 1.0;\r\n    public inVolumeCap: number = 0.0;\r\n    public outVolumeCap: number = 0.0;\r\n\r\n    constructor(string?: string) {\r\n        if (string != undefined) {\r\n            this.fromBase64String(string);\r\n        } else {\r\n            this.initToDefault(true);\r\n        }\r\n    }\r\n\r\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let vol: number | undefined = Config.modulators[this.channels[modChannel].instruments[modInstrument].modulators[modCount]].newNoteVol;\r\n\r\n            // For tempo, actually use user defined tempo\r\n            let tempoIndex: number = Config.modulators.dictionary[\"tempo\"].index;\r\n            if (this.channels[modChannel].instruments[modInstrument].modulators[modCount] == tempoIndex) {\r\n                vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\r\n            }\r\n\r\n            if (vol != undefined)\r\n                return vol;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n\r\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let instrument: Instrument = this.channels[modChannel].instruments[modInstrument];\r\n            let modulator = Config.modulators[instrument.modulators[modCount]];\r\n            let cap: number | undefined = modulator.maxRawVol;\r\n\r\n            if (cap != undefined) {\r\n                // For filters, cap is dependent on which filter setting is targeted\r\n                if (modulator.name == \"eq filter\" || modulator.name == \"note filter\") {\r\n                    // type 0: number of filter morphs\r\n                    // type 1/odd: number of filter x positions\r\n                    // type 2/even: number of filter y positions\r\n                    cap = Config.filterMorphCount - 1;\r\n                    if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\r\n                        cap = Config.filterFreqRange;\r\n                    } else if (instrument.modFilterTypes[modCount] > 0) {\r\n                        cap = Config.filterGainRange;\r\n                    }\r\n                }\r\n                return cap;\r\n            }\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: number, filterType?: number): number => {\r\n        if (!isMod)\r\n            return Config.noteSizeMax;\r\n        else {\r\n            let cap: number | undefined = Config.modulators[modSetting].maxRawVol;\r\n            if (cap != undefined) {\r\n\r\n                // For filters, cap is dependent on which filter setting is targeted\r\n                if (filterType != undefined && (Config.modulators[modSetting].name == \"eq filter\" || Config.modulators[modSetting].name == \"note filter\")) {\r\n                    // type 0: number of filter morphs\r\n                    // type 1/odd: number of filter x positions\r\n                    // type 2/even: number of filter y positions\r\n                    cap = Config.filterMorphCount - 1;\r\n                    if (filterType > 0 && filterType % 2) {\r\n                        cap = Config.filterFreqRange;\r\n                    } else if (filterType > 0) {\r\n                        cap = Config.filterGainRange;\r\n                    }\r\n                }\r\n\r\n                return cap;\r\n            }\r\n            else\r\n                return Config.noteSizeMax;\r\n        }\r\n    }\r\n\r\n    public getChannelCount(): number {\r\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n    }\r\n\r\n    public getMaxInstrumentsPerChannel(): number {\r\n        return Math.max(\r\n            this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\r\n            this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\r\n    }\r\n\r\n    public getMaxInstrumentsPerPattern(channelIndex: number): number {\r\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\r\n    }\r\n\r\n    public getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\r\n        return this.layeredInstruments\r\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\r\n            : 1;\r\n    }\r\n\r\n    public getChannelIsNoise(channelIndex: number): boolean {\r\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public getChannelIsMod(channelIndex: number): boolean {\r\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public initToDefault(andResetChannels: boolean = true): void {\r\n        this.scale = 0;\r\n        this.key = 0;\r\n        this.loopStart = 0;\r\n        this.loopLength = 8;\r\n        this.tempo = 150;\r\n        this.reverb = 0;\r\n        this.beatsPerBar = 8;\r\n        this.barCount = 16;\r\n        this.patternsPerChannel = 32;\r\n        this.rhythm = 3;\r\n        this.layeredInstruments = false;\r\n        this.patternInstruments = false;\r\n\r\n        this.title = \"Warning! Songs made in\";\r\n        this.subtitle = \"this fork may be corrupted!\";\r\n        document.title = EditorConfig.versionDisplayName;\r\n\r\n        if (andResetChannels) {\r\n            this.pitchChannelCount = 4;\r\n            this.noiseChannelCount = 2;\r\n            this.modChannelCount = 1;\r\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n                if (this.channels.length <= channelIndex) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                const channel: Channel = this.channels[channelIndex];\r\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\r\n\r\n                for (let pattern: number = 0; pattern < this.patternsPerChannel; pattern++) {\r\n                    if (channel.patterns.length <= pattern) {\r\n                        channel.patterns[pattern] = new Pattern();\r\n                    } else {\r\n                        channel.patterns[pattern].reset();\r\n                    }\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let instrument: number = 0; instrument < Config.instrumentCountMin; instrument++) {\r\n                    if (channel.instruments.length <= instrument) {\r\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = Config.instrumentCountMin;\r\n\r\n                for (let bar: number = 0; bar < this.barCount; bar++) {\r\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n            this.channels.length = this.getChannelCount();\r\n        }\r\n    }\r\n\r\n    public toBase64String(): string {\r\n        let bits: BitFieldWriter;\r\n        let buffer: number[] = [];\r\n\r\n        buffer.push(Song._variant);\r\n        buffer.push(base64IntToCharCode[Song._latestJummBoxVersion]);\r\n\r\n        // Length of the song name string\r\n        buffer.push(SongTagCode.songTitle);\r\n        var encodedSongTitle: string = encodeURIComponent(this.title);\r\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n        // Actual encoded string follows\r\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n            buffer.push(encodedSongTitle.charCodeAt(i));\r\n        }\r\n\r\n        // Length of the song subtitle string\r\n        buffer.push(SongTagCode.songSubtitle);\r\n        var encodedSongSubtitle: string = encodeURIComponent(this.subtitle);\r\n        buffer.push(base64IntToCharCode[encodedSongSubtitle.length >> 6], base64IntToCharCode[encodedSongSubtitle.length & 0x3f]);\r\n\r\n        // Actual encoded string follows\r\n        for (let i: number = 0; i < encodedSongSubtitle.length; i++) {\r\n            buffer.push(encodedSongSubtitle.charCodeAt(i));\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\r\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n        // Push limiter settings, but only if they aren't the default!\r\n        buffer.push(SongTagCode.limiterSettings);\r\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n        }\r\n        else {\r\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelNames);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            // Length of the channel name string\r\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n            // Actual encoded string follows\r\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\r\n                buffer.push(encodedChannelName.charCodeAt(i));\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\r\n        if (this.layeredInstruments || this.patternInstruments) {\r\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelOctave);\r\n        for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\r\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\r\n        }\r\n\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n\r\n                buffer.push(SongTagCode.eqFilter);\r\n                buffer.push(base64IntToCharCode[+instrument.eqFilterType]);\r\n                if (instrument.eqFilterType) {\r\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);\r\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);\r\n                }\r\n                else {\r\n                    if (instrument.eqFilter == null) {\r\n                        // Push null filter settings\r\n                        buffer.push(base64IntToCharCode[0]);\r\n                        console.log(\"Null EQ filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\r\n                    } else {\r\n                        buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);\r\n                        for (let j: number = 0; j < instrument.eqFilter.controlPointCount; j++) {\r\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[j];\r\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                        }\r\n                    }\r\n\r\n                    // Push subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                    let usingSubFilterBitfield: number = 0;\r\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                        usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);\r\n                    }\r\n                    // Put subfilter usage into 2 chars (12 bits)\r\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\r\n                    // Put subfilter info in for all used subfilters\r\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                        if (usingSubFilterBitfield & (1 << j)) {\r\n                            buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1]!.controlPointCount]);\r\n                            for (let k: number = 0; k < instrument.eqSubFilters[j + 1]!.controlPointCount; k++) {\r\n                                const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[k];\r\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // The list of enabled effects is represented as a 12-bit bitfield using two six-bit characters.\r\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects >> 6], base64IntToCharCode[instrument.effects & 63]);\r\n                if (effectsIncludeNoteFilter(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\r\n                    if (instrument.noteFilterType) {\r\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\r\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\r\n                    }\r\n                    else {\r\n                        if (instrument.noteFilter == null) {\r\n                            // Push null filter settings\r\n                            buffer.push(base64IntToCharCode[0]);\r\n                            console.log(\"Null note filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\r\n                        }\r\n                        else {\r\n                            buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\r\n                            for (let j: number = 0; j < instrument.noteFilter.controlPointCount; j++) {\r\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[j];\r\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                            }\r\n                        }\r\n\r\n                        // Push subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                        let usingSubFilterBitfield: number = 0;\r\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                            usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\r\n                        }\r\n                        // Put subfilter usage into 2 chars (12 bits)\r\n                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\r\n                        // Put subfilter info in for all used subfilters\r\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                            if (usingSubFilterBitfield & (1 << j)) {\r\n                                buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1]!.controlPointCount]);\r\n                                for (let k: number = 0; k < instrument.noteSubFilters[j + 1]!.controlPointCount; k++) {\r\n                                    const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[k];\r\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (effectsIncludeTransition(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.transition]);\r\n                    if (Config.transitions[instrument.transition].slides) {\r\n                        buffer.push(base64IntToCharCode[instrument.slideSpeed]);\r\n                    }\r\n                }\r\n                if (effectsIncludeChord(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.chord]);\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\r\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                        buffer.push(base64IntToCharCode[+instrument.arpeggioPattern]);\r\n                    }\r\n                    // Also don't forget strum speed! Only if the instrument strums.\r\n                    else if (Config.chords[instrument.chord].strumParts > 0) {\r\n                        buffer.push(base64IntToCharCode[instrument.strumSpeed]);\r\n                    }\r\n                }\r\n                if (effectsIncludePitchShift(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\r\n                }\r\n                if (effectsIncludeDetune(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\r\n                }\r\n                if (effectsIncludeVibrato(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                }\r\n                if (effectsIncludeDistortion(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.distortion]);\r\n                    // Aliasing is tied into distortion for now\r\n                    buffer.push(base64IntToCharCode[+instrument.aliases]);\r\n                }\r\n                if (effectsIncludeBitcrusher(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\r\n                }\r\n                if (effectsIncludePanning(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n                    buffer.push(base64IntToCharCode[instrument.panDelay]);\r\n                }\r\n                if (effectsIncludeChorus(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.chorus]);\r\n                }\r\n                if (effectsIncludeEcho(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\r\n                }\r\n                if (effectsIncludeReverb(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.reverb]);\r\n                }\r\n\r\n                if (instrument.type != InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\r\n                    // Transition info follows transition song tag\r\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n                    buffer.push(base64IntToCharCode[+instrument.continueThruPattern]);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\r\n                    buffer.push(SongTagCode.harmonics);\r\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n                    }\r\n                    harmonicsBits.encodeBase64(buffer);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.chip) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                } else if (instrument.type == InstrumentType.fm) {\r\n                    buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n                    buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\r\n                    buffer.push(SongTagCode.operatorFrequencies);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorAmplitudes);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n                    }\r\n\r\n                    buffer.push(SongTagCode.operatorWaves);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\r\n                        // Push pulse width if that type is used\r\n                        if (instrument.operators[o].waveform == 3) {\r\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\r\n                        }\r\n                    }\r\n                } else if (instrument.type == InstrumentType.customChipWave) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    buffer.push(SongTagCode.customChipWave);\r\n                    // Push custom wave values\r\n                    for (let j: number = 0; j < 64; j++) {\r\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.noise) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n                } else if (instrument.type == InstrumentType.spectrum) {\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.drumsetEnvelopes);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n                    }\r\n\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n                        }\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.harmonics) {\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                } else if (instrument.type == InstrumentType.pwm) {\r\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\r\n                } else if (instrument.type == InstrumentType.pickedString) {\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    buffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain]);\r\n                } else if (instrument.type == InstrumentType.mod) {\r\n                    // Handled down below. Could be moved, but meh.\r\n                } else {\r\n                    throw new Error(\"Unknown instrument type.\");\r\n                }\r\n\r\n                buffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\r\n                for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\r\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\r\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\r\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\r\n                    }\r\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\r\n                }\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.bars);\r\n        bits = new BitFieldWriter();\r\n        let neededBits: number = 0;\r\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i: number = 0; i < this.barCount; i++) {\r\n            bits.write(neededBits, this.channels[channelIndex].bars[i]);\r\n        }\r\n        bits.encodeBase64(buffer);\r\n\r\n        buffer.push(SongTagCode.patterns);\r\n        bits = new BitFieldWriter();\r\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\r\n        const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            const channel: Channel = this.channels[channelIndex];\r\n            const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n            const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\r\n            const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\r\n\r\n            // Some info about modulator settings immediately follows in mod channels.\r\n            if (isModChannel) {\r\n                const neededModInstrumentIndexBits: number = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\r\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n\r\n                    let instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\r\n\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        const modChannel: number = instrument.modChannels[mod];\r\n                        const modInstrument: number = instrument.modInstruments[mod];\r\n                        const modSetting: number = instrument.modulators[mod];\r\n                        const modFilter: number = instrument.modFilterTypes[mod];\r\n\r\n                        // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\r\n                        // 0 - For pitch/noise\r\n                        // 1 - (used to be For noise, not needed)\r\n                        // 2 - For song\r\n                        // 3 - None\r\n\r\n                        let status: number = Config.modulators[modSetting].forSong ? 2 : 0;\r\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\r\n                            status = 3;\r\n\r\n                        bits.write(2, status);\r\n\r\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                        if (status == 0 || status == 1) {\r\n                            bits.write(8, modChannel);\r\n                            bits.write(neededModInstrumentIndexBits, modInstrument);\r\n                        }\r\n\r\n                        // Only used if setting isn't \"none\".\r\n                        if (status != 3) {\r\n                            bits.write(6, modSetting);\r\n                        }\r\n\r\n                        // Write mod filter info, only if this is a filter mod\r\n                        if (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\") {\r\n                            bits.write(6, modFilter);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\r\n            let lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\r\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\r\n            const recentShapes: string[] = [];\r\n            for (let i: number = 0; i < recentPitches.length; i++) {\r\n                recentPitches[i] += octaveOffset;\r\n            }\r\n            for (const pattern of channel.patterns) {\r\n                if (this.patternInstruments) {\r\n                    const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\r\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\r\n                    for (let i: number = 0; i < instrumentCount; i++) {\r\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\r\n                    }\r\n                }\r\n\r\n                if (pattern.notes.length > 0) {\r\n                    bits.write(1, 1);\r\n\r\n                    let curPart: number = 0;\r\n                    for (const note of pattern.notes) {\r\n\r\n                        // For mod channels, a negative offset may be necessary.\r\n                        if (note.start < curPart && isModChannel) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            bits.write(1, 1); // negative offset\r\n                            bits.writePartDuration(curPart - note.start);\r\n                        }\r\n\r\n                        if (note.start > curPart) {\r\n                            bits.write(2, 0); // rest\r\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n                            bits.writePartDuration(note.start - curPart);\r\n                        }\r\n\r\n                        shapeBits.clear();\r\n\r\n                        // Old format was:\r\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n                        // New format is:\r\n                        //      0: 1 pitch\r\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                        if (note.pitches.length == 1) {\r\n                            shapeBits.write(1, 0);\r\n                        } else {\r\n                            shapeBits.write(1, 1);\r\n                            shapeBits.write(3, note.pitches.length - 2);\r\n                        }\r\n\r\n                        shapeBits.writePinCount(note.pins.length - 1);\r\n\r\n                        if (!isModChannel) {\r\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size); // volume\r\n                        }\r\n                        else {\r\n                            shapeBits.write(9, note.pins[0].size); // Modulator value. 9 bits for now = 512 max mod value?\r\n                        }\r\n\r\n                        let shapePart: number = 0;\r\n                        let startPitch: number = note.pitches[0];\r\n                        let currentPitch: number = startPitch;\r\n                        const pitchBends: number[] = [];\r\n                        for (let i: number = 1; i < note.pins.length; i++) {\r\n                            const pin: NotePin = note.pins[i];\r\n                            const nextPitch: number = startPitch + pin.interval;\r\n                            if (currentPitch != nextPitch) {\r\n                                shapeBits.write(1, 1);\r\n                                pitchBends.push(nextPitch);\r\n                                currentPitch = nextPitch;\r\n                            } else {\r\n                                shapeBits.write(1, 0);\r\n                            }\r\n                            shapeBits.writePartDuration(pin.time - shapePart);\r\n                            shapePart = pin.time;\r\n                            if (!isModChannel) {\r\n                                shapeBits.write(bitsPerNoteSize, pin.size);\r\n                            } else {\r\n                                shapeBits.write(9, pin.size);\r\n                            }\r\n                        }\r\n\r\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\r\n                        if (shapeIndex == -1) {\r\n                            bits.write(2, 1); // new shape\r\n                            bits.concat(shapeBits);\r\n                        } else {\r\n                            bits.write(1, 1); // old shape\r\n                            bits.writeLongTail(0, 0, shapeIndex);\r\n                            recentShapes.splice(shapeIndex, 1);\r\n                        }\r\n                        recentShapes.unshift(shapeString);\r\n                        if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\r\n                        for (let i: number = 0; i < allPitches.length; i++) {\r\n                            const pitch: number = allPitches[i];\r\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\r\n                            if (pitchIndex == -1) {\r\n                                let interval: number = 0;\r\n                                let pitchIter: number = lastPitch;\r\n                                if (pitchIter < pitch) {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter++;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n                                    }\r\n                                } else {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter--;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n                                    }\r\n                                }\r\n                                bits.write(1, 0);\r\n                                bits.writePitchInterval(interval);\r\n                            } else {\r\n                                bits.write(1, 1);\r\n                                bits.write(4, pitchIndex);\r\n                                recentPitches.splice(pitchIndex, 1);\r\n                            }\r\n                            recentPitches.unshift(pitch);\r\n                            if (recentPitches.length > 16) recentPitches.pop();\r\n\r\n                            if (i == note.pitches.length - 1) {\r\n                                lastPitch = note.pitches[0];\r\n                            } else {\r\n                                lastPitch = pitch;\r\n                            }\r\n                        }\r\n\r\n                        if (note.start == 0) {\r\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\r\n                        }\r\n\r\n                        curPart = note.end;\r\n                    }\r\n\r\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n                        bits.write(2, 0); // rest\r\n                        if (isModChannel) bits.write(1, 0); // positive offset\r\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n                    }\r\n                } else {\r\n                    bits.write(1, 0);\r\n                }\r\n            }\r\n        }\r\n        let stringLength: number = bits.lengthBase64();\r\n        let digits: number[] = [];\r\n        while (stringLength > 0) {\r\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n            stringLength = stringLength >> 6;\r\n        }\r\n        buffer.push(base64IntToCharCode[digits.length]);\r\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n        bits.encodeBase64(buffer);\r\n\r\n        const maxApplyArgs: number = 64000;\r\n        if (buffer.length < maxApplyArgs) {\r\n            // Note: Function.apply may break for long argument lists. \r\n            return String.fromCharCode.apply(null, buffer);\r\n        } else {\r\n            let result: string = \"\";\r\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    private static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\r\n        // I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\r\n        if (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\r\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\r\n    }\r\n\r\n    public fromBase64String(compressed: string): void {\r\n        if (compressed == null || compressed == \"\") {\r\n            this.initToDefault(true);\r\n            return;\r\n        }\r\n        let charIndex: number = 0;\r\n        // skip whitespace.\r\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n        // skip hash mark.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n        // if it starts with curly brace, treat it as JSON.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n            return;\r\n        }\r\n\r\n        const variantTest: number = compressed.charCodeAt(charIndex);\r\n        let fromBeepBox: boolean;\r\n        let fromJummBox: boolean;\r\n\r\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n        if (variantTest == 0x6A) { //\"j\"\r\n            fromBeepBox = false;\r\n            fromJummBox = true;\r\n            charIndex++;\r\n        } else {\r\n            fromBeepBox = true;\r\n            fromJummBox = false;\r\n        }\r\n\r\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n        const beforeTwo: boolean = version < 2;\r\n        const beforeThree: boolean = version < 3;\r\n        const beforeFour: boolean = version < 4;\r\n        const beforeFive: boolean = version < 5;\r\n        const beforeSix: boolean = version < 6;\r\n        const beforeSeven: boolean = version < 7;\r\n        const beforeEight: boolean = version < 8;\r\n        const beforeNine: boolean = version < 9;\r\n        this.initToDefault((fromBeepBox && beforeNine) || (fromJummBox && beforeFive));\r\n        const forceSimpleFilter: boolean = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\r\n\r\n        if (beforeThree && fromBeepBox) {\r\n            // Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\r\n            for (const channel of this.channels) {\r\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\r\n                channel.instruments[0].effects |= 1 << EffectType.transition;\r\n            }\r\n            this.channels[3].instruments[0].chipNoise = 0;\r\n        }\r\n\r\n        let legacySettingsCache: LegacySettings[][] | null = null;\r\n        if ((fromBeepBox && beforeNine) || (fromJummBox && beforeFive)) {\r\n            // Unfortunately, old versions of BeepBox had a variety of different ways of saving\r\n            // filter-and-envelope-related parameters in the URL, and none of them directly\r\n            // correspond to the new way of saving these parameters. We can approximate the old\r\n            // settings by collecting all the old settings for an instrument and passing them to\r\n            // convertLegacySettings(), so I use this data structure to collect the settings\r\n            // for each instrument if necessary.\r\n            legacySettingsCache = [];\r\n            for (let i: number = legacySettingsCache.length; i < this.getChannelCount(); i++) {\r\n                legacySettingsCache[i] = [];\r\n                for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\r\n            }\r\n        }\r\n\r\n        let legacyGlobalReverb: number = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\r\n\r\n        let instrumentChannelIterator: number = 0;\r\n        let instrumentIndexIterator: number = -1;\r\n        let command: number;\r\n        let useSlowerArpSpeed: boolean = false;\r\n        let useFastTwoNoteArp: boolean = false;\r\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n            case SongTagCode.songTitle: {\r\n                // Length of song name string\r\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n                charIndex += songNameLength;\r\n            } break;\r\n            case SongTagCode.songSubtitle: {\r\n                // Length of song subtitle string.\r\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.subtitle = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n\r\n                charIndex += songNameLength;\r\n            } break;\r\n            case SongTagCode.channelCount: {\r\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                if (fromBeepBox || beforeTwo) {\r\n                    // No mod channel support before jummbox v2\r\n                    this.modChannelCount = 0;\r\n                } else {\r\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                this.channels.length = this.getChannelCount();\r\n                if ((fromBeepBox && beforeNine) || (fromJummBox && beforeFive)) {\r\n                    for (let i: number = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\r\n                        legacySettingsCache![i] = [];\r\n                        for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.scale: {\r\n                this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // All the scales were jumbled around by Jummbox. Just convert to free.\r\n                if (fromBeepBox) this.scale = 0;\r\n            } break;\r\n            case SongTagCode.key: {\r\n                if (beforeSeven && fromBeepBox) {\r\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else {\r\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.loopStart: {\r\n                if (beforeFive && fromBeepBox) {\r\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n            } break;\r\n            case SongTagCode.loopEnd: {\r\n                if (beforeFive && fromBeepBox) {\r\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n            } break;\r\n            case SongTagCode.tempo: {\r\n                if (beforeFour && fromBeepBox) {\r\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n            } break;\r\n            case SongTagCode.reverb: {\r\n                if (beforeNine && fromBeepBox) {\r\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\r\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\r\n                } else if (beforeFive && fromJummBox) {\r\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\r\n                } else {\r\n                    // Do nothing, BeepBox v9+ do not support song-wide reverb - JummBox still does via modulator.\r\n                }\r\n            } break;\r\n            case SongTagCode.beatCount: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n            } break;\r\n            case SongTagCode.barCount: {\r\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n                for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\r\n                        this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\r\n                    }\r\n                    this.channels[channelIndex].bars.length = this.barCount;\r\n                }\r\n            } break;\r\n            case SongTagCode.patternCount: {\r\n                let patternsPerChannel: number;\r\n                if (beforeEight && fromBeepBox) {\r\n                    patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                } else {\r\n                    patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\r\n                const channelCount: number = this.getChannelCount();\r\n                for (let channelIndex: number = 0; channelIndex < channelCount; channelIndex++) {\r\n                    const patterns: Pattern[] = this.channels[channelIndex].patterns;\r\n                    for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n                        patterns[pattern] = new Pattern();\r\n                    }\r\n                    patterns.length = this.patternsPerChannel;\r\n                }\r\n            } break;\r\n            case SongTagCode.instrumentCount: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    const instrumentsPerChannel: number = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\r\n                    this.layeredInstruments = false;\r\n                    this.patternInstruments = (instrumentsPerChannel > 1);\r\n\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                        const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n\r\n                        for (let instrumentIndex: number = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\r\n                            this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n                        }\r\n                        this.channels[channelIndex].instruments.length = instrumentsPerChannel;\r\n                        if (beforeSix && fromBeepBox) {\r\n                            for (let instrumentIndex: number = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\r\n                                this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n                            }\r\n                        }\r\n\r\n                        for (let j: number = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\r\n                            legacySettingsCache![channelIndex][j] = {};\r\n                        }\r\n                    }\r\n                } else {\r\n                    const instrumentsFlagBits: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\r\n                    this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        let instrumentCount: number = 1;\r\n                        if (this.layeredInstruments || this.patternInstruments) {\r\n                            instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\r\n                        }\r\n                        const channel: Channel = this.channels[channelIndex];\r\n                        const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n                        const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n                        for (let i: number = channel.instruments.length; i < instrumentCount; i++) {\r\n                            channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n                        }\r\n                        channel.instruments.length = instrumentCount;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.rhythm: {\r\n                this.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\r\n                if (fromJummBox && beforeThree || fromBeepBox) {\r\n                    // These are all the rhythms that had 4 ticks/arpeggio instead of 3.\r\n                    if (this.rhythm == Config.rhythms.dictionary[\"÷3 (triplets)\"].index || this.rhythm == Config.rhythms.dictionary[\"÷6\"].index) {\r\n                        useSlowerArpSpeed = true;\r\n                    }\r\n                    // Use faster two note arp on these rhythms\r\n                    if (this.rhythm >= Config.rhythms.dictionary[\"÷6\"].index) {\r\n                        useFastTwoNoteArp = true;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.channelOctave: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                    if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\r\n                } else if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                        if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\r\n                    }\r\n                } else {\r\n                    for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\r\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    for (let channelIndex: number = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        this.channels[channelIndex].octave = 0;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.startInstrument: {\r\n                instrumentIndexIterator++;\r\n                if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\r\n                    instrumentChannelIterator++;\r\n                    instrumentIndexIterator = 0;\r\n                }\r\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // JB before v5 had custom chip in the place where pickedString is now, and mod one sooner as well. New index is +1 for both.\r\n                let instrumentType: number = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                if (fromJummBox && beforeFive) {\r\n                    if (instrumentType == InstrumentType.pickedString) {\r\n                        instrumentType = InstrumentType.customChipWave;\r\n                    }\r\n                    else if (instrumentType == InstrumentType.customChipWave) {\r\n                        instrumentType = InstrumentType.mod;\r\n                    }\r\n                }\r\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n\r\n                // Anti-aliasing was added in BeepBox 3.0 (v6->v7) and JummBox 1.3 (v1->v2 roughly but some leakage possible)\r\n                if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == InstrumentType.chip || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.pwm)) {\r\n                    instrument.aliases = true;\r\n                    instrument.distortion = 0;\r\n                    instrument.effects |= 1 << EffectType.distortion;\r\n                }\r\n                if (useSlowerArpSpeed) {\r\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n                }\r\n                if (useFastTwoNoteArp) {\r\n                    instrument.fastTwoNoteArp = true;\r\n                }\r\n\r\n                if (beforeSeven && fromBeepBox) {\r\n                    instrument.effects = 0;\r\n                    // Chip/noise instruments had arpeggio and FM had custom interval but neither\r\n                    // explicitly saved the chorus setting beforeSeven so enable it here.\r\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n                        // Enable chord if it was used.\r\n                        instrument.effects |= 1 << EffectType.chord;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.preset: {\r\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n                // Picked string was inserted before custom chip in JB v5, so bump up preset index.\r\n                if (fromJummBox && beforeFive) {\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.pickedString) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.wave: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                    instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\r\n                    // Version 2 didn't save any settings for settings for filters, or envelopes,\r\n                    // just waves, so initialize them here I guess.\r\n                    instrument.convertLegacySettings(legacySettingsCache![channelIndex][0], forceSimpleFilter);\r\n\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            if (channelIndex >= this.pitchChannelCount) {\r\n                                instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            } else {\r\n                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                    }\r\n                } else {\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.eqFilter: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    if (beforeSeven && fromBeepBox) {\r\n                        const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                        const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\r\n\r\n                        if (beforeThree && fromBeepBox) {\r\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\r\n                            const legacyFilter: number = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                            legacySettings.filterResonance = 0;\r\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                        } else if (beforeSix && fromBeepBox) {\r\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\r\n                                    const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                                    if (channelIndex < this.pitchChannelCount) {\r\n                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                                        legacySettings.filterResonance = 0;\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                                    } else {\r\n                                        legacySettings.filterCutoff = 10;\r\n                                        legacySettings.filterResonance = 0;\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\r\n                                    }\r\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                            legacySettings.filterResonance = 0;\r\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                        }\r\n                    } else {\r\n                        const filterCutoffRange: number = 11;\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    if (fromBeepBox || typeCheck == 0) {\r\n                        instrument.eqFilterType = false;\r\n                        if (fromJummBox)\r\n                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next to get control point count\r\n                        const originalControlPointCount: number = typeCheck;\r\n                        instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\r\n                        for (let i: number = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\r\n                            instrument.eqFilter.controlPoints[i] = new FilterControlPoint();\r\n                        }\r\n                        for (let i: number = 0; i < instrument.eqFilter.controlPointCount; i++) {\r\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[i];\r\n                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        for (let i: number = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\r\n                            charIndex += 3;\r\n                        }\r\n\r\n                        // Get subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                        instrument.eqSubFilters[0] = instrument.eqFilter;\r\n                        if (fromJummBox && !beforeFive) {\r\n                            let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                                if (usingSubFilterBitfield & (1 << j)) {\r\n                                    // Number of control points\r\n                                    const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                                    if (instrument.eqSubFilters[j + 1] == null)\r\n                                        instrument.eqSubFilters[j + 1] = new FilterSettings();\r\n                                    instrument.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\r\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPoints.length; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                        instrument.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\r\n                                    }\r\n                                    for (let i: number = 0; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                        const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[i];\r\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                    }\r\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\r\n                                        charIndex += 3;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        instrument.eqFilterType = true;\r\n                        instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.filterResonance: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    const filterResonanceRange: number = 8;\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.drumsetEnvelopes: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    if (instrument.type == InstrumentType.drumset) {\r\n                        for (let i: number = 0; i < Config.drumCount; i++) {\r\n                            instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]).index;\r\n                        }\r\n                    } else {\r\n                        // This used to be used for general filter envelopes.\r\n                        // The presence of an envelope affects how convertLegacySettings\r\n                        // decides the closest possible approximation, so update it.\r\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                        legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                    }\r\n                } else {\r\n                    // This tag is now only used for drumset filter envelopes.\r\n                    for (let i: number = 0; i < Config.drumCount; i++) {\r\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.pulseWidth: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)), base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                if (fromBeepBox) {\r\n                    // BeepBox formula\r\n                    instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\r\n\r\n                }\r\n\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                }\r\n            } break;\r\n            case SongTagCode.stringSustain: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                instrument.stringSustain = clamp(0, Config.stringSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.fadeInOut: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    // this tag was used for a combination of transition and fade in/out.\r\n                    const legacySettings = [\r\n                        { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\r\n                    ];\r\n                    if (beforeThree && fromBeepBox) {\r\n                        const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    } else if (beforeSix && fromBeepBox) {\r\n                        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                            for (const instrument of this.channels[channelIndex].instruments) {\r\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                                    // Enable transition if it was used.\r\n                                    instrument.effects |= 1 << EffectType.transition;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (beforeFour || fromBeepBox) {\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    } else {\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n\r\n                        // Read tie-note \r\n                        if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\r\n                            // Set legacy tie over flag, which is only used to port notes in patterns using this instrument as tying.\r\n                            instrument.legacyTieOver = true;\r\n\r\n                        }\r\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    if (fromJummBox) {\r\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                        instrument.continueThruPattern = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.vibrato: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    if (beforeSeven && fromBeepBox) {\r\n                        if (beforeThree && fromBeepBox) {\r\n                            const legacyEffects: number[] = [0, 3, 2, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\r\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                // Imitate the legacy tremolo with a filter envelope.\r\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                            }\r\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                // Enable vibrato if it was used.\r\n                                instrument.effects |= 1 << EffectType.vibrato;\r\n                            }\r\n                        } else if (beforeSix && fromBeepBox) {\r\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\r\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\r\n                                    instrument.vibrato = legacyEffects[effect];\r\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                        // Imitate the legacy tremolo with a filter envelope.\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                                    }\r\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                        // Enable vibrato if it was used.\r\n                                        instrument.effects |= 1 << EffectType.vibrato;\r\n                                    }\r\n                                    if ((legacyGlobalReverb != 0 || (fromJummBox && beforeFive)) && !this.getChannelIsNoise(channelIndex)) {\r\n                                        // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\r\n                                        instrument.effects |= 1 << EffectType.reverb;\r\n                                        instrument.reverb = legacyGlobalReverb;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                // Imitate the legacy tremolo with a filter envelope.\r\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                            }\r\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                // Enable vibrato if it was used.\r\n                                instrument.effects |= 1 << EffectType.vibrato;\r\n                            }\r\n                            if (legacyGlobalReverb != 0 || (fromJummBox && beforeFive)) {\r\n                                // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\r\n                                instrument.effects |= 1 << EffectType.reverb;\r\n                                instrument.reverb = legacyGlobalReverb;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibrato = vibrato;\r\n                        if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                            // Enable vibrato if it was used.\r\n                            instrument.effects |= 1 << EffectType.vibrato;\r\n                        }\r\n                        // Custom vibrato\r\n                        if (vibrato == Config.vibratos.length) {\r\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\r\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\r\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.effects |= 1 << EffectType.vibrato;\r\n                        }\r\n                        // Enforce standard vibrato settings\r\n                        else {\r\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                            instrument.vibratoSpeed = 10; // Normal speed\r\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\r\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.arpeggioSpeed: {\r\n                // Deprecated, but supported for legacy purposes\r\n                if (fromJummBox && beforeFive) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n                    instrument.arpeggioPattern = clamp(0, 10, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    // Do nothing, deprecated for now\r\n                }\r\n            } break;\r\n            case SongTagCode.unison: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            let unison: number = clamp(0, Config.unisons.length, originalValue);\r\n                            if (originalValue == 8) {\r\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                                unison = 2;\r\n                                instrument.chord = 3;\r\n                            }\r\n                            instrument.unison = unison;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    let unison: number = clamp(0, Config.unisons.length, originalValue);\r\n                    if (originalValue == 8) {\r\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                        unison = 2;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n                    }\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;\r\n                } else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.chord: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n                        // Enable chord if it was used.\r\n                        instrument.effects |= 1 << EffectType.chord;\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.effects: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\r\n                    if (legacyGlobalReverb == 0 && !(fromJummBox && beforeFive)) {\r\n                        // Disable reverb if legacy song reverb was zero.\r\n                        instrument.effects &= ~(1 << EffectType.reverb);\r\n                    } else if (effectsIncludeReverb(instrument.effects)) {\r\n                        instrument.reverb = legacyGlobalReverb;\r\n                    }\r\n                    // @jummbus - Enabling pan effect on song import no matter what to make it a default.\r\n                    //if (instrument.pan != Config.panCenter) {\r\n                    instrument.effects |= 1 << EffectType.panning;\r\n                    //}\r\n                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                        // Enable vibrato if it was used.\r\n                        instrument.effects |= 1 << EffectType.vibrato;\r\n                    }\r\n                    if (instrument.detune != Config.detuneCenter) {\r\n                        // Enable detune if it was used.\r\n                        instrument.effects |= 1 << EffectType.detune;\r\n                    }\r\n                    if (instrument.aliases)\r\n                        instrument.effects |= 1 << EffectType.distortion;\r\n                    else\r\n                        instrument.effects &= ~(1 << EffectType.distortion);\r\n\r\n                    // convertLegacySettings may need to force-enable note filter, call\r\n                    // it again here to make sure that this override takes precedence.\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    // BeepBox currently uses two base64 characters at 6 bits each for a bitfield representing all the enabled effects.\r\n                    if (EffectType.length > 12) throw new Error();\r\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                    if (effectsIncludeNoteFilter(instrument.effects)) {\r\n                        let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if (fromBeepBox || typeCheck == 0) {\r\n                            instrument.noteFilterType = false;\r\n                            if (fromJummBox)\r\n                                typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next index in jummbox to get actual count\r\n                            instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\r\n                            for (let i: number = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\r\n                                instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\r\n                            }\r\n                            for (let i: number = 0; i < instrument.noteFilter.controlPointCount; i++) {\r\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[i];\r\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            }\r\n                            for (let i: number = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {\r\n                                charIndex += 3;\r\n                            }\r\n\r\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                            instrument.noteSubFilters[0] = instrument.noteFilter;\r\n                            if (fromJummBox && !beforeFive) {\r\n                                let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                                    if (usingSubFilterBitfield & (1 << j)) {\r\n                                        // Number of control points\r\n                                        const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                                        if (instrument.noteSubFilters[j + 1] == null)\r\n                                            instrument.noteSubFilters[j + 1] = new FilterSettings();\r\n                                        instrument.noteSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\r\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPoints.length; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                            instrument.noteSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\r\n                                        }\r\n                                        for (let i: number = 0; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                            const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[i];\r\n                                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        }\r\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\r\n                                            charIndex += 3;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            instrument.noteFilterType = true;\r\n                            instrument.noteFilter.reset();\r\n                            instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                        }\r\n                    }\r\n                    if (effectsIncludeTransition(instrument.effects)) {\r\n                        instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        // Slide speed!\r\n                        if (Config.transitions[instrument.transition].slides) {\r\n                            instrument.slideSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        }\r\n                    }   \r\n                    if (effectsIncludeChord(instrument.effects)) {\r\n                        instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        // Custom arpeggio speed... only in JB, and only if the instrument arpeggiates.\r\n                        if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox)) {\r\n                            instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\r\n                            instrument.arpeggioPattern = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        }\r\n                        // Custom strum speed!\r\n                        else if (Config.chords[instrument.chord].strumParts > 0) {\r\n                            instrument.strumSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        }\r\n                    }\r\n                    if (effectsIncludePitchShift(instrument.effects)) {\r\n                        instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludeDetune(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // Convert from BeepBox's formula\r\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\r\n                        } else {\r\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                    if (effectsIncludeVibrato(instrument.effects)) {\r\n                        instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                        // Custom vibrato\r\n                        if (instrument.vibrato == Config.vibratos.length && fromJummBox) {\r\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        // Enforce standard vibrato settings\r\n                        else {\r\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                            instrument.vibratoSpeed = 10; // Normal speed\r\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\r\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                        }\r\n                    }\r\n                    if (effectsIncludeDistortion(instrument.effects)) {\r\n                        instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        if (fromJummBox && !beforeFive)\r\n                            instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                    }\r\n                    if (effectsIncludeBitcrusher(instrument.effects)) {\r\n                        instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludePanning(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                            instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n                        }\r\n                        else {\r\n                            instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n\r\n                        // Now, pan delay follows on new versions of jummbox.\r\n                        if (fromJummBox && !beforeTwo)\r\n                            instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    }\r\n                    if (effectsIncludeChorus(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // BeepBox has 4 chorus values vs. JB's 8\r\n                            instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\r\n                        }\r\n                        else {\r\n                            instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                    if (effectsIncludeEcho(instrument.effects)) {\r\n                        instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludeReverb(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\r\n                        } else {\r\n                            instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                }\r\n                // Clamp the range.\r\n                instrument.effects &= (1 << EffectType.length) - 1;\r\n            } break;\r\n            case SongTagCode.volume: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (fromBeepBox) {\r\n                    // Beepbox v9's volume range is 0-7 (0 is max, 7 is mute)\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n                }\r\n            } break;\r\n            case SongTagCode.pan: {\r\n                if (beforeNine && fromBeepBox) {\r\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\r\n                } else if (beforeFive && fromJummBox) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    // Pan delay follows on v3 + v4\r\n                    if (fromJummBox && !beforeThree) {\r\n                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.detune: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                if (fromJummBox && beforeFive) {\r\n                    // Before jummbox v5, detune was -50 to 50. Now it is 0 to 400\r\n                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\r\n                    instrument.effects |= 1 << EffectType.detune;\r\n                } else {\r\n                    // Now in v5, tag code is deprecated and handled thru detune effects.\r\n                }\r\n            } break;\r\n            case SongTagCode.customChipWave: {\r\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // Pop custom wave values\r\n                for (let j: number = 0; j < 64; j++) {\r\n                    instrument.customChipWave[j]\r\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    sum += instrument.customChipWave[i];\r\n                }\r\n                const average: number = sum / instrument.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = instrument.customChipWave[i] - average;\r\n                    instrument.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                instrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n            } break;\r\n            case SongTagCode.limiterSettings: {\r\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                // Check if limiter settings are used... if not, restore to default\r\n                if (nextValue == 0x3f) {\r\n                    this.restoreLimiterDefaults();\r\n                }\r\n                else {\r\n                    // Limiter is used, grab values\r\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n                }\r\n            } break;\r\n            case SongTagCode.channelNames: {\r\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n                    var channelNameLength;\r\n                    if (beforeFour)\r\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n                    else\r\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n                    charIndex += channelNameLength;\r\n                }\r\n            } break;\r\n            case SongTagCode.algorithm: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    // The algorithm determines the carrier count, which affects how legacy settings are imported.\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                }\r\n            } break;\r\n            case SongTagCode.feedbackType: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackAmplitude: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackEnvelope: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorFrequencies: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorAmplitudes: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.envelopes: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    legacySettings.operatorEnvelopes = [];\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    const envelopeCount: number = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    for (let i: number = 0; i < envelopeCount; i++) {\r\n                        const target: number = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        let index: number = 0;\r\n                        const maxCount: number = Config.instrumentAutomationTargets[target].maxCount;\r\n                        if (maxCount > 1) {\r\n                            index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        const envelope: number = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.addEnvelope(target, index, envelope);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorWaves: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    // Pulse width follows, if it is a pulse width operator wave\r\n                    if (instrument.operators[o].waveform == 3) {\r\n                        instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.spectrum: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.spectrum) {\r\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                    }\r\n                    instrument.spectrumWave.markCustomWaveDirty();\r\n                    charIndex += byteCount;\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                        }\r\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n                    }\r\n                    charIndex += byteCount;\r\n                } else {\r\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n                }\r\n            } break;\r\n            case SongTagCode.harmonics: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n                }\r\n                instrument.harmonicsWave.markCustomWaveDirty();\r\n                charIndex += byteCount;\r\n            } break;\r\n            case SongTagCode.aliases: {\r\n                if (fromJummBox && beforeFive) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\r\n                    if (instrument.aliases) {\r\n                        instrument.distortion = 0;\r\n                        instrument.effects |= 1 << EffectType.distortion;\r\n                    }\r\n                } else {\r\n                    // Do nothing, deprecated\r\n                }\r\n            }\r\n                break;\r\n            case SongTagCode.bars: {\r\n                let subStringLength: number;\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    subStringLength = Math.ceil(barCount * 0.5);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let i: number = 0; i < barCount; i++) {\r\n                        this.channels[channelIndex].bars[i] = bits.read(3) + 1;\r\n                    }\r\n                } else if (beforeFive && fromBeepBox) {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits);\r\n                        }\r\n                    }\r\n                }\r\n                charIndex += subStringLength;\r\n            } break;\r\n            case SongTagCode.patterns: {\r\n                let bitStringLength: number = 0;\r\n                let channelIndex: number;\r\n                let largerChords: boolean = !((beforeFour && fromJummBox) || fromBeepBox);\r\n                let recentPitchBitLength: number = (largerChords ? 4 : 3);\r\n                let recentPitchLength: number = (largerChords ? 16 : 8);\r\n                if (beforeThree && fromBeepBox) {\r\n                    channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \r\n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    bitStringLength = bitStringLength << 6;\r\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    channelIndex = 0;\r\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    while (bitStringLengthLength > 0) {\r\n                        bitStringLength = bitStringLength << 6;\r\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        bitStringLengthLength--;\r\n                    }\r\n                }\r\n\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n                charIndex += bitStringLength;\r\n\r\n                const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\r\n                let songReverbChannel: number = -1;\r\n                let songReverbInstrument: number = -1;\r\n                let songReverbIndex: number = -1;\r\n\r\n                while (true) {\r\n                    const channel: Channel = this.channels[channelIndex];\r\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n                    const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n\r\n                    const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\r\n                    const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\r\n\r\n                    const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\r\n\r\n                    // Some info about modulator settings immediately follows in mod channels.\r\n                    if (isModChannel) {\r\n\r\n                        // 2 more indices for 'all' and 'active'\r\n                        const neededModInstrumentIndexBits: number = (beforeFive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\r\n\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n\r\n                            let instrument: Instrument = channel.instruments[instrumentIndex];\r\n\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\r\n                                // 0 - For pitch/noise\r\n                                // 1 - (used to be For noise, not needed)\r\n                                // 2 - For song\r\n                                // 3 - None\r\n                                let status: number = bits.read(2);\r\n\r\n                                switch (status) {\r\n                                    case 0: // Pitch\r\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\r\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\r\n                                        break;\r\n                                    case 1: // Noise\r\n                                        // Getting a status of 1 means this is legacy mod info. Need to add pitch channel count, as it used to just store noise channel index and not overall channel index\r\n                                        instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\r\n                                        break;\r\n                                    case 2: // For song\r\n                                        instrument.modChannels[mod] = -1;\r\n                                        break;\r\n                                    case 3: // None\r\n                                        instrument.modChannels[mod] = -2;\r\n                                        break;\r\n                                }\r\n\r\n                                // Mod setting is only used if the status isn't \"none\".\r\n                                if (status != 3) {\r\n                                    instrument.modulators[mod] = bits.read(6);\r\n                                }\r\n\r\n                                if (!beforeFive && (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\")) {\r\n                                    instrument.modFilterTypes[mod] = bits.read(6);\r\n                                }\r\n\r\n                                if (beforeFive && instrument.modChannels[mod] >= 0) {\r\n                                    let forNoteFilter: boolean = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);\r\n\r\n                                    // For legacy filter cut/peak, need to denote since scaling must be applied\r\n                                    if (instrument.modulators[mod] == 7) {\r\n                                        // Legacy filter cut index\r\n                                        // Check if there is no filter dot on prospective filter. If so, add a low pass at max possible freq.\r\n\r\n                                        if (forNoteFilter) {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\r\n                                        }\r\n                                        else {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\r\n                                        }\r\n\r\n                                        instrument.modFilterTypes[mod] = 1; // Dot 1 X\r\n\r\n                                    }\r\n                                    else if (instrument.modulators[mod] == 8) {\r\n                                        // Legacy filter peak index\r\n                                        if (forNoteFilter) {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\r\n                                        }\r\n                                        else {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\r\n                                        }\r\n\r\n                                        instrument.modFilterTypes[mod] = 2; // Dot 1 Y\r\n                                    }\r\n                                }\r\n                                else if (beforeFive) {\r\n                                    // Check for song reverb mod, which must be handled differently now that it is a multiplier\r\n                                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\r\n                                        songReverbChannel = channelIndex;\r\n                                        songReverbInstrument = instrumentIndex;\r\n                                        songReverbIndex = mod;\r\n                                    }\r\n                                }\r\n\r\n                                // Based on setting, enable some effects for the modulated instrument. This isn't always set, say if the instrument's pan was right in the center.\r\n                                // Only used on import of old songs, because sometimes an invalid effect can be set in a mod in the new version that is actually unused. In that case,\r\n                                // keeping the mod invalid is better since it preserves the state.\r\n                                if (beforeFive && Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length) {\r\n                                    this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Scalar applied to detune mods since its granularity was upped. Could be repurposed later if any other granularity changes occur.\r\n                    const detuneScaleNotes: number[][] = [];\r\n                    for (let j: number = 0; j < channel.instruments.length; j++) {\r\n                        detuneScaleNotes[j] = [];\r\n                        for (let i: number = 0; i < Config.modCount; i++) {\r\n                            detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(beforeFive && fromJummBox && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\r\n                        }\r\n                    }\r\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\r\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\r\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\r\n                    const recentShapes: any[] = [];\r\n                    for (let i: number = 0; i < recentPitches.length; i++) {\r\n                        recentPitches[i] += octaveOffset;\r\n                    }\r\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                        const newPattern: Pattern = channel.patterns[i];\r\n\r\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\r\n                            newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\r\n                            newPattern.instruments.length = 1;\r\n                        } else {\r\n                            if (this.patternInstruments) {\r\n                                const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\r\n                                for (let j: number = 0; j < instrumentCount; j++) {\r\n                                    newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\r\n                                }\r\n                                newPattern.instruments.length = instrumentCount;\r\n                            } else {\r\n                                newPattern.instruments[0] = 0;\r\n                                newPattern.instruments.length = Config.instrumentCountMin;\r\n                            }\r\n                        }\r\n\r\n                        if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\r\n                            newPattern.notes.length = 0;\r\n                            continue;\r\n                        }\r\n\r\n                        let curPart: number = 0;\r\n                        const newNotes: Note[] = newPattern.notes;\r\n                        let noteCount: number = 0;\r\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n                            const useOldShape: boolean = bits.read(1) == 1;\r\n                            let newNote: boolean = false;\r\n                            let shapeIndex: number = 0;\r\n                            if (useOldShape) {\r\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n                            } else {\r\n                                newNote = bits.read(1) == 1;\r\n                            }\r\n\r\n                            if (!useOldShape && !newNote) {\r\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n                                if (isModChannel) {\r\n                                    const isBackwards: boolean = bits.read(1) == 1;\r\n                                    const restLength: number = bits.readPartDuration();\r\n                                    if (isBackwards) {\r\n                                        curPart -= restLength;\r\n                                    }\r\n                                    else {\r\n                                        curPart += restLength;\r\n                                    }\r\n                                } else {\r\n                                    const restLength: number = (beforeSeven && fromBeepBox)\r\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                        : bits.readPartDuration();\r\n                                    curPart += restLength;\r\n\r\n                                }\r\n                            } else {\r\n                                let shape: any;\r\n                                if (useOldShape) {\r\n                                    shape = recentShapes[shapeIndex];\r\n                                    recentShapes.splice(shapeIndex, 1);\r\n                                } else {\r\n                                    shape = {};\r\n\r\n                                    if (!largerChords) {\r\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n                                        shape.pitchCount = 1;\r\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n                                    }\r\n                                    else {\r\n                                        // New format is:\r\n                                        //      0: 1 pitch\r\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                                        if (bits.read(1) == 1) {\r\n                                            shape.pitchCount = bits.read(3) + 2;\r\n                                        }\r\n                                        else {\r\n                                            shape.pitchCount = 1;\r\n                                        }\r\n                                    }\r\n\r\n                                    shape.pinCount = bits.readPinCount();\r\n                                    if (fromBeepBox) {\r\n                                        shape.initialSize = bits.read(2) * 2;\r\n                                    } else if (!isModChannel) {\r\n                                        shape.initialSize = bits.read(bitsPerNoteSize);\r\n                                    } else {\r\n                                        shape.initialSize = bits.read(9);\r\n                                    }\r\n\r\n                                    shape.pins = [];\r\n                                    shape.length = 0;\r\n                                    shape.bendCount = 0;\r\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\r\n                                        let pinObj: any = {};\r\n                                        pinObj.pitchBend = bits.read(1) == 1;\r\n                                        if (pinObj.pitchBend) shape.bendCount++;\r\n                                        shape.length += (beforeSeven && fromBeepBox)\r\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                            : bits.readPartDuration();\r\n                                        pinObj.time = shape.length;\r\n                                        if (fromBeepBox) {\r\n                                            pinObj.size = bits.read(2) * 2;\r\n                                        } else if (!isModChannel) {\r\n                                            pinObj.size = bits.read(bitsPerNoteSize);\r\n                                        }\r\n                                        else {\r\n                                            pinObj.size = bits.read(9);\r\n                                        }\r\n                                        shape.pins.push(pinObj);\r\n                                    }\r\n                                }\r\n                                recentShapes.unshift(shape);\r\n                                if (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\r\n\r\n                                let note: Note;\r\n                                if (newNotes.length <= noteCount) {\r\n                                    note = new Note(0, curPart, curPart + shape.length, shape.initialSize);\r\n                                    newNotes[noteCount++] = note;\r\n                                } else {\r\n                                    note = newNotes[noteCount++];\r\n                                    note.start = curPart;\r\n                                    note.end = curPart + shape.length;\r\n                                    note.pins[0].size = shape.initialSize;\r\n                                }\r\n\r\n                                let pitch: number;\r\n                                let pitchCount: number = 0;\r\n                                const pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\r\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n                                    const useOldPitch: boolean = bits.read(1) == 1;\r\n                                    if (!useOldPitch) {\r\n                                        const interval: number = bits.readPitchInterval();\r\n                                        pitch = lastPitch;\r\n                                        let intervalIter: number = interval;\r\n                                        while (intervalIter > 0) {\r\n                                            pitch++;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\r\n                                            intervalIter--;\r\n                                        }\r\n                                        while (intervalIter < 0) {\r\n                                            pitch--;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\r\n                                            intervalIter++;\r\n                                        }\r\n                                    } else {\r\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n                                        pitch = recentPitches[pitchIndex];\r\n                                        recentPitches.splice(pitchIndex, 1);\r\n                                    }\r\n\r\n                                    recentPitches.unshift(pitch);\r\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n                                    if (j < shape.pitchCount) {\r\n                                        note.pitches[pitchCount++] = pitch;\r\n                                    } else {\r\n                                        pitchBends.push(pitch);\r\n                                    }\r\n\r\n                                    if (j == shape.pitchCount - 1) {\r\n                                        lastPitch = note.pitches[0];\r\n                                    } else {\r\n                                        lastPitch = pitch;\r\n                                    }\r\n                                }\r\n                                note.pitches.length = pitchCount;\r\n                                pitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\r\n                                if (isModChannel) {\r\n                                    note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\r\n                                }\r\n                                let pinCount: number = 1;\r\n                                for (const pinObj of shape.pins) {\r\n                                    if (pinObj.pitchBend) pitchBends.shift();\r\n\r\n                                    const interval: number = pitchBends[0] - note.pitches[0];\r\n                                    if (note.pins.length <= pinCount) {\r\n                                        if (isModChannel) {\r\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]]);\r\n                                        } else {\r\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\r\n                                        }\r\n                                    } else {\r\n                                        const pin: NotePin = note.pins[pinCount++];\r\n                                        pin.interval = interval;\r\n                                        pin.time = pinObj.time;\r\n                                        if (isModChannel) {\r\n                                            pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\r\n                                        } else {\r\n                                            pin.size = pinObj.size;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                note.pins.length = pinCount;\r\n\r\n                                if (note.start == 0) {\r\n                                    if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox))) {\r\n                                        note.continuesLastPattern = (bits.read(1) == 1);\r\n                                    } else {\r\n                                        if (beforeFour || fromBeepBox) {\r\n                                            note.continuesLastPattern = false;\r\n                                        } else {\r\n                                            note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n                            }\r\n                        }\r\n                        newNotes.length = noteCount;\r\n                    }\r\n\r\n                    if (beforeThree && fromBeepBox) {\r\n                        break;\r\n                    } else {\r\n                        channelIndex++;\r\n                        if (channelIndex >= this.getChannelCount()) break;\r\n                    }\r\n                } // while (true)\r\n\r\n                // Correction for old JB songs that had song reverb mods. Change all instruments using reverb to max reverb\r\n                if (fromJummBox && beforeFive && songReverbIndex >= 0) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.channels.length; channelIndex++) {\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\r\n                            if (effectsIncludeReverb(instrument.effects)) {\r\n                                instrument.reverb = Config.reverbRange - 1;\r\n                            }\r\n                            // Set song reverb via mod to the old setting at song start.\r\n                            if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\r\n                                const patternIndex: number = this.channels[channelIndex].bars[0];\r\n                                if (patternIndex > 0) {\r\n                                    // Doesn't work if 1st pattern isn't using the right ins for song reverb...\r\n                                    // Add note to start of pattern\r\n                                    const pattern: Pattern = this.channels[channelIndex].patterns[patternIndex - 1];\r\n                                    let lowestPart: number = 6;\r\n                                    for (const note of pattern.notes) {\r\n                                        if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\r\n                                            lowestPart = Math.min(lowestPart, note.start);\r\n                                        }\r\n                                    }\r\n\r\n                                    if (lowestPart > 0) {\r\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // Add pattern\r\n                                    if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\r\n                                        const pattern: Pattern = new Pattern();\r\n                                        this.channels[channelIndex].patterns.push(pattern);\r\n                                        this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\r\n                                        if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\r\n                                            for (let chn: number = 0; chn < this.channels.length; chn++) {\r\n                                                if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\r\n                                                    this.channels[chn].patterns.push(new Pattern());\r\n                                                }\r\n                                            }\r\n                                            this.patternsPerChannel++;\r\n                                        }\r\n                                        pattern.instruments.length = 1;\r\n                                        pattern.instruments[0] = songReverbInstrument;\r\n                                        pattern.notes.length = 0;\r\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } break;\r\n            default: {\r\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\r\n            } break;\r\n        }\r\n    }\r\n\r\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n        const channelArray: Object[] = [];\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            const channel: Channel = this.channels[channelIndex];\r\n            const instrumentArray: Object[] = [];\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n            for (const instrument of channel.instruments) {\r\n                instrumentArray.push(instrument.toJsonObject());\r\n            }\r\n\r\n            const patternArray: Object[] = [];\r\n            for (const pattern of channel.patterns) {\r\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\r\n            }\r\n\r\n            const sequenceArray: number[] = [];\r\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n\r\n            const channelObject: any = {\r\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n                \"name\": channel.name,\r\n                \"instruments\": instrumentArray,\r\n                \"patterns\": patternArray,\r\n                \"sequence\": sequenceArray,\r\n            };\r\n            if (!isNoiseChannel) {\r\n                // For compatibility with old versions the octave is offset by one.\r\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\r\n            }\r\n            channelArray.push(channelObject);\r\n        }\r\n\r\n        return {\r\n            \"name\": this.title,\r\n            \"subname\": this.subtitle,\r\n            \"format\": Song._format,\r\n            \"version\": Song._latestJummBoxVersion,\r\n            \"scale\": Config.scales[this.scale].name,\r\n            \"key\": Config.keys[this.key].name,\r\n            \"introBars\": this.loopStart,\r\n            \"loopBars\": this.loopLength,\r\n            \"beatsPerBar\": this.beatsPerBar,\r\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n            \"beatsPerMinute\": this.tempo,\r\n            \"reverb\": this.reverb,\r\n            \"masterGain\": this.masterGain,\r\n            \"compressionThreshold\": this.compressionThreshold,\r\n            \"limitThreshold\": this.limitThreshold,\r\n            \"limitDecay\": this.limitDecay,\r\n            \"limitRise\": this.limitRise,\r\n            \"limitRatio\": this.limitRatio,\r\n            \"compressionRatio\": this.compressionRatio,\r\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n            \"layeredInstruments\": this.layeredInstruments,\r\n            \"patternInstruments\": this.patternInstruments,\r\n            \"channels\": channelArray,\r\n        };\r\n    }\r\n\r\n    public fromJsonObject(jsonObject: any): void {\r\n        this.initToDefault(true);\r\n        if (!jsonObject) return;\r\n\r\n        //const version: number = jsonObject[\"version\"] | 0;\r\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n        if (jsonObject[\"name\"] != undefined) {\r\n            this.title = jsonObject[\"name\"];\r\n        }\r\n\r\n        if (jsonObject[\"subname\"] != undefined) {\r\n            this.subtitle = jsonObject[\"subname\"];\r\n        }\r\n\r\n        this.scale = 0; // default to free.\r\n        if (jsonObject[\"scale\"] != undefined) {\r\n            const oldScaleNames: Dictionary<string> = {\r\n                \"romani :)\": \"dbl harmonic :)\",\r\n                \"romani :(\": \"dbl harmonic :(\",\r\n                \"enigma\": \"strange\",\r\n            };\r\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n            if (scale != -1) this.scale = scale;\r\n        }\r\n\r\n        if (jsonObject[\"key\"] != undefined) {\r\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\r\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n                const key: string = jsonObject[\"key\"];\r\n                const letter: string = key.charAt(0).toUpperCase();\r\n                const symbol: string = key.charAt(1).toLowerCase();\r\n                const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n                const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n                let index: number | undefined = letterMap[letter];\r\n                const offset: number | undefined = accidentalMap[symbol];\r\n                if (index != undefined) {\r\n                    if (offset != undefined) index += offset;\r\n                    if (index < 0) index += 12;\r\n                    index = index % 12;\r\n                    this.key = index;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n        }\r\n\r\n        let legacyGlobalReverb: number = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\r\n        if (jsonObject[\"reverb\"] != undefined) {\r\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\r\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n        }\r\n\r\n        let importedPartsPerBeat: number = 4;\r\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n            if (this.rhythm == -1) {\r\n                this.rhythm = 1;\r\n            }\r\n        }\r\n\r\n        // Read limiter settings. Ranges and defaults are based on slider settings\r\n\r\n        if (jsonObject[\"masterGain\"] != undefined) {\r\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\r\n        } else {\r\n            this.masterGain = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitThreshold\"] != undefined) {\r\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\r\n        }\r\n        else {\r\n            this.limitThreshold = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\r\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\r\n        }\r\n        else {\r\n            this.compressionThreshold = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitRise\"] != undefined) {\r\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\r\n        }\r\n        else {\r\n            this.limitRise = 4000.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitDecay\"] != undefined) {\r\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\r\n        }\r\n        else {\r\n            this.limitDecay = 4.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitRatio\"] != undefined) {\r\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\r\n        }\r\n        else {\r\n            this.limitRatio = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"compressionRatio\"] != undefined) {\r\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\r\n        }\r\n        else {\r\n            this.compressionRatio = 1.0;\r\n        }\r\n\r\n        let maxInstruments: number = 1;\r\n        let maxPatterns: number = 1;\r\n        let maxBars: number = 1;\r\n        if (jsonObject[\"channels\"] != undefined) {\r\n            for (const channelObject of jsonObject[\"channels\"]) {\r\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\r\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\r\n        } else {\r\n            this.layeredInstruments = false;\r\n        }\r\n        if (jsonObject[\"patternInstruments\"] != undefined) {\r\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\r\n        } else {\r\n            this.patternInstruments = (maxInstruments > 1);\r\n        }\r\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n        this.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n        if (jsonObject[\"introBars\"] != undefined) {\r\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n        }\r\n        if (jsonObject[\"loopBars\"] != undefined) {\r\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n        }\r\n\r\n        const newPitchChannels: Channel[] = [];\r\n        const newNoiseChannels: Channel[] = [];\r\n        const newModChannels: Channel[] = [];\r\n        if (jsonObject[\"channels\"] != undefined) {\r\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n                const channel: Channel = new Channel();\r\n\r\n                let isNoiseChannel: boolean = false;\r\n                let isModChannel: boolean = false;\r\n                if (channelObject[\"type\"] != undefined) {\r\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\r\n                } else {\r\n                    // for older files, assume drums are channel 3.\r\n                    isNoiseChannel = (channelIndex >= 3);\r\n                }\r\n                if (isNoiseChannel) {\r\n                    newNoiseChannels.push(channel);\r\n                } else if (isModChannel) {\r\n                    newModChannels.push(channel);\r\n                }\r\n                else {\r\n                    newPitchChannels.push(channel);\r\n                }\r\n\r\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\r\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\r\n                    if (isNoiseChannel) channel.octave = 0;\r\n                }\r\n\r\n                if (channelObject[\"name\"] != undefined) {\r\n                    channel.name = channelObject[\"name\"];\r\n                }\r\n                else {\r\n                    channel.name = \"\";\r\n                }\r\n\r\n                if (Array.isArray(channelObject[\"instruments\"])) {\r\n                    const instrumentObjects: any[] = channelObject[\"instruments\"];\r\n                    for (let i: number = 0; i < instrumentObjects.length; i++) {\r\n                        if (i >= this.getMaxInstrumentsPerChannel()) break;\r\n                        const instrument: Instrument = new Instrument(isNoiseChannel, isModChannel);\r\n                        channel.instruments[i] = instrument;\r\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb);\r\n                    }\r\n\r\n                }\r\n\r\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                    const pattern: Pattern = new Pattern();\r\n                    channel.patterns[i] = pattern;\r\n\r\n                    let patternObject: any = undefined;\r\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n                    if (patternObject == undefined) continue;\r\n\r\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel);\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n        }\r\n\r\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n        this.pitchChannelCount = newPitchChannels.length;\r\n        this.noiseChannelCount = newNoiseChannels.length;\r\n        this.modChannelCount = newModChannels.length;\r\n        this.channels.length = 0;\r\n        Array.prototype.push.apply(this.channels, newPitchChannels);\r\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\r\n        Array.prototype.push.apply(this.channels, newModChannels);\r\n    }\r\n\r\n    public getPattern(channelIndex: number, bar: number): Pattern | null {\r\n        if (bar < 0 || bar >= this.barCount) return null;\r\n        const patternIndex: number = this.channels[channelIndex].bars[bar];\r\n        if (patternIndex == 0) return null;\r\n        return this.channels[channelIndex].patterns[patternIndex - 1];\r\n    }\r\n\r\n    public getBeatsPerMinute(): number {\r\n        return this.tempo;\r\n    }\r\n\r\n    public static getNeededBits(maxValue: number): number {\r\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\r\n    }\r\n\r\n    public restoreLimiterDefaults(): void {\r\n        this.compressionRatio = 1.0;\r\n        this.limitRatio = 1.0;\r\n        this.limitRise = 4000.0;\r\n        this.limitDecay = 4.0;\r\n        this.limitThreshold = 1.0;\r\n        this.compressionThreshold = 1.0;\r\n        this.masterGain = 1.0;\r\n    }\r\n}\r\n\r\nclass PickedString {\r\n    public delayLine: Float32Array | null = null;\r\n    public delayIndex: number;\r\n    public allPassSample: number;\r\n    public allPassPrevInput: number;\r\n    public shelfSample: number;\r\n    public shelfPrevInput: number;\r\n    public fractionalDelaySample: number;\r\n    public prevDelayLength: number;\r\n    public delayLengthDelta: number;\r\n    public delayResetOffset: number;\r\n\r\n    public allPassG: number = 0.0;\r\n    public allPassGDelta: number = 0.0;\r\n    public shelfA1: number = 0.0;\r\n    public shelfA1Delta: number = 0.0;\r\n    public shelfB0: number = 0.0;\r\n    public shelfB0Delta: number = 0.0;\r\n    public shelfB1: number = 0.0;\r\n    public shelfB1Delta: number = 0.0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.delayIndex = -1;\r\n        this.allPassSample = 0.0;\r\n        this.allPassPrevInput = 0.0;\r\n        this.shelfSample = 0.0;\r\n        this.shelfPrevInput = 0.0;\r\n        this.fractionalDelaySample = 0.0;\r\n        this.prevDelayLength = -1.0;\r\n        this.delayResetOffset = 0;\r\n    }\r\n\r\n    public update(synth: Synth, instrumentState: InstrumentState, tone: Tone, stringIndex: number, roundedSamplesPerTick: number, stringDecayStart: number, stringDecayEnd: number): void {\r\n        const allPassCenter: number = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\r\n        const shelfRadians: number = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\r\n        const decayCurveStart: number = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\r\n        const decayCurveEnd: number = (Math.pow(100.0, stringDecayEnd) - 1.0) / 99.0;\r\n\r\n        const prevDelayLength: number = this.prevDelayLength;\r\n\r\n        const phaseDeltaStart: number = tone.phaseDeltas[stringIndex];\r\n        const phaseDeltaScale: number = tone.phaseDeltaScales[stringIndex];\r\n        const phaseDeltaEnd: number = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\r\n\r\n        const radiansPerSampleStart: number = Math.PI * 2.0 * phaseDeltaStart;\r\n        const radiansPerSampleEnd: number = Math.PI * 2.0 * phaseDeltaEnd;\r\n\r\n        const centerHarmonicStart: number = radiansPerSampleStart * 2.0;\r\n        const centerHarmonicEnd: number = radiansPerSampleEnd * 2.0;\r\n\r\n        const allPassRadiansStart: number = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\r\n        const allPassRadiansEnd: number = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\r\n\r\n        const decayRateStart: number = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);\r\n        const decayRateEnd: number = Math.pow(0.5, decayCurveEnd * shelfRadians / radiansPerSampleEnd);\r\n        const shelfGainStart: number = Math.pow(decayRateStart, Config.stringDecayRate);\r\n        const shelfGainEnd: number = Math.pow(decayRateEnd, Config.stringDecayRate);\r\n        const expressionDecayStart: number = Math.pow(decayRateStart, 0.002);\r\n        const expressionDecayEnd: number = Math.pow(decayRateEnd, 0.002);\r\n\r\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\r\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\r\n        const allPassGStart: number = Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\r\n        const allPassPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\r\n\r\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\r\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\r\n        const allPassGEnd: number = Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\r\n        const allPassPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\r\n\r\n        Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, shelfGainStart);\r\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\r\n        const shelfA1Start: number = Synth.tempFilterStartCoefficients.a[1];\r\n        const shelfB0Start: number = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\r\n        const shelfB1Start: number = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\r\n        const shelfPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\r\n\r\n        Synth.tempFilterEndCoefficients.highShelf1stOrder(shelfRadians, shelfGainEnd);\r\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\r\n        const shelfA1End: number = Synth.tempFilterEndCoefficients.a[1];\r\n        const shelfB0End: number = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\r\n        const shelfB1End: number = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\r\n        const shelfPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\r\n\r\n        const periodLengthStart: number = 1.0 / phaseDeltaStart;\r\n        const periodLengthEnd: number = 1.0 / phaseDeltaEnd;\r\n        const minBufferLength: number = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\r\n        const delayLength: number = periodLengthStart - allPassPhaseDelayStart - shelfPhaseDelayStart;\r\n        const delayLengthEnd: number = periodLengthEnd - allPassPhaseDelayEnd - shelfPhaseDelayEnd;\r\n\r\n        this.prevDelayLength = delayLength;\r\n        this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\r\n        this.allPassG = allPassGStart;\r\n        this.shelfA1 = shelfA1Start;\r\n        this.shelfB0 = shelfB0Start;\r\n        this.shelfB1 = shelfB1Start;\r\n        this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\r\n        this.shelfA1Delta = (shelfA1End - shelfA1Start) / roundedSamplesPerTick;\r\n        this.shelfB0Delta = (shelfB0End - shelfB0Start) / roundedSamplesPerTick;\r\n        this.shelfB1Delta = (shelfB1End - shelfB1Start) / roundedSamplesPerTick;\r\n\r\n        const pitchChanged: boolean = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\r\n\r\n        const reinitializeImpulse: boolean = (this.delayIndex == -1 || pitchChanged);\r\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\r\n            // The delay line buffer will get reused for other tones so might as well\r\n            // start off with a buffer size that is big enough for most notes.\r\n            const likelyMaximumLength: number = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\r\n            const newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\r\n            if (!reinitializeImpulse && this.delayLine != null) {\r\n                // If the tone has already started but the buffer needs to be reallocated,\r\n                // transfer the old data to the new buffer.\r\n                const oldDelayBufferMask: number = (this.delayLine.length - 1) >> 0;\r\n                const startCopyingFromIndex: number = this.delayIndex + this.delayResetOffset;\r\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\r\n                for (let i: number = 0; i < this.delayLine.length; i++) {\r\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\r\n                }\r\n            }\r\n            this.delayLine = newDelayLine;\r\n        }\r\n        const delayLine: Float32Array = this.delayLine;\r\n        const delayBufferMask: number = (delayLine.length - 1) >> 0;\r\n\r\n        if (reinitializeImpulse) {\r\n            // -1 delay index means the tone was reset.\r\n            // Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\r\n\r\n            this.delayIndex = 0;\r\n            this.allPassSample = 0.0;\r\n            this.allPassPrevInput = 0.0;\r\n            this.shelfSample = 0.0;\r\n            this.shelfPrevInput = 0.0;\r\n            this.fractionalDelaySample = 0.0;\r\n\r\n            // Clear away a region of the delay buffer for the new impulse.\r\n            const startImpulseFrom: number = -delayLength;\r\n            const startZerosFrom: number = Math.floor(startImpulseFrom - periodLengthStart / 2);\r\n            const stopZerosAt: number = Math.ceil(startZerosFrom + periodLengthStart * 2);\r\n            this.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\r\n            for (let i: number = startZerosFrom; i <= stopZerosAt; i++) {\r\n                delayLine[i & delayBufferMask] = 0.0;\r\n            }\r\n\r\n            const impulseWave: Float32Array = instrumentState.wave!;\r\n            const impulseWaveLength: number = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n            const impulsePhaseDelta: number = impulseWaveLength / periodLengthStart;\r\n\r\n            const fadeDuration: number = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\r\n            const startImpulseFromSample: number = Math.ceil(startImpulseFrom);\r\n            const stopImpulseAt: number = startImpulseFrom + periodLengthStart + fadeDuration;\r\n            const stopImpulseAtSample: number = stopImpulseAt;\r\n            let impulsePhase: number = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\r\n            let prevWaveIntegral: number = 0.0;\r\n            for (let i: number = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\r\n                const impulsePhaseInt: number = impulsePhase | 0;\r\n                const index: number = impulsePhaseInt % impulseWaveLength;\r\n                let nextWaveIntegral: number = impulseWave[index];\r\n                const phaseRatio: number = impulsePhase - impulsePhaseInt;\r\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\r\n                const sample: number = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\r\n                const fadeIn: number = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\r\n                const fadeOut: number = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\r\n                const combinedFade: number = fadeIn * fadeOut;\r\n                const curvedFade: number = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\r\n                delayLine[i & delayBufferMask] += sample * curvedFade;\r\n                prevWaveIntegral = nextWaveIntegral;\r\n                impulsePhase += impulsePhaseDelta;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass EnvelopeComputer {\r\n    public noteSecondsStart: number = 0.0;\r\n    public noteSecondsEnd: number = 0.0;\r\n    public noteTicksStart: number = 0.0;\r\n    public noteTicksEnd: number = 0.0;\r\n    public noteSizeStart: number = Config.noteSizeMax;\r\n    public noteSizeEnd: number = Config.noteSizeMax;\r\n    public prevNoteSize: number = Config.noteSizeMax;\r\n    public nextNoteSize: number = Config.noteSizeMax;\r\n    private _noteSizeFinal: number = Config.noteSizeMax;\r\n    public prevNoteSecondsStart: number = 0.0;\r\n    public prevNoteSecondsEnd: number = 0.0;\r\n    public prevNoteTicksStart: number = 0.0;\r\n    public prevNoteTicksEnd: number = 0.0;\r\n    private _prevNoteSizeFinal: number = Config.noteSizeMax;\r\n\r\n    public prevSlideStart: boolean = false;\r\n    public prevSlideEnd: boolean = false;\r\n    public nextSlideStart: boolean = false;\r\n    public nextSlideEnd: boolean = false;\r\n    public prevSlideRatioStart: number = 0.0;\r\n    public prevSlideRatioEnd: number = 0.0;\r\n    public nextSlideRatioStart: number = 0.0;\r\n    public nextSlideRatioEnd: number = 0.0;\r\n\r\n    public readonly envelopeStarts: number[] = [];\r\n    public readonly envelopeEnds: number[] = [];\r\n    private readonly _modifiedEnvelopeIndices: number[] = [];\r\n    private _modifiedEnvelopeCount: number = 0;\r\n    public lowpassCutoffDecayVolumeCompensation: number = 1.0;\r\n\r\n    constructor(/*private _perNote: boolean*/) {\r\n        //const length: number = this._perNote ? EnvelopeComputeIndex.length : InstrumentAutomationIndex.length;\r\n        const length: number = EnvelopeComputeIndex.length;\r\n        for (let i: number = 0; i < length; i++) {\r\n            this.envelopeStarts[i] = 1.0;\r\n            this.envelopeEnds[i] = 1.0;\r\n        }\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.noteSecondsEnd = 0.0;\r\n        this.noteTicksEnd = 0.0;\r\n        this._noteSizeFinal = Config.noteSizeMax;\r\n        this.prevNoteSecondsEnd = 0.0;\r\n        this.prevNoteTicksEnd = 0.0;\r\n        this._prevNoteSizeFinal = Config.noteSizeMax;\r\n        this._modifiedEnvelopeCount = 0;\r\n    }\r\n\r\n    public computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number, secondsPerTick: number, tone: Tone | null): void {\r\n        const transition: Transition = instrument.getTransition();\r\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\r\n            this.prevNoteSecondsEnd = this.noteSecondsEnd;\r\n            this.prevNoteTicksEnd = this.noteTicksEnd;\r\n            this._prevNoteSizeFinal = this._noteSizeFinal;\r\n            this.noteSecondsEnd = 0.0;\r\n            this.noteTicksEnd = 0.0;\r\n        }\r\n        if (tone != null) {\r\n            if (tone.note != null) {\r\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\r\n            } else {\r\n                this._noteSizeFinal = Config.noteSizeMax;\r\n            }\r\n        }\r\n\r\n        const tickTimeEnd: number = tickTimeStart + 1.0;\r\n        const noteSecondsStart: number = this.noteSecondsEnd;\r\n        const noteSecondsEnd: number = noteSecondsStart + secondsPerTick;\r\n        const noteTicksStart: number = this.noteTicksEnd;\r\n        const noteTicksEnd: number = noteTicksStart + 1.0;\r\n        const prevNoteSecondsStart: number = this.prevNoteSecondsEnd;\r\n        const prevNoteSecondsEnd: number = prevNoteSecondsStart + secondsPerTick;\r\n        const prevNoteTicksStart: number = this.prevNoteTicksEnd;\r\n        const prevNoteTicksEnd: number = prevNoteTicksStart + 1.0;\r\n\r\n        const beatsPerTick: number = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\r\n        const beatTimeStart: number = beatsPerTick * tickTimeStart;\r\n        const beatTimeEnd: number = beatsPerTick * tickTimeEnd;\r\n\r\n        let noteSizeStart: number = this._noteSizeFinal;\r\n        let noteSizeEnd: number = this._noteSizeFinal;\r\n        let prevNoteSize: number = this._prevNoteSizeFinal;\r\n        let nextNoteSize: number = 0;\r\n        let prevSlideStart: boolean = false;\r\n        let prevSlideEnd: boolean = false;\r\n        let nextSlideStart: boolean = false;\r\n        let nextSlideEnd: boolean = false;\r\n        let prevSlideRatioStart: number = 0.0;\r\n        let prevSlideRatioEnd: number = 0.0;\r\n        let nextSlideRatioStart: number = 0.0;\r\n        let nextSlideRatioEnd: number = 0.0;\r\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\r\n            const endPinIndex: number = tone.note.getEndPinIndex(currentPart);\r\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = tone.note.pins[endPinIndex];\r\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\r\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\r\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\r\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\r\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\r\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\r\n\r\n            if (transition.slides) {\r\n                const noteStartTick: number = tone.noteStartPart * Config.ticksPerPart;\r\n                const noteEndTick: number = tone.noteEndPart * Config.ticksPerPart;\r\n                const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n                const maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n                let slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                const useSlideSpeed: boolean = (Config.transitions[instrument.transition].slides) ? true : false;\r\n                if (useSlideSpeed) { \r\n                    slideTicks += Config.slideSpeedScale[instrument.slideSpeed];\r\n                }\r\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\r\n                    if (tickTimeStart - noteStartTick < slideTicks) {\r\n                        prevSlideStart = true;\r\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStart - noteStartTick) / slideTicks);\r\n                    }\r\n                    if (tickTimeEnd - noteStartTick < slideTicks) {\r\n                        prevSlideEnd = true;\r\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEnd - noteStartTick) / slideTicks);\r\n                    }\r\n                }\r\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\r\n                    nextNoteSize = tone.nextNote.pins[0].size\r\n                    if (noteEndTick - tickTimeStart < slideTicks) {\r\n                        nextSlideStart = true;\r\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStart) / slideTicks);\r\n                    }\r\n                    if (noteEndTick - tickTimeEnd < slideTicks) {\r\n                        nextSlideEnd = true;\r\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEnd) / slideTicks);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let lowpassCutoffDecayVolumeCompensation: number = 1.0;\r\n        let usedNoteSize: boolean = false;\r\n        for (let envelopeIndex: number = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\r\n            let automationTarget: AutomationTarget;\r\n            let targetIndex: number;\r\n            let envelope: Envelope;\r\n            if (envelopeIndex == instrument.envelopeCount) {\r\n                if (usedNoteSize /*|| !this._perNote*/) break;\r\n                // Special case: if no other envelopes used note size, default to applying it to note volume.\r\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\r\n                targetIndex = 0;\r\n                envelope = Config.envelopes.dictionary[\"note size\"];\r\n            } else {\r\n                let envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\r\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\r\n                targetIndex = envelopeSettings.index;\r\n                envelope = Config.envelopes[envelopeSettings.envelope];\r\n                if (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\r\n            }\r\n            if (/*automationTarget.perNote == this._perNote &&*/ automationTarget.computeIndex != null) {\r\n                const computeIndex: number = automationTarget.computeIndex + targetIndex;\r\n                let envelopeStart: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);\r\n                let envelopeEnd: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd, beatTimeEnd, noteSizeEnd);\r\n\r\n                if (prevSlideStart) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);\r\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\r\n                }\r\n                if (prevSlideEnd) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);\r\n                    envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\r\n                }\r\n                if (nextSlideStart) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);\r\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\r\n                }\r\n                if (nextSlideEnd) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);\r\n                    envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\r\n                }\r\n\r\n                this.envelopeStarts[computeIndex] *= envelopeStart;\r\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\r\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\r\n\r\n                if (automationTarget.isFilter) {\r\n                    const filterSettings: FilterSettings = /*this._perNote ?*/ (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter /*: instrument.eqFilter*/;\r\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\r\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.noteSecondsStart = noteSecondsStart;\r\n        this.noteSecondsEnd = noteSecondsEnd;\r\n        this.noteTicksStart = noteTicksStart;\r\n        this.noteTicksEnd = noteTicksEnd;\r\n        this.prevNoteSecondsStart = prevNoteSecondsStart;\r\n        this.prevNoteSecondsEnd = prevNoteSecondsEnd;\r\n        this.prevNoteTicksStart = prevNoteTicksStart;\r\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\r\n        this.prevNoteSize = prevNoteSize;\r\n        this.nextNoteSize = nextNoteSize;\r\n        this.noteSizeStart = noteSizeStart;\r\n        this.noteSizeEnd = noteSizeEnd;\r\n        this.prevSlideStart = prevSlideStart;\r\n        this.prevSlideEnd = prevSlideEnd;\r\n        this.nextSlideStart = nextSlideStart;\r\n        this.nextSlideEnd = nextSlideEnd;\r\n        this.prevSlideRatioStart = prevSlideRatioStart;\r\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\r\n        this.nextSlideRatioStart = nextSlideRatioStart;\r\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\r\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\r\n    }\r\n\r\n    public clearEnvelopes(): void {\r\n        for (let envelopeIndex: number = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\r\n            const computeIndex: number = this._modifiedEnvelopeIndices[envelopeIndex];\r\n            this.envelopeStarts[computeIndex] = 1.0;\r\n            this.envelopeEnds[computeIndex] = 1.0;\r\n        }\r\n        this._modifiedEnvelopeCount = 0;\r\n    }\r\n\r\n    public static computeEnvelope(envelope: Envelope, time: number, beats: number, noteSize: number): number {\r\n        switch (envelope.type) {\r\n            case EnvelopeType.noteSize: return Synth.noteSizeToVolumeMult(noteSize);\r\n            case EnvelopeType.none: return 1.0;\r\n            case EnvelopeType.twang: return 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.swell: return 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.tremolo: return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n            case EnvelopeType.tremolo2: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n            case EnvelopeType.punch: return Math.max(1.0, 2.0 - time * 10.0);\r\n            case EnvelopeType.flare: const attack: number = 0.25 / Math.sqrt(envelope.speed); return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);\r\n            case EnvelopeType.decay: return Math.pow(2, -envelope.speed * time);\r\n            case EnvelopeType.modboxTrill: const decay = 0.25 / Math.sqrt(envelope.speed); return time < decay ? (decay - time) / decay : 1.0;\r\n            case EnvelopeType.modboxBlip: {const endTime1: number = 0.25 / Math.sqrt(envelope.speed); const endTime2: number = 0.7 / Math.sqrt(envelope.speed); const zeroIntercept: number = 2; const startValue2: number = 0.9; return time < endTime1 ? ((startValue2 - zeroIntercept) / endTime1) * time + zeroIntercept : time < endTime2 ? ((1 - startValue2) / (endTime2 - endTime1)) * (time - endTime1) + startValue2 : 1.0;}\r\n            case EnvelopeType.modboxClick: {const attack: number = 0.25 / envelope.speed; const zeroIntercept = 9.5; return time < attack ? (time * ((-zeroIntercept) + 1) - attack * (-zeroIntercept)) / attack : 1.0;}\r\n            case EnvelopeType.modboxBow: {const attack = 0.25 / Math.sqrt(envelope.speed); const zeroIntercept = -0.40; return time < attack ? (time * ((-zeroIntercept) + 1) - attack * (-zeroIntercept)) / attack : 1.0;}\r\n            case EnvelopeType.decelerate:\r\n            return 0.5 - Math.sin(((time + 3) / 8) ** -1.3 * (400 / envelope.speed)) * 0.5;\r\n            default: throw new Error(\"Unrecognized operator envelope type.\");\r\n        }\r\n\r\n    }\r\n\r\n    public static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope): number {\r\n        // This is a little hokey in the details, but I designed it a while ago and keep it \r\n        // around for compatibility. This decides how much to increase the volume (or\r\n        // expression) to compensate for a decaying lowpass cutoff to maintain perceived\r\n        // volume overall.\r\n        if (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * envelope.speed;\r\n        if (envelope.type == EnvelopeType.twang) return 1.0 + 0.02 * envelope.speed;\r\n        return 1.0;\r\n    }\r\n}\r\n\r\nclass Tone {\r\n    public instrumentIndex: number;\r\n    public readonly pitches: number[] = Array(Config.maxChordSize).fill(0);\r\n    public pitchCount: number = 0;\r\n    public chordSize: number = 0;\r\n    public drumsetPitch: number | null = null;\r\n    public note: Note | null = null;\r\n    public prevNote: Note | null = null;\r\n    public nextNote: Note | null = null;\r\n    public prevNotePitchIndex: number = 0;\r\n    public nextNotePitchIndex: number = 0;\r\n    public freshlyAllocated: boolean = true;\r\n    public atNoteStart: boolean = false;\r\n    public isOnLastTick: boolean = false; // Whether the tone is finished fading out and ready to be freed.\r\n    public passedEndOfNote: boolean = false;\r\n    public forceContinueAtStart: boolean = false;\r\n    public forceContinueAtEnd: boolean = false;\r\n    public noteStartPart: number = 0;\r\n    public noteEndPart: number = 0;\r\n    public ticksSinceReleased: number = 0;\r\n    public liveInputSamplesHeld: number = 0;\r\n    public lastInterval: number = 0;\r\n    public noiseSample: number = 0.0;\r\n    public stringSustainStart: number = 0;\r\n    public stringSustainEnd: number = 0;\r\n    public readonly phases: number[] = [];\r\n    public readonly operatorWaves: OperatorWave[] = [];\r\n    public readonly phaseDeltas: number[] = [];\r\n    public readonly phaseDeltaScales: number[] = [];\r\n    public expression: number = 0.0;\r\n    public expressionDelta: number = 0.0;\r\n    public readonly operatorExpressions: number[] = [];\r\n    public readonly operatorExpressionDeltas: number[] = [];\r\n    public readonly prevPitchExpressions: Array<number | null> = Array(Config.maxPitchOrOperatorCount).fill(null);\r\n    public prevVibrato: number | null = null;\r\n    public prevStringDecay: number | null = null;\r\n    public pulseWidth: number = 0.0;\r\n    public pulseWidthDelta: number = 0.0;\r\n    public readonly pickedStrings: PickedString[] = [];\r\n\r\n    public readonly noteFilters: DynamicBiquadFilter[] = [];\r\n    public noteFilterCount: number = 0;\r\n    public initialNoteFilterInput1: number = 0.0;\r\n    public initialNoteFilterInput2: number = 0.0;\r\n\r\n    public specialIntervalExpressionMult: number = 1.0;\r\n    public readonly feedbackOutputs: number[] = [];\r\n    public feedbackMult: number = 0.0;\r\n    public feedbackDelta: number = 0.0;\r\n    public stereoVolumeLStart: number = 0.0;\r\n    public stereoVolumeRStart: number = 0.0;\r\n    public stereoVolumeLDelta: number = 0.0;\r\n    public stereoVolumeRDelta: number = 0.0;\r\n    public stereoDelayStart: number = 0.0;\r\n    public stereoDelayEnd: number = 0.0;\r\n    public stereoDelayDelta: number = 0.0;\r\n    public customVolumeStart: number = 0.0;\r\n    public customVolumeEnd: number = 0.0;\r\n    public filterResonanceStart: number = 0.0;\r\n    public filterResonanceDelta: number = 0.0;\r\n    public isFirstOrder: boolean = false;\r\n\r\n    public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(/*true*/);\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.noiseSample = 0.0;\r\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\r\n            this.phases[i] = 0.0;\r\n            this.operatorWaves[i] = Config.operatorWaves[0];\r\n            this.feedbackOutputs[i] = 0.0;\r\n            this.prevPitchExpressions[i] = null;\r\n        }\r\n        for (let i: number = 0; i < this.noteFilterCount; i++) {\r\n            this.noteFilters[i].resetOutput();\r\n        }\r\n        this.noteFilterCount = 0;\r\n        this.initialNoteFilterInput1 = 0.0;\r\n        this.initialNoteFilterInput2 = 0.0;\r\n        this.liveInputSamplesHeld = 0;\r\n        for (const pickedString of this.pickedStrings) {\r\n            pickedString.reset();\r\n        }\r\n        this.envelopeComputer.reset();\r\n        this.prevVibrato = null;\r\n        this.prevStringDecay = null;\r\n        this.drumsetPitch = null;\r\n    }\r\n}\r\n\r\nclass InstrumentState {\r\n    public instrument: Instrument;\r\n\r\n    public awake: boolean = false; // Whether the instrument's effects-processing loop should continue.\r\n    public computed: boolean = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\r\n    public tonesAddedInThisTick: boolean = false; // Whether any instrument tones are currently active.\r\n    public flushingDelayLines: boolean = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\r\n    public deactivateAfterThisTick: boolean = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\r\n    public attentuationProgress: number = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\r\n    public flushedSamples: number = 0; // How many delay line samples have been flushed to zero.\r\n    public readonly activeTones: Deque<Tone> = new Deque<Tone>();\r\n    public readonly activeModTones: Deque<Tone> = new Deque<Tone>();\r\n    public readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\r\n    public readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\r\n\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public synthesizer: Function | null = null;\r\n    public wave: Float32Array | null = null;\r\n    public noisePitchFilterMult: number = 1.0;\r\n    public unison: Unison | null = null;\r\n    public chord: Chord | null = null;\r\n    public effects: number = 0;\r\n\r\n    public volumeScale: number = 0;\r\n    public aliases: boolean = false;\r\n\r\n    public eqFilterVolume: number = 1.0;\r\n    public eqFilterVolumeDelta: number = 0.0;\r\n    public mixVolume: number = 1.0;\r\n    public mixVolumeDelta: number = 0.0;\r\n    public delayInputMult: number = 0.0;\r\n    public delayInputMultDelta: number = 0.0;\r\n\r\n    public distortion: number = 0.0;\r\n    public distortionDelta: number = 0.0;\r\n    public distortionDrive: number = 0.0;\r\n    public distortionDriveDelta: number = 0.0;\r\n    public distortionFractionalInput1: number = 0.0;\r\n    public distortionFractionalInput2: number = 0.0;\r\n    public distortionFractionalInput3: number = 0.0;\r\n    public distortionPrevInput: number = 0.0;\r\n    public distortionNextOutput: number = 0.0;\r\n\r\n    public bitcrusherPrevInput: number = 0.0;\r\n    public bitcrusherCurrentOutput: number = 0.0;\r\n    public bitcrusherPhase: number = 1.0;\r\n    public bitcrusherPhaseDelta: number = 0.0;\r\n    public bitcrusherPhaseDeltaScale: number = 1.0;\r\n    public bitcrusherScale: number = 1.0;\r\n    public bitcrusherScaleScale: number = 1.0;\r\n    public bitcrusherFoldLevel: number = 1.0;\r\n    public bitcrusherFoldLevelScale: number = 1.0;\r\n\r\n    public readonly eqFilters: DynamicBiquadFilter[] = [];\r\n    public eqFilterCount: number = 0;\r\n    public initialEqFilterInput1: number = 0.0;\r\n    public initialEqFilterInput2: number = 0.0;\r\n\r\n    public panningDelayLine: Float32Array | null = null;\r\n    public panningDelayPos: number = 0;\r\n    public panningVolumeL: number = 0.0;\r\n    public panningVolumeR: number = 0.0;\r\n    public panningVolumeDeltaL: number = 0.0;\r\n    public panningVolumeDeltaR: number = 0.0;\r\n    public panningOffsetL: number = 0.0;\r\n    public panningOffsetR: number = 0.0;\r\n    public panningOffsetDeltaL: number = 0.0;\r\n    public panningOffsetDeltaR: number = 0.0;\r\n\r\n    public chorusDelayLineL: Float32Array | null = null;\r\n    public chorusDelayLineR: Float32Array | null = null;\r\n    public chorusDelayLineDirty: boolean = false;\r\n    public chorusDelayPos: number = 0;\r\n    public chorusPhase: number = 0;\r\n    public chorusVoiceMult: number = 0;\r\n    public chorusVoiceMultDelta: number = 0;\r\n    public chorusCombinedMult: number = 0;\r\n    public chorusCombinedMultDelta: number = 0;\r\n\r\n    public echoDelayLineL: Float32Array | null = null;\r\n    public echoDelayLineR: Float32Array | null = null;\r\n    public echoDelayLineDirty: boolean = false;\r\n    public echoDelayPos: number = 0;\r\n    public echoDelayOffsetStart: number = 0;\r\n    public echoDelayOffsetEnd: number | null = null;\r\n    public echoDelayOffsetRatio: number = 0.0;\r\n    public echoDelayOffsetRatioDelta: number = 0.0;\r\n    public echoMult: number = 0.0;\r\n    public echoMultDelta: number = 0.0;\r\n    public echoShelfA1: number = 0.0;\r\n    public echoShelfB0: number = 0.0;\r\n    public echoShelfB1: number = 0.0;\r\n    public echoShelfSampleL: number = 0.0;\r\n    public echoShelfSampleR: number = 0.0;\r\n    public echoShelfPrevInputL: number = 0.0;\r\n    public echoShelfPrevInputR: number = 0.0;\r\n\r\n    public reverbDelayLine: Float32Array | null = null;\r\n    public reverbDelayLineDirty: boolean = false;\r\n    public reverbDelayPos: number = 0;\r\n    public reverbMult: number = 0.0;\r\n    public reverbMultDelta: number = 0.0;\r\n    public reverbShelfA1: number = 0.0;\r\n    public reverbShelfB0: number = 0.0;\r\n    public reverbShelfB1: number = 0.0;\r\n    public reverbShelfSample0: number = 0.0;\r\n    public reverbShelfSample1: number = 0.0;\r\n    public reverbShelfSample2: number = 0.0;\r\n    public reverbShelfSample3: number = 0.0;\r\n    public reverbShelfPrevInput0: number = 0.0;\r\n    public reverbShelfPrevInput1: number = 0.0;\r\n    public reverbShelfPrevInput2: number = 0.0;\r\n    public reverbShelfPrevInput3: number = 0.0;\r\n\r\n    //public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(false);\r\n\r\n    public readonly spectrumWave: SpectrumWaveState = new SpectrumWaveState();\r\n    public readonly harmonicsWave: HarmonicsWaveState = new HarmonicsWaveState();\r\n    public readonly drumsetSpectrumWaves: SpectrumWaveState[] = [];\r\n\r\n    constructor() {\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\r\n        }\r\n    }\r\n\r\n\r\n    public allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\r\n        if (effectsIncludePanning(instrument.effects)) {\r\n            if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\r\n                this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\r\n            }\r\n        }\r\n        if (effectsIncludeChorus(instrument.effects)) {\r\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\r\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\r\n            }\r\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\r\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\r\n            }\r\n        }\r\n        if (effectsIncludeEcho(instrument.effects)) {\r\n            // account for tempo and delay automation changing delay length during a tick?\r\n            const safeEchoDelaySteps: number = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\r\n            const baseEchoDelayBufferSize: number = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\r\n            const safeEchoDelayBufferSize: number = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\r\n\r\n            if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\r\n                this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\r\n                this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\r\n            } else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\r\n                // The echo delay length may change whlie the song is playing if tempo changes,\r\n                // so buffers may need to be reallocated, but we don't want to lose any echoes\r\n                // so we need to copy the contents of the old buffer to the new one.\r\n                const newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\r\n                const newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\r\n                const oldMask: number = this.echoDelayLineL.length - 1;\r\n\r\n                for (let i = 0; i < this.echoDelayLineL.length; i++) {\r\n                    newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\r\n                    newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\r\n                }\r\n\r\n                this.echoDelayPos = this.echoDelayLineL.length;\r\n                this.echoDelayLineL = newDelayLineL;\r\n                this.echoDelayLineR = newDelayLineR;\r\n            }\r\n        }\r\n        if (effectsIncludeReverb(instrument.effects)) {\r\n            // TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\r\n            if (this.reverbDelayLine == null) {\r\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\r\n            }\r\n        }\r\n    }\r\n\r\n    public deactivate(): void {\r\n        this.bitcrusherPrevInput = 0.0;\r\n        this.bitcrusherCurrentOutput = 0.0;\r\n        this.bitcrusherPhase = 1.0;\r\n        for (let i: number = 0; i < this.eqFilterCount; i++) {\r\n            this.eqFilters[i].resetOutput();\r\n        }\r\n        this.eqFilterCount = 0;\r\n        this.initialEqFilterInput1 = 0.0;\r\n        this.initialEqFilterInput2 = 0.0;\r\n        this.distortionFractionalInput1 = 0.0;\r\n        this.distortionFractionalInput2 = 0.0;\r\n        this.distortionFractionalInput3 = 0.0;\r\n        this.distortionPrevInput = 0.0;\r\n        this.distortionNextOutput = 0.0;\r\n        this.panningDelayPos = 0;\r\n        if (this.panningDelayLine != null) for (let i: number = 0; i < this.panningDelayLine.length; i++) this.panningDelayLine[i] = 0.0;\r\n        this.echoDelayOffsetEnd = null;\r\n        this.echoShelfSampleL = 0.0;\r\n        this.echoShelfSampleR = 0.0;\r\n        this.echoShelfPrevInputL = 0.0;\r\n        this.echoShelfPrevInputR = 0.0;\r\n        this.reverbShelfSample0 = 0.0;\r\n        this.reverbShelfSample1 = 0.0;\r\n        this.reverbShelfSample2 = 0.0;\r\n        this.reverbShelfSample3 = 0.0;\r\n        this.reverbShelfPrevInput0 = 0.0;\r\n        this.reverbShelfPrevInput1 = 0.0;\r\n        this.reverbShelfPrevInput2 = 0.0;\r\n        this.reverbShelfPrevInput3 = 0.0;\r\n\r\n        this.volumeScale = 1.0;\r\n        this.aliases = false;\r\n\r\n        this.awake = false;\r\n        this.flushingDelayLines = false;\r\n        this.deactivateAfterThisTick = false;\r\n        this.attentuationProgress = 0.0;\r\n        this.flushedSamples = 0;\r\n    }\r\n\r\n    public resetAllEffects(): void {\r\n        this.deactivate();\r\n\r\n        if (this.chorusDelayLineDirty) {\r\n            for (let i: number = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\r\n            for (let i: number = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\r\n        }\r\n        if (this.echoDelayLineDirty) {\r\n            for (let i: number = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\r\n            for (let i: number = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\r\n        }\r\n        if (this.reverbDelayLineDirty) {\r\n            for (let i: number = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\r\n        }\r\n\r\n        this.chorusPhase = 0.0;\r\n    }\r\n\r\n    public compute(synth: Synth, instrument: Instrument, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number): void {\r\n        this.computed = true;\r\n\r\n        this.type = instrument.type;\r\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\r\n        this.unison = Config.unisons[instrument.unison];\r\n        this.chord = instrument.getChord();\r\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\r\n        this.effects = instrument.effects;\t\r\n\r\n        this.aliases = instrument.aliases;\r\n        this.volumeScale = 1.0;\r\n\r\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\r\n\r\n        const samplesPerSecond: number = synth.samplesPerSecond;\r\n        this.updateWaves(instrument, samplesPerSecond);\r\n\r\n        //const ticksIntoBar: number = synth.getTicksIntoBar();\r\n        //const tickTimeStart: number = ticksIntoBar;\r\n        //const tickTimeEnd:   number = ticksIntoBar + 1.0;\r\n        //const secondsPerTick: number = samplesPerTick / synth.samplesPerSecond;\r\n        //const currentPart: number = synth.getCurrentPart();\r\n        //this.envelopeComputer.computeEnvelopes(instrument, currentPart, tickTimeStart, secondsPerTick, tone);\r\n        //const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\r\n        //const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\r\n\r\n        const usesDistortion: boolean = effectsIncludeDistortion(this.effects);\r\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(this.effects);\r\n        const usesPanning: boolean = effectsIncludePanning(this.effects);\r\n        const usesChorus: boolean = effectsIncludeChorus(this.effects);\r\n        const usesEcho: boolean = effectsIncludeEcho(this.effects);\r\n        const usesReverb: boolean = effectsIncludeReverb(this.effects);\r\n\r\n        if (usesDistortion) {\r\n            let useDistortionStart: number = instrument.distortion;\r\n            let useDistortionEnd: number = instrument.distortion;\r\n\r\n            // Check for distortion mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\r\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\r\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const distortionSliderStart = Math.min(1.0, /*envelopeStarts[InstrumentAutomationIndex.distortion] **/ useDistortionStart / (Config.distortionRange - 1));\r\n            const distortionSliderEnd = Math.min(1.0, /*envelopeEnds[  InstrumentAutomationIndex.distortion] **/ useDistortionEnd / (Config.distortionRange - 1));\r\n            const distortionStart: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\r\n            const distortionEnd: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\r\n            const distortionDriveStart: number = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\r\n            const distortionDriveEnd: number = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\r\n            this.distortion = distortionStart;\r\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\r\n            this.distortionDrive = distortionDriveStart;\r\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\r\n        }\r\n\r\n        if (usesBitcrusher) {\r\n            let freqSettingStart: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherFrequency])*/;\r\n            let freqSettingEnd: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherFrequency])*/;\r\n\r\n            // Check for freq crush mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\r\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false);\r\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let quantizationSettingStart: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherQuantization])*/;\r\n            let quantizationSettingEnd: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherQuantization])*/;\r\n\r\n            // Check for bitcrush mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\r\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false);\r\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const basePitch: number = Config.keys[synth.song!.key].basePitch; // TODO: What if there's a key change mid-song?\r\n            const freqStart: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\r\n            const freqEnd: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\r\n            const phaseDeltaStart: number = Math.min(1.0, freqStart / samplesPerSecond);\r\n            const phaseDeltaEnd: number = Math.min(1.0, freqEnd / samplesPerSecond);\r\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\r\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\r\n\r\n            const scaleStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\r\n            const scaleEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\r\n            this.bitcrusherScale = scaleStart;\r\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\r\n\r\n            const foldLevelStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\r\n            const foldLevelEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\r\n            this.bitcrusherFoldLevel = foldLevelStart;\r\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\r\n        }\r\n\r\n        let eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\r\n        if (instrument.eqFilterType) {\r\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\r\n            const eqFilterSettingsStart: FilterSettings = instrument.eqFilter;\r\n            if (instrument.eqSubFilters[1] == null)\r\n                instrument.eqSubFilters[1] = new FilterSettings();\r\n            const eqFilterSettingsEnd: FilterSettings = instrument.eqSubFilters[1];\r\n\r\n            // Change location based on slider values\r\n            let startSimpleFreq: number = instrument.eqFilterSimpleCut;\r\n            let startSimpleGain: number = instrument.eqFilterSimplePeak;\r\n            let endSimpleFreq: number = instrument.eqFilterSimpleCut;\r\n            let endSimpleGain: number = instrument.eqFilterSimplePeak;\r\n\r\n            let filterChanges: boolean = false;\r\n\r\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\r\n                startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\r\n                endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\r\n                startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\r\n                endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n\r\n            let startPoint: FilterControlPoint;\r\n\r\n            if (filterChanges) {\r\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\r\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\r\n\r\n                startPoint = eqFilterSettingsStart.controlPoints[0];\r\n                let endPoint: FilterControlPoint = eqFilterSettingsEnd.controlPoints[0];\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\r\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\r\n\r\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\r\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n\r\n            } else {\r\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\r\n\r\n                startPoint = eqFilterSettingsStart.controlPoints[0];\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\r\n\r\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\r\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n\r\n            }\r\n\r\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\r\n\r\n            this.eqFilterCount = 1;\r\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\r\n        }\r\n        else {\r\n            const eqFilterSettings: FilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;\r\n            //const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\r\n            //const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\r\n            for (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\r\n                //const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\r\n                //const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\r\n                //const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\r\n                //const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\r\n                let startPoint: FilterControlPoint = eqFilterSettings.controlPoints[i];\r\n                let endPoint: FilterControlPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\r\n\r\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\r\n                if (startPoint.type != endPoint.type) {\r\n                    startPoint = endPoint;\r\n                }\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\r\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\r\n                if (this.eqFilters.length <= i) this.eqFilters[i] = new DynamicBiquadFilter();\r\n                this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\r\n\r\n            }\r\n            this.eqFilterCount = eqFilterSettings.controlPointCount;\r\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\r\n        }\r\n\r\n        const mainInstrumentVolume: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n        this.mixVolume = mainInstrumentVolume /** envelopeStarts[InstrumentAutomationIndex.mixVolume]*/;\r\n        let mixVolumeEnd: number = mainInstrumentVolume /** envelopeEnds[  InstrumentAutomationIndex.mixVolume]*/;\r\n\r\n        // Check for mod-related volume delta\r\n        if (synth.isModActive(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex)) {\r\n            // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n            const startVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, false);\r\n            const endVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, true)\r\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n        }\r\n\r\n        // Check for SONG mod-related volume delta\r\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\r\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\r\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\r\n        }\r\n\r\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\r\n\r\n        let eqFilterVolumeStart: number = eqFilterVolume;\r\n        let eqFilterVolumeEnd: number = eqFilterVolume;\r\n        let delayInputMultStart: number = 1.0;\r\n        let delayInputMultEnd: number = 1.0;\r\n\r\n        if (usesPanning) {\r\n            //const panEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.panning] * 2.0 - 1.0;\r\n            //const panEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.panning] * 2.0 - 1.0;\r\n\r\n            let usePanStart: number = instrument.pan;\r\n            let usePanEnd: number = instrument.pan;\r\n            // Check for pan mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\r\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\r\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let panStart: number = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter /** panEnvelopeStart*/));\r\n            let panEnd: number = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter /** panEnvelopeEnd  */));\r\n\r\n            const volumeStartL: number = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\r\n            const volumeStartR: number = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\r\n            const volumeEndL: number = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\r\n            const volumeEndR: number = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\r\n            const maxDelaySamples: number = samplesPerSecond * Config.panDelaySecondsMax;\r\n\r\n            let usePanDelayStart: number = instrument.panDelay;\r\n            let usePanDelayEnd: number = instrument.panDelay;\r\n            // Check for pan delay mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\r\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\r\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const delayStart: number = panStart * usePanDelayStart * maxDelaySamples / 10;\r\n            const delayEnd: number = panEnd * usePanDelayEnd * maxDelaySamples / 10;\r\n            const delayStartL: number = Math.max(0.0, delayStart);\r\n            const delayStartR: number = Math.max(0.0, -delayStart);\r\n            const delayEndL: number = Math.max(0.0, delayEnd);\r\n            const delayEndR: number = Math.max(0.0, -delayEnd);\r\n\r\n            this.panningVolumeL = volumeStartL;\r\n            this.panningVolumeR = volumeStartR;\r\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\r\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\r\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\r\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\r\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\r\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\r\n        }\r\n\r\n        if (usesChorus) {\r\n            //const chorusEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.chorus];\r\n            //const chorusEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.chorus];\r\n            let useChorusStart: number = instrument.chorus;\r\n            let useChorusEnd: number = instrument.chorus;\r\n            // Check for chorus mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\r\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\r\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let chorusStart: number = Math.min(1.0, /*chorusEnvelopeStart **/ useChorusStart / (Config.chorusRange - 1));\r\n            let chorusEnd: number = Math.min(1.0, /*chorusEnvelopeEnd   **/ useChorusEnd / (Config.chorusRange - 1));\r\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\r\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\r\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\r\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\r\n            this.chorusVoiceMult = chorusStart;\r\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\r\n            this.chorusCombinedMult = chorusCombinedMultStart;\r\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\r\n        }\r\n\r\n        let maxEchoMult = 0.0;\r\n        let averageEchoDelaySeconds: number = 0.0;\r\n        if (usesEcho) {\r\n            //const echoSustainEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.echoSustain];\r\n            //const echoSustainEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.echoSustain];\r\n            let useEchoSustainStart: number = instrument.echoSustain;\r\n            let useEchoSustainEnd: number = instrument.echoSustain;\r\n            // Check for echo mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\r\n                useEchoSustainStart = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false) );\r\n                useEchoSustainEnd = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true) );\r\n            }\r\n            const echoMultStart: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeStart **/ useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\r\n            const echoMultEnd: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeEnd   **/ useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\r\n            this.echoMult = echoMultStart;\r\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\r\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\r\n\r\n            // TODO: After computing a tick's settings once for multiple run lengths (which is\r\n            // good for audio worklet threads), compute the echo delay envelopes at tick (or\r\n            // part) boundaries to interpolate between two delay taps.\r\n            //const echoDelayEnvelopeStart:   number = envelopeStarts[InstrumentAutomationIndex.echoDelay];\r\n            //const echoDelayEnvelopeEnd:     number = envelopeEnds[  InstrumentAutomationIndex.echoDelay];\r\n            let useEchoDelayStart: number = instrument.echoDelay;\r\n            let useEchoDelayEnd: number = instrument.echoDelay;\r\n            let ignoreTicks: boolean = false;\r\n            // Check for pan delay mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\r\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false);\r\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true);\r\n                ignoreTicks = true;\r\n            }\r\n\r\n            const tmpEchoDelayOffsetStart: number = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\r\n            const tmpEchoDelayOffsetEnd: number = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\r\n            if (this.echoDelayOffsetEnd != null && !ignoreTicks) {\r\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\r\n            } else {\r\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\r\n            }\r\n\r\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\r\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\r\n\r\n            this.echoDelayOffsetRatio = 0.0;\r\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\r\n\r\n            const shelfRadians: number = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\r\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\r\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\r\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\r\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\r\n        }\r\n\r\n        let maxReverbMult = 0.0;\r\n        if (usesReverb) {\r\n            //const reverbEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.reverb];\r\n            //const reverbEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.reverb];\r\n\r\n            let useReverbStart: number = instrument.reverb;\r\n            let useReverbEnd: number = instrument.reverb;\r\n\r\n            // Check for mod reverb, instrument level\r\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\r\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\r\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n            // Check for mod reverb, song scalar\r\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\r\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\r\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\r\n            }\r\n\r\n            const reverbStart: number = Math.min(1.0, Math.pow(/*reverbEnvelopeStart **/ useReverbStart / Config.reverbRange, 0.667)) * 0.425;\r\n            const reverbEnd: number = Math.min(1.0, Math.pow(/*reverbEnvelopeEnd   **/ useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\r\n\r\n            this.reverbMult = reverbStart;\r\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\r\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\r\n\r\n            const shelfRadians: number = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\r\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\r\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\r\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\r\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\r\n        }\r\n\r\n        if (this.tonesAddedInThisTick) {\r\n            this.attentuationProgress = 0.0;\r\n            this.flushedSamples = 0;\r\n            this.flushingDelayLines = false;\r\n        } else if (!this.flushingDelayLines) {\r\n            // If this instrument isn't playing tones anymore, the volume can fade out by the\r\n            // end of the first tick. It's possible for filters and the panning delay line to\r\n            // continue past the end of the tone but they should have mostly dissipated by the\r\n            // end of the tick anyway.\r\n            if (this.attentuationProgress == 0.0) {\r\n                eqFilterVolumeEnd = 0.0;\r\n            } else {\r\n                eqFilterVolumeStart = 0.0;\r\n                eqFilterVolumeEnd = 0.0;\r\n            }\r\n\r\n            const attenuationThreshold: number = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\r\n            const halfLifeMult: number = -Math.log2(attenuationThreshold);\r\n            let delayDuration: number = 0.0;\r\n\r\n            if (usesChorus) {\r\n                delayDuration += Config.chorusMaxDelay;\r\n            }\r\n\r\n            if (usesEcho) {\r\n                const attenuationPerSecond: number = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\r\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\r\n                const echoDuration: number = halfLife * halfLifeMult;\r\n                delayDuration += echoDuration;\r\n            }\r\n\r\n            if (usesReverb) {\r\n                const averageMult: number = maxReverbMult * 2.0;\r\n                const averageReverbDelaySeconds: number = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\r\n                const attenuationPerSecond: number = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\r\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\r\n                const reverbDuration: number = halfLife * halfLifeMult;\r\n                delayDuration += reverbDuration;\r\n            }\r\n\r\n            const secondsInTick: number = samplesPerTick / samplesPerSecond;\r\n            const progressInTick: number = secondsInTick / delayDuration;\r\n            const progressAtEndOfTick: number = this.attentuationProgress + progressInTick;\r\n            if (progressAtEndOfTick >= 1.0) {\r\n                delayInputMultEnd = 0.0;\r\n            }\r\n\r\n            this.attentuationProgress = progressAtEndOfTick;\r\n            if (this.attentuationProgress >= 1.0) {\r\n                this.flushingDelayLines = true;\r\n            }\r\n        } else {\r\n            // Flushing delay lines to zero since the signal has mostly dissipated.\r\n            eqFilterVolumeStart = 0.0;\r\n            eqFilterVolumeEnd = 0.0;\r\n            delayInputMultStart = 0.0;\r\n            delayInputMultEnd = 0.0;\r\n\r\n            let totalDelaySamples: number = 0;\r\n            if (usesChorus) totalDelaySamples += synth.chorusDelayBufferSize;\r\n            if (usesEcho) totalDelaySamples += this.echoDelayLineL!.length;\r\n            if (usesReverb) totalDelaySamples += Config.reverbDelayBufferSize;\r\n\r\n            this.flushedSamples += roundedSamplesPerTick;\r\n            if (this.flushedSamples >= totalDelaySamples) {\r\n                this.deactivateAfterThisTick = true;\r\n            }\r\n        }\r\n\r\n        this.eqFilterVolume = eqFilterVolumeStart;\r\n        this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\r\n        this.delayInputMult = delayInputMultStart;\r\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\r\n    }\r\n\r\n    public updateWaves(instrument: Instrument, samplesPerSecond: number): void {\r\n        this.volumeScale = 1.0;\r\n        if (instrument.type == InstrumentType.chip) {\r\n            this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            this.wave = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\r\n            this.volumeScale = 0.05;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            for (let i: number = 0; i < Config.drumCount; i++) {\r\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\r\n            }\r\n            this.wave = null;\r\n        } else {\r\n            this.wave = null;\r\n        }\r\n    }\r\n\r\n    public getDrumsetWave(pitch: number): Float32Array {\r\n        if (this.type == InstrumentType.drumset) {\r\n            return this.drumsetSpectrumWaves[pitch].wave!;\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\r\n        }\r\n    }\r\n\r\n    public static drumsetIndexReferenceDelta(index: number): number {\r\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\r\n    }\r\n\r\n    private static _drumsetIndexToSpectrumOctave(index: number): number {\r\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\r\n    }\r\n}\r\n\r\nclass ChannelState {\r\n    public readonly instruments: InstrumentState[] = [];\r\n    public muted: boolean = false;\r\n    public singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\r\n}\r\n\r\nexport class Synth {\r\n\r\n    private syncSongState(): void {\r\n        const channelCount: number = this.song!.getChannelCount();\r\n        for (let i: number = this.channels.length; i < channelCount; i++) {\r\n            this.channels[i] = new ChannelState();\r\n        }\r\n        this.channels.length = channelCount;\r\n        for (let i: number = 0; i < channelCount; i++) {\r\n            const channel: Channel = this.song!.channels[i];\r\n            const channelState: ChannelState = this.channels[i];\r\n            for (let j: number = channelState.instruments.length; j < channel.instruments.length; j++) {\r\n                channelState.instruments[j] = new InstrumentState();\r\n            }\r\n            channelState.instruments.length = channel.instruments.length;\r\n\r\n            if (channelState.muted != channel.muted) {\r\n                channelState.muted = channel.muted;\r\n                if (channelState.muted) {\r\n                    for (const instrumentState of channelState.instruments) {\r\n                        instrumentState.resetAllEffects();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public warmUpSynthesizer(song: Song | null): void {\r\n        // Don't bother to generate the drum waves unless the song actually\r\n        // uses them, since they may require a lot of computation.\r\n        if (song != null) {\r\n            this.syncSongState();\r\n            const samplesPerTick: number = this.getSamplesPerTick();\r\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\r\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\r\n                    Synth.getInstrumentSynthFunction(instrument);\r\n                    instrument.LFOtime = 0;\r\n                    instrument.nextLFOtime = 0;\r\n                    instrument.arpTime = 0;\r\n                    instrument.tmpEqFilterStart = instrument.eqFilter;\r\n                    instrument.tmpEqFilterEnd = null;\r\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\r\n                    instrument.tmpNoteFilterEnd = null;\r\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\r\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\r\n                }\r\n\r\n            }\r\n        }\r\n        var dummyArray = new Float32Array(1);\r\n        this.isPlayingSong = true;\r\n        this.synthesize(dummyArray, dummyArray, 1, true);\r\n        this.isPlayingSong = false;\r\n    }\r\n\r\n    public computeLatestModValues(): void {\r\n\r\n        if (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n            let latestModTimes: (number | null)[] = [];\r\n            let latestModInsTimes: (number | null)[][][] = [];\r\n            this.modValues = [];\r\n            this.nextModValues = [];\r\n            this.modInsValues = [];\r\n            this.nextModInsValues = [];\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                latestModInsTimes[channel] = [];\r\n                this.modInsValues[channel] = [];\r\n                this.nextModInsValues[channel] = [];\r\n\r\n                for (let instrument: number = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\r\n                    this.modInsValues[channel][instrument] = [];\r\n                    this.nextModInsValues[channel][instrument] = [];\r\n                    latestModInsTimes[channel][instrument] = [];\r\n                }\r\n            }\r\n\r\n            // Find out where we're at in the fraction of the current bar.\r\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n            // For mod channels, calculate last set value for each mod\r\n            for (let channelIndex: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\r\n                if (!(this.song.channels[channelIndex].muted)) {\r\n\r\n                    let pattern: Pattern | null;\r\n\r\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n                        pattern = this.song.getPattern(channelIndex, currentBar);\r\n\r\n                        if (pattern != null) {\r\n                            let instrumentIdx: number = pattern.instruments[0];\r\n                            let instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\r\n                            let latestPinParts: number[] = [];\r\n                            let latestPinValues: number[] = [];\r\n\r\n                            let partsInBar: number = (currentBar == this.bar)\r\n                                ? currentPart\r\n                                : this.findPartsInBar(currentBar);\r\n\r\n                            for (const note of pattern.notes) {\r\n                                if (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\r\n                                    }\r\n                                    else {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\r\n\r\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // Set modulator value, if it wasn't set in another pattern already scanned\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                if (latestPinParts[mod] != null) {\r\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\r\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modulators[mod]] as number)) {\r\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);\r\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        // Generate list of used instruments\r\n                                        let usedInstruments: number[] = [];\r\n                                        // All\r\n                                        if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                                            for (let i: number = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\r\n                                                usedInstruments.push(i);\r\n                                            }\r\n                                        }\r\n                                        // Active\r\n                                        else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                                            const tgtPattern: Pattern | null = this.song.getPattern(instrument.modChannels[mod], currentBar);\r\n                                            if (tgtPattern != null)\r\n                                                usedInstruments = tgtPattern.instruments;\r\n                                        } else {\r\n                                            usedInstruments.push(instrument.modInstruments[mod]);\r\n                                        }\r\n                                        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\r\n                                            // Iterate through all used instruments by this modulator\r\n                                            // Special indices for mod filter targets, since they control multiple things.\r\n                                            const eqFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index;\r\n                                            const noteFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\r\n                                            let modulatorAdjust: number = instrument.modulators[mod];\r\n                                            if (eqFilterParam) {\r\n                                                modulatorAdjust = Config.modulators.length + instrument.modFilterTypes[mod];\r\n                                            } else if (noteFilterParam) {\r\n                                                // Skip all possible indices for eq filter\r\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + instrument.modFilterTypes[mod];\r\n                                            }\r\n\r\n                                            if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\r\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]!) {\r\n\r\n                                                if (eqFilterParam) {\r\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n                                                    if (instrument.modFilterTypes[mod] == 0) {\r\n                                                        tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];\r\n                                                    } else {\r\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                                                            if (tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {\r\n                                                                tgtInstrument.tmpEqFilterStart = new FilterSettings();\r\n                                                                tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\r\n                                                                i = Config.filterMorphCount;\r\n                                                            }\r\n                                                        }\r\n                                                        if (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart!.controlPointCount) {\r\n                                                            if (instrument.modFilterTypes[mod] % 2)\r\n                                                                tgtInstrument.tmpEqFilterStart!.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\r\n                                                            else\r\n                                                                tgtInstrument.tmpEqFilterStart!.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\r\n                                                        }\r\n                                                    }\r\n                                                    tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;\r\n                                                } else if (noteFilterParam) {\r\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n                                                    if (instrument.modFilterTypes[mod] == 0) {\r\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\r\n                                                    } else {\r\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                                                            if (tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\r\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\r\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\r\n                                                                i = Config.filterMorphCount;\r\n                                                            }\r\n                                                        }\r\n                                                        if (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart!.controlPointCount) {\r\n                                                            if (instrument.modFilterTypes[mod] % 2)\r\n                                                                tgtInstrument.tmpNoteFilterStart!.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\r\n                                                            else\r\n                                                                tgtInstrument.tmpNoteFilterStart!.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\r\n                                                        }\r\n                                                    }\r\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\r\n                                                }\r\n                                                else this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);\r\n\r\n                                                latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detects if a modulator is set, but not valid for the current effects/instrument type/filter type\r\n    // Note, setting 'none' or the intermediary steps when clicking to add a mod, like an unset channel/unset instrument, counts as valid.\r\n    // TODO: This kind of check is mirrored in SongEditor.ts' whenUpdated. Creates a lot of redundancy for adding new mods. Can be moved into new properties for mods, to avoid this later.\r\n    public determineInvalidModulators(instrument: Instrument): void {\r\n        if (this.song == null)\r\n            return;\r\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n            instrument.invalidModulators[mod] = true;\r\n            // For song modulator, valid if any setting used\r\n            if (instrument.modChannels[mod] == -1) {\r\n                if (instrument.modulators[mod] != 0)\r\n                    instrument.invalidModulators[mod] = false;\r\n                continue;\r\n            }\r\n            const channel: Channel | null = this.song.channels[instrument.modChannels[mod]];\r\n            if (channel == null) continue;\r\n            let tgtInstrumentList: Instrument[] = [];\r\n            if (instrument.modInstruments[mod] >= channel.instruments.length) { // All or active\r\n                tgtInstrumentList = channel.instruments;\r\n            } else {\r\n                tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];\r\n            }\r\n            for (let i: number = 0; i < tgtInstrumentList.length; i++) {\r\n                const tgtInstrument: Instrument | null = tgtInstrumentList[i];\r\n                if (tgtInstrument == null) continue;\r\n                const str: string = Config.modulators[instrument.modulators[mod]].name;\r\n                // Check effects\r\n                if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))\r\n                    // Instrument type specific\r\n                    || (tgtInstrument.type != InstrumentType.fm && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\r\n                    || (tgtInstrument.type != InstrumentType.pwm && (str == \"pulse width\"))\r\n                    // Arp check\r\n                    || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\r\n                    // EQ Filter check\r\n                    || (tgtInstrument.eqFilterType && str == \"eq filter\")\r\n                    || (!tgtInstrument.eqFilterType && (str == \"eq filt cut\" || str == \"eq filt peak\"))\r\n                    || (str == \"eq filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.eqFilter.controlPointCount)\r\n                    // Note Filter check\r\n                    || (tgtInstrument.noteFilterType && str == \"note filter\")\r\n                    || (!tgtInstrument.noteFilterType && (str == \"note filt cut\" || str == \"note filt peak\"))\r\n                    || (str == \"note filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.noteFilter.controlPointCount))) {\r\n\r\n                    instrument.invalidModulators[mod] = false;\r\n                    i = tgtInstrumentList.length;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private static operatorAmplitudeCurve(amplitude: number): number {\r\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n    }\r\n\r\n    public samplesPerSecond: number = 44100;\r\n    public panningDelayBufferSize: number;\r\n    public panningDelayBufferMask: number;\r\n    public chorusDelayBufferSize: number;\r\n    public chorusDelayBufferMask: number;\r\n    // TODO: reverb\r\n\r\n    public song: Song | null = null;\r\n    public preferLowerLatency: boolean = false; // enable when recording performances from keyboard or MIDI. Takes effect next time you activate audio.\r\n    public anticipatePoorPerformance: boolean = false; // enable on mobile devices to reduce audio stutter glitches. Takes effect next time you activate audio.\r\n    public liveInputDuration: number = 0;\r\n    public liveInputStarted: boolean = false;\r\n    public liveInputPitches: number[] = [];\r\n    public liveInputChannel: number = 0;\r\n    public liveInputInstruments: number[] = [];\r\n    public loopRepeatCount: number = -1;\r\n    public volume: number = 1.0;\r\n    public oscRefreshEventTimer: number = 0;\r\n    public oscEnabled: boolean = true;\r\n    public oscilloscopeScale: number = 1.0;\r\n    public enableMetronome: boolean = false;\r\n    public countInMetronome: boolean = false;\r\n    public renderingSong: boolean = false;\r\n\r\n    private wantToSkip: boolean = false;\r\n    private playheadInternal: number = 0.0;\r\n    private bar: number = 0;\r\n    private prevBar: number | null = null;\r\n    private nextBar: number | null = null;\r\n    private beat: number = 0;\r\n    private part: number = 0;\r\n    private tick: number = 0;\r\n    public isAtStartOfTick: boolean = true;\r\n    public isAtEndOfTick: boolean = true;\r\n    public tickSampleCountdown: number = 0;\r\n    private modValues: (number | null)[] = [];\r\n    private modInsValues: (number | null)[][][] = [];\r\n    private nextModValues: (number | null)[] = [];\r\n    private nextModInsValues: (number | null)[][][] = [];\r\n    private isPlayingSong: boolean = false;\r\n    private isRecording: boolean = false;\r\n    private liveInputEndTime: number = 0.0;\r\n    private browserAutomaticallyClearsAudioBuffer: boolean = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\r\n\r\n    public static readonly tempFilterStartCoefficients: FilterCoefficients = new FilterCoefficients();\r\n    public static readonly tempFilterEndCoefficients: FilterCoefficients = new FilterCoefficients();\r\n    private tempDrumSetControlPoint: FilterControlPoint = new FilterControlPoint();\r\n    public tempFrequencyResponse: FrequencyResponse = new FrequencyResponse();\r\n\r\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n    private static readonly effectsFunctionCache: Function[] = Array(1 << 7).fill(undefined); // keep in sync with the number of post-process effects.\r\n    private static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\r\n\r\n    private readonly channels: ChannelState[] = [];\r\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n    private readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\r\n\r\n    private startedMetronome: boolean = false;\r\n    private metronomeSamplesRemaining: number = -1;\r\n    private metronomeAmplitude: number = 0.0;\r\n    private metronomePrevAmplitude: number = 0.0;\r\n    private metronomeFilter: number = 0.0;\r\n    private limit: number = 0.0;\r\n\r\n    private tempMonoInstrumentSampleBuffer: Float32Array | null = null;\r\n\r\n    private audioCtx: any | null = null;\r\n    private scriptNode: any | null = null;\r\n\r\n    public get playing(): boolean {\r\n        return this.isPlayingSong;\r\n    }\r\n\r\n    public get recording(): boolean {\r\n        return this.isRecording;\r\n    }\r\n\r\n    public get playhead(): number {\r\n        return this.playheadInternal;\r\n    }\r\n\r\n    public set playhead(value: number) {\r\n        if (this.song != null) {\r\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n            let remainder: number = this.playheadInternal;\r\n            this.bar = Math.floor(remainder);\r\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\r\n            this.beat = Math.floor(remainder);\r\n            remainder = Config.partsPerBeat * (remainder - this.beat);\r\n            this.part = Math.floor(remainder);\r\n            remainder = Config.ticksPerPart * (remainder - this.part);\r\n            this.tick = Math.floor(remainder);\r\n            this.tickSampleCountdown = 0;\r\n            this.isAtStartOfTick = true;\r\n            this.prevBar = null;\r\n        }\r\n    }\r\n\r\n    public getSamplesPerBar(): number {\r\n        if (this.song == null) throw new Error();\r\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n    }\r\n\r\n    public getTicksIntoBar(): number {\r\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n    }\r\n    public getCurrentPart(): number {\r\n        return (this.beat * Config.partsPerBeat + this.part);\r\n    }\r\n\r\n    private findPartsInBar(bar: number): number {\r\n        if (this.song == null) return 0;\r\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n            if (pattern != null) {\r\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\r\n                        for (const note of pattern.notes) {\r\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                // Find the earliest next bar note.\r\n                                if (partsInBar > note.start)\r\n                                    partsInBar = note.start;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return partsInBar;\r\n    }\r\n\r\n    // Returns the total samples in the song\r\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n        if (this.song == null)\r\n            return -1;\r\n\r\n        // Compute the window to be checked (start bar to end bar)\r\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n        let hasTempoMods: boolean = false;\r\n        let hasNextBarMods: boolean = false;\r\n        let prevTempo: number = this.song.tempo;\r\n\r\n        // Determine if any tempo or next bar mods happen anywhere in the window\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            for (let bar: number = startBar; bar < endBar; bar++) {\r\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                if (pattern != null) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\r\n                            hasTempoMods = true;\r\n                        }\r\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\r\n                            hasNextBarMods = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n        if (startBar > 0) {\r\n            let latestTempoPin: number | null = null;\r\n            let latestTempoValue: number = 0;\r\n\r\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n                for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                    let pattern = this.song.getPattern(channel, bar);\r\n\r\n                    if (pattern != null) {\r\n                        let instrumentIdx: number = pattern.instruments[0];\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n                        let partsInBar: number = this.findPartsInBar(bar);\r\n\r\n                        for (const note of pattern.notes) {\r\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\r\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestTempoPin = note.end;\r\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\r\n                                    }\r\n                                    else {\r\n                                        latestTempoPin = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\r\n\r\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\r\n                if (latestTempoPin != null) {\r\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                    bar = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasTempoMods || hasNextBarMods) {\r\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n            let bar: number = startBar;\r\n            let ended: boolean = false;\r\n            let totalSamples: number = 0;\r\n\r\n            while (!ended) {\r\n                // Compute the subsection of the pattern that will play\r\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n                let currentPart: number = 0;\r\n\r\n                if (hasNextBarMods) {\r\n                    partsInBar = this.findPartsInBar(bar);\r\n                }\r\n\r\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\r\n                if (hasTempoMods) {\r\n                    let foundMod: boolean = false;\r\n                    for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                        if (foundMod == false) {\r\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                            if (pattern != null) {\r\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\r\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n                                        foundMod = true;\r\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\r\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n                                        for (const note of pattern.notes) {\r\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                                // Compute samples up to this note\r\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                                                if (note.start < partsInBar) {\r\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n                                                        // Compute samples up to this pin\r\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n                                                            const prevPinTempo: number = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            let currPinTempo: number = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            }\r\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n                                                            if (currPinTempo != prevPinTempo) {\r\n\r\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n                                                                // The starting formula is\r\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n                                                                //\r\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n                                                                //\r\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n                                                            }\r\n                                                            else {\r\n\r\n                                                                // No tempo change between the two pins.\r\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n                                                            }\r\n                                                            prevTempo = currPinTempo;\r\n                                                        }\r\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Compute samples for the rest of the bar\r\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                bar++;\r\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n                    bar = this.song.loopStart;\r\n                    if (loop > 0) loop--;\r\n                }\r\n                if (bar >= endBar) {\r\n                    ended = true;\r\n                }\r\n            }\r\n\r\n            return Math.ceil(totalSamples);\r\n        }\r\n        else {\r\n            // No tempo or next bar mods... phew! Just calculate normally.\r\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n        }\r\n    }\r\n\r\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n        if (this.song == null) throw new Error();\r\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\r\n        if (enableIntro) bars += this.song.loopStart;\r\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n        return bars;\r\n    }\r\n\r\n    constructor(song: Song | string | null = null) {\r\n        this.computeDelayBufferSizes();\r\n        if (song != null) this.setSong(song);\r\n    }\r\n\r\n    public setSong(song: Song | string): void {\r\n        if (typeof (song) == \"string\") {\r\n            this.song = new Song(song);\r\n        } else if (song instanceof Song) {\r\n            this.song = song;\r\n        }\r\n        this.prevBar = null;\r\n    }\r\n\r\n    private computeDelayBufferSizes(): void {\r\n        this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\r\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\r\n        this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\r\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\r\n    }\r\n\r\n    private activateAudio(): void {\r\n        const bufferSize: number = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\r\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\r\n            if (this.scriptNode != null) this.deactivateAudio();\r\n            const latencyHint: string = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\r\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\r\n            this.samplesPerSecond = this.audioCtx.sampleRate;\r\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2); // bufferSize samples per callback buffer, 0 input channels, 2 output channels (left/right)\r\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n            this.scriptNode.channelCountMode = 'explicit';\r\n            this.scriptNode.channelInterpretation = 'speakers';\r\n            this.scriptNode.connect(this.audioCtx.destination);\r\n\r\n            this.computeDelayBufferSizes();\r\n        }\r\n        this.audioCtx.resume();\r\n    }\r\n\r\n    private deactivateAudio(): void {\r\n        if (this.audioCtx != null && this.scriptNode != null) {\r\n            this.scriptNode.disconnect(this.audioCtx.destination);\r\n            this.scriptNode = null;\r\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n            this.audioCtx = null;\r\n        }\r\n    }\r\n\r\n    public maintainLiveInput(): void {\r\n        this.activateAudio();\r\n        this.liveInputEndTime = performance.now() + 10000.0;\r\n    }\r\n\r\n    public play(): void {\r\n        if (this.isPlayingSong) return;\r\n        this.computeLatestModValues();\r\n        this.warmUpSynthesizer(this.song);\r\n        this.isPlayingSong = true;\r\n        this.activateAudio();\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.isPlayingSong) return;\r\n        this.isPlayingSong = false;\r\n        this.isRecording = false;\r\n        this.modValues = [];\r\n        this.nextModValues = [];\r\n        if (this.song != null) {\r\n            this.song.inVolumeCap = 0.0;\r\n            this.song.outVolumeCap = 0.0;\r\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\r\n                this.modInsValues[channelIndex] = [];\r\n                this.nextModInsValues[channelIndex] = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    public startRecording(): void {\r\n        this.preferLowerLatency = true;\r\n        this.isRecording = true;\r\n        this.play();\r\n    }\r\n\r\n    public resetEffects(): void {\r\n        this.limit = 0.0;\r\n        this.freeAllTones();\r\n        if (this.song != null) {\r\n            for (const channelState of this.channels) {\r\n                for (const instrumentState of channelState.instruments) {\r\n                    instrumentState.resetAllEffects();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public setModValue(volumeStart: number, volumeEnd: number, mod: number, channelIndex: number, instrumentIndex: number, setting: number): number {\r\n        let val: number = volumeStart + Config.modulators[setting].convertRealFactor;\r\n        let nextVal: number = volumeEnd + Config.modulators[setting].convertRealFactor;\r\n        if (Config.modulators[setting].forSong) {\r\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n                this.modValues[setting] = val;\r\n                this.nextModValues[setting] = nextVal;\r\n            }\r\n        } else {\r\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\r\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\r\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\r\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\r\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\r\n            }\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    public getModValue(setting: number, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n        const forSong: boolean = Config.modulators[setting].forSong;\r\n        if (forSong) {\r\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n            }\r\n        } else if (channel != undefined && instrument != undefined) {\r\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n    public isAnyModActive(channel: number, instrument: number): boolean {\r\n        for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n            if ((this.modValues != undefined && this.modValues[setting] != null)\r\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public unsetMod(setting: number, channel?: number, instrument?: number) {\r\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\r\n            this.modValues[setting] = null;\r\n            this.nextModValues[setting] = null;\r\n            if (channel != undefined && instrument != undefined) {\r\n                this.modInsValues[channel][instrument][setting] = null;\r\n                this.nextModInsValues[channel][instrument][setting] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isFilterModActive(forNoteFilter: boolean, channelIdx: number, instrumentIdx: number) {\r\n        const instrument: Instrument = this.song!.channels[channelIdx].instruments[instrumentIdx];\r\n\r\n        if (forNoteFilter) {\r\n            if (instrument.noteFilterType)\r\n                return false;\r\n            if (instrument.tmpNoteFilterEnd != null)\r\n                return true;\r\n        }\r\n        else {\r\n            if (instrument.eqFilterType)\r\n                return false;\r\n            if (instrument.tmpEqFilterEnd != null)\r\n                return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    public isModActive(setting: number, channel?: number, instrument?: number): boolean {\r\n        const forSong: boolean = Config.modulators[setting].forSong;\r\n        if (forSong) {\r\n            return (this.modValues != undefined && this.modValues[setting] != null);\r\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\r\n            return (this.modInsValues[channel][instrument][setting] != null);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public snapToStart(): void {\r\n        this.bar = 0;\r\n        this.resetEffects();\r\n        this.snapToBar();\r\n    }\r\n\r\n    public goToBar(bar: number): void {\r\n        this.bar = bar;\r\n        this.resetEffects();\r\n        this.playheadInternal = this.bar;\r\n    }\r\n\r\n    public snapToBar(): void {\r\n        this.playheadInternal = this.bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = 0;\r\n    }\r\n\r\n    public jumpIntoLoop(): void {\r\n        if (!this.song) return;\r\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n            const oldBar: number = this.bar;\r\n            this.bar = this.song.loopStart;\r\n            this.playheadInternal += this.bar - oldBar;\r\n\r\n            if (this.playing)\r\n                this.computeLatestModValues();\r\n        }\r\n    }\r\n\r\n    public goToNextBar(): void {\r\n        if (!this.song) return;\r\n        this.prevBar = this.bar;\r\n        const oldBar: number = this.bar;\r\n        this.bar++;\r\n        if (this.bar >= this.song.barCount) {\r\n            this.bar = 0;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public goToPrevBar(): void {\r\n        if (!this.song) return;\r\n        this.prevBar = null;\r\n        const oldBar: number = this.bar;\r\n        this.bar--;\r\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\r\n            this.bar = this.song.barCount - 1;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    private getNextBar(): number {\r\n        let nextBar: number = this.bar + 1;\r\n        if (this.isRecording) {\r\n            if (nextBar >= this.song!.barCount) {\r\n                nextBar = this.song!.barCount - 1;\r\n            }\r\n        } else if (this.loopRepeatCount != 0 && nextBar == this.song!.loopStart + this.song!.loopLength) {\r\n            nextBar = this.song!.loopStart;\r\n        }\r\n        return nextBar;\r\n    }\r\n\r\n    public skipBar(): void {\r\n        if (!this.song) return;\r\n        const samplesPerTick: number = this.getSamplesPerTick();\r\n        this.bar++;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = samplesPerTick;\r\n        this.isAtStartOfTick = true;\r\n\r\n        if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n            this.bar = this.song.loopStart;\r\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n        }\r\n\r\n    }\r\n\r\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\r\n        const outputBuffer = audioProcessingEvent.outputBuffer;\r\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n        if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\r\n            // If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\r\n            this.browserAutomaticallyClearsAudioBuffer = false;\r\n        }\r\n        if (!this.browserAutomaticallyClearsAudioBuffer) {\r\n            // If this browser does not clear the buffer automatically, do so manually before continuing.\r\n            const length: number = outputBuffer.length;\r\n            for (let i: number = 0; i < length; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n        }\r\n\r\n        if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\r\n            this.deactivateAudio();\r\n        } else {\r\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n\r\n            if (this.oscEnabled) {\r\n                if (this.oscRefreshEventTimer <= 0) {\r\n                    events.raise(\"oscilloscopeUpdate\", this.oscilloscopeScale, outputDataL, outputDataR);\r\n                    this.oscRefreshEventTimer = 2;\r\n                } else {\r\n                    this.oscRefreshEventTimer--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n        if (this.song == null) {\r\n            for (let i: number = 0; i < outputBufferLength; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n            return;\r\n        }\r\n\r\n        const song: Song = this.song;\r\n        this.song.inVolumeCap = 0.0 // Reset volume cap for this run\r\n        this.song.outVolumeCap = 0.0;\r\n\r\n        let samplesPerTick: number = this.getSamplesPerTick();\r\n        let ended: boolean = false;\r\n\r\n        // Check the bounds of the playhead:\r\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\r\n            this.tickSampleCountdown = samplesPerTick;\r\n            this.isAtStartOfTick = true;\r\n        }\r\n        if (playSong) {\r\n            if (this.beat >= song.beatsPerBar) {\r\n                this.beat = 0;\r\n                this.part = 0;\r\n                this.tick = 0;\r\n                this.tickSampleCountdown = samplesPerTick;\r\n                this.isAtStartOfTick = true;\r\n\r\n                this.prevBar = this.bar;\r\n                this.bar = this.getNextBar();\r\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\r\n            }\r\n            if (this.bar >= song.barCount) {\r\n                this.bar = 0;\r\n                if (this.loopRepeatCount != -1) {\r\n                    ended = true;\r\n                    this.pause();\r\n                }\r\n            }\r\n        }\r\n\r\n        //const synthStartTime: number = performance.now();\r\n\r\n        this.syncSongState();\r\n\r\n        if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\r\n            this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\r\n        }\r\n\r\n        // Post processing parameters:\r\n        const volume: number = +this.volume;\r\n        const limitDecay: number = 1.0 - Math.pow(0.5, 4.0 / this.samplesPerSecond);\r\n        const limitRise: number = 1.0 - Math.pow(0.5, 4000.0 / this.samplesPerSecond);\r\n        let limit: number = +this.limit;\r\n        let skippedBars: number[] = [];\r\n        let firstSkippedBufferIndex: number = -1;\r\n\r\n        let bufferIndex: number = 0;\r\n        while (bufferIndex < outputBufferLength && !ended) {\r\n\r\n            this.nextBar = this.getNextBar();\r\n            if (this.nextBar >= song.barCount) this.nextBar = null;\r\n\r\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n            const samplesLeftInTick: number = Math.ceil(this.tickSampleCountdown);\r\n            const runLength: number = Math.min(samplesLeftInTick, samplesLeftInBuffer);\r\n            const runEnd: number = bufferIndex + runLength;\r\n            \r\n            // Handle mod synth\r\n            if (this.isPlayingSong || this.renderingSong) {\r\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                    const channel: Channel = song.channels[channelIndex];\r\n                    const channelState: ChannelState = this.channels[channelIndex];\r\n\r\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\r\n\r\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n\r\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.activeModTones.get(i);\r\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle next bar mods if they were set\r\n            if (this.wantToSkip) {\r\n                // Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.\r\n                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.\r\n                let barVisited: boolean = skippedBars.includes(this.bar);\r\n                if (barVisited && bufferIndex == firstSkippedBufferIndex)\r\n                    return;\r\n                if (firstSkippedBufferIndex == -1) {\r\n                    firstSkippedBufferIndex = bufferIndex;\r\n                }\r\n                if (!barVisited)\r\n                    skippedBars.push(this.bar);\r\n                \r\n                this.wantToSkip = false;\r\n                this.skipBar();\r\n                continue;\r\n            }\r\n\r\n            for (let channelIndex: number = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\r\n                const channel: Channel = song.channels[channelIndex];\r\n                const channelState: ChannelState = this.channels[channelIndex];\r\n\r\n                if (this.isAtStartOfTick) {\r\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\r\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\r\n                }\r\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\r\n                    const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n\r\n                    if (this.isAtStartOfTick) {\r\n                        let tonesPlayedInThisInstrument: number = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\r\n\r\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.releasedTones.get(i);\r\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\r\n                                this.freeReleasedTone(instrumentState, i);\r\n                                i--;\r\n                                continue;\r\n                            }\r\n                            const shouldFadeOutFast: boolean = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\r\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\r\n                            tonesPlayedInThisInstrument++;\r\n                        }\r\n\r\n                        if (instrumentState.awake) {\r\n                            if (!instrumentState.computed) {\r\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\r\n                            }\r\n\r\n                            instrumentState.computed = false;\r\n                            //instrumentState.envelopeComputer.clearEnvelopes();\r\n                        }\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.activeTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.activeTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.liveInputTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.liveInputTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.releasedTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    if (instrumentState.awake) {\r\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\r\n                    }\r\n\r\n                    // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n                    const tickSampleCountdown: number = this.tickSampleCountdown;\r\n                    const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n                    const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n                    const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n                    const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n                    const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n                    const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n                    const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n                    instrument.LFOtime = instrument.nextLFOtime;\r\n\r\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\r\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\r\n                    }\r\n\r\n                    if (useVibratoSpeed == 0) {\r\n                        instrument.LFOtime = 0;\r\n                        instrument.nextLFOtime = 0;\r\n                    }\r\n                    else {\r\n                        instrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.enableMetronome || this.countInMetronome) {\r\n                if (this.part == 0) {\r\n                    if (!this.startedMetronome) {\r\n                        const midBeat: boolean = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\r\n                        const periods: number = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\r\n                        const hz: number = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\r\n                        const amplitude: number = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\r\n                        const samplesPerPeriod: number = this.samplesPerSecond / hz;\r\n                        const radiansPerSample: number = Math.PI * 2.0 / samplesPerPeriod;\r\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\r\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\r\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\r\n                        this.metronomePrevAmplitude = 0.0;\r\n\r\n                        this.startedMetronome = true;\r\n                    }\r\n                    if (this.metronomeSamplesRemaining > 0) {\r\n                        const stopIndex: number = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\r\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\r\n                        for (let i: number = bufferIndex; i < stopIndex; i++) {\r\n                            outputDataL[i] += this.metronomeAmplitude;\r\n                            outputDataR[i] += this.metronomeAmplitude;\r\n                            const tempAmplitude: number = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\r\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\r\n                            this.metronomeAmplitude = tempAmplitude;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.startedMetronome = false;\r\n                }\r\n            }\r\n\r\n            // Post processing:\r\n            for (let i: number = bufferIndex; i < runEnd; i++) {\r\n                // A compressor/limiter.\r\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\r\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\r\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n                const abs: number = absL > absR ? absL : absR;\r\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n                const limitRange: number = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\r\n                // Determine the target amplification based on the range of the curve\r\n                const limitTarget: number =\r\n                    (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\r\n                    + (+(limitRange == 1)) * (1.05)\r\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\r\n                // Move the limit towards the target\r\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n                outputDataL[i] = sampleL * limitedVolume;\r\n                outputDataR[i] = sampleR * limitedVolume;\r\n\r\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n            }\r\n\r\n            bufferIndex += runLength;\r\n\r\n            this.isAtStartOfTick = false;\r\n            this.tickSampleCountdown -= runLength;\r\n            if (this.tickSampleCountdown <= 0) {\r\n                this.isAtStartOfTick = true;\r\n\r\n                // Track how long tones have been released, and free them if there are too many.\r\n                // Also reset awake InstrumentStates that didn't have any Tones during this tick.\r\n                for (const channelState of this.channels) {\r\n                    for (const instrumentState of channelState.instruments) {\r\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.releasedTones.get(i);\r\n                            if (tone.isOnLastTick) {\r\n                                this.freeReleasedTone(instrumentState, i);\r\n                                i--;\r\n                            } else {\r\n                                tone.ticksSinceReleased++;\r\n                            }\r\n                        }\r\n                        if (instrumentState.deactivateAfterThisTick) {\r\n                            instrumentState.deactivate();\r\n                        }\r\n                        instrumentState.tonesAddedInThisTick = false;\r\n                    }\r\n                }\r\n\r\n                // Update arpeggio time, which is used to calculate arpeggio position\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\r\n                            useArpeggioSpeed = this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false);\r\n                            if (Number.isInteger(useArpeggioSpeed)) {\r\n                                instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                            } else {\r\n                                // Linear interpolate arpeggio values\r\n                                instrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Update next-used filters after each run\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        if (instrument.tmpEqFilterEnd != null) {\r\n                            instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;\r\n                        } else {\r\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\r\n                        }\r\n                        if (instrument.tmpNoteFilterEnd != null) {\r\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\r\n                        } else {\r\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.tick++;\r\n                this.tickSampleCountdown += samplesPerTick;\r\n                if (this.tick == Config.ticksPerPart) {\r\n                    this.tick = 0;\r\n                    this.part++;\r\n                    this.liveInputDuration--;\r\n\r\n                    if (this.part == Config.partsPerBeat) {\r\n                        this.part = 0;\r\n\r\n                        if (playSong) {\r\n                            this.beat++;\r\n                            if (this.beat == song.beatsPerBar) {\r\n                                // bar changed, reset for next bar:\r\n                                this.beat = 0;\r\n\r\n                                if (this.countInMetronome) {\r\n                                    this.countInMetronome = false;\r\n                                } else {\r\n                                    this.prevBar = this.bar;\r\n                                    this.bar = this.getNextBar();\r\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\r\n                                    if (this.bar >= song.barCount) {\r\n                                        this.bar = 0;\r\n                                        if (this.loopRepeatCount != -1) {\r\n                                            ended = true;\r\n                                            this.resetEffects();\r\n                                            this.pause();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update mod values so that next values copy to current values\r\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\r\n                    this.modValues[setting] = this.nextModValues[setting];\r\n            }\r\n\r\n            // Set samples per tick if song tempo mods changed it\r\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\r\n                samplesPerTick = this.getSamplesPerTick();\r\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n            }\r\n\r\n            // Bound LFO times to be within their period (to keep values from getting large)\r\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\r\n                for (let instrument of this.song.channels[channel].instruments) {\r\n                    instrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n                    instrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n                }\r\n            }\r\n\r\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrument: number = 0; instrument < this.song.getMaxInstrumentsPerChannel(); instrument++) {\r\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Optimization: Avoid persistent reverb values in the float denormal range.\r\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\r\n        this.limit = limit;\r\n\r\n        if (playSong && !this.countInMetronome) {\r\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\r\n        }\r\n\r\n        /*\r\n        const synthDuration: number = performance.now() - synthStartTime;\r\n        // Performance measurements:\r\n        samplesAccumulated += outputBufferLength;\r\n        samplePerformance += synthDuration;\r\n    \t\r\n        if (samplesAccumulated >= 44100 * 4) {\r\n            const secondsGenerated = samplesAccumulated / 44100;\r\n            const secondsRequired = samplePerformance / 1000;\r\n            const ratio = secondsRequired / secondsGenerated;\r\n            console.log(ratio);\r\n            samplePerformance = 0;\r\n            samplesAccumulated = 0;\r\n        }\r\n        */\r\n    }\r\n\r\n    private freeTone(tone: Tone): void {\r\n        this.tonePool.pushBack(tone);\r\n    }\r\n\r\n    private newTone(): Tone {\r\n        if (this.tonePool.count() > 0) {\r\n            const tone: Tone = this.tonePool.popBack();\r\n            tone.freshlyAllocated = true;\r\n            return tone;\r\n        }\r\n        return new Tone();\r\n    }\r\n\r\n    private releaseTone(instrumentState: InstrumentState, tone: Tone): void {\r\n        instrumentState.releasedTones.pushFront(tone);\r\n        tone.atNoteStart = false;\r\n        tone.passedEndOfNote = true;\r\n    }\r\n\r\n    private freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\r\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\r\n        instrumentState.releasedTones.remove(toneIndex);\r\n    }\r\n\r\n    public freeAllTones(): void {\r\n        for (const channelState of this.channels) {\r\n            for (const instrumentState of channelState.instruments) {\r\n                while (instrumentState.activeTones.count() > 0) this.freeTone(instrumentState.activeTones.popBack());\r\n                while (instrumentState.activeModTones.count() > 0) this.freeTone(instrumentState.activeModTones.popBack());\r\n                while (instrumentState.releasedTones.count() > 0) this.freeTone(instrumentState.releasedTones.popBack());\r\n                while (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\r\n            }\r\n        }\r\n    }\r\n\r\n    private determineLiveInputTones(song: Song, channelIndex: number, samplesPerTick: number): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const pitches: number[] = this.liveInputPitches;\r\n\r\n        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n            const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n            const toneList: Deque<Tone> = instrumentState.liveInputTones;\r\n            let toneCount: number = 0;\r\n            if (this.liveInputDuration > 0 && channelIndex == this.liveInputChannel && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\r\n                const instrument: Instrument = channel.instruments[instrumentIndex];\r\n\r\n                if (instrument.getChord().singleTone) {\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= toneCount) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\r\n                        tone = this.newTone();\r\n                        toneList.set(toneCount, tone);\r\n                    } else {\r\n                        tone = toneList.get(toneCount);\r\n                    }\r\n                    toneCount++;\r\n\r\n                    for (let i: number = 0; i < pitches.length; i++) {\r\n                        tone.pitches[i] = pitches[i];\r\n                    }\r\n                    tone.pitchCount = pitches.length;\r\n                    tone.chordSize = 1;\r\n                    tone.instrumentIndex = instrumentIndex;\r\n                    tone.note = tone.prevNote = tone.nextNote = null;\r\n                    tone.atNoteStart = this.liveInputStarted;\r\n                    tone.forceContinueAtStart = false;\r\n                    tone.forceContinueAtEnd = false;\r\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                } else {\r\n                    //const transition: Transition = instrument.getTransition();\r\n\r\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\r\n\r\n                    for (let i: number = 0; i < pitches.length; i++) {\r\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n                        let tone: Tone;\r\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\r\n                            tone = this.tempMatchedPitchTones[toneCount]!;\r\n                            this.tempMatchedPitchTones[toneCount] = null;\r\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\r\n                                this.releaseTone(instrumentState, tone);\r\n                                tone = this.newTone();\r\n                            }\r\n                            toneList.pushBack(tone);\r\n                        } else {\r\n                            tone = this.newTone();\r\n                            toneList.pushBack(tone);\r\n                        }\r\n                        toneCount++;\r\n\r\n                        tone.pitches[0] = pitches[i];\r\n                        tone.pitchCount = 1;\r\n                        tone.chordSize = pitches.length;\r\n                        tone.instrumentIndex = instrumentIndex;\r\n                        tone.note = tone.prevNote = tone.nextNote = null;\r\n                        tone.atNoteStart = this.liveInputStarted;\r\n                        tone.forceContinueAtStart = false;\r\n                        tone.forceContinueAtEnd = false;\r\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            while (toneList.count() > toneCount) {\r\n                this.releaseTone(instrumentState, toneList.popBack());\r\n            }\r\n\r\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\r\n        }\r\n\r\n        this.liveInputStarted = false;\r\n    }\r\n\r\n    // Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\r\n    // seamless transition across patterns, otherwise returns null.\r\n    private adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean, instrument: Instrument): Chord | null {\r\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\r\n            // The adjacent pattern does not contain the same instrument as the current pattern.\r\n\r\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\r\n                // The current or adjacent pattern contains more than one instrument, don't bother\r\n                // trying to connect them.\r\n                return null;\r\n            }\r\n            // Otherwise, the two patterns each contain one instrument, but not the same instrument.\r\n            // Try to connect them.\r\n            const otherInstrument: Instrument = channel.instruments[otherPattern.instruments[0]];\r\n\r\n            if (forceContinue) {\r\n                // Even non-seamless instruments can be connected across patterns if forced.\r\n                return otherInstrument.getChord();\r\n            }\r\n\r\n            // Otherwise, check that both instruments are seamless across patterns.\r\n            const otherTransition: Transition = otherInstrument.getTransition();\r\n            if ((!instrument.continueThruPattern) && transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\r\n                return otherInstrument.getChord();\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            // If both patterns contain the same instrument, check that it is seamless across patterns.\r\n            return (forceContinue || (!instrument.continueThruPattern) && transition.includeAdjacentPatterns) ? chord : null;\r\n        }\r\n    }\r\n\r\n    public static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\r\n        if (firstNote.pitches.length != secondNote.pitches.length) return false;\r\n        const firstNoteInterval: number = firstNote.pins[firstNote.pins.length - 1].interval;\r\n        for (const pitch of firstNote.pitches) {\r\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private moveTonesIntoOrderedTempMatchedList(toneList: Deque<Tone>, notePitches: number[]): void {\r\n        // The tones are about to seamlessly transition to a new note. The pitches\r\n        // from the old note may or may not match any of the pitches in the new\r\n        // note, and not necessarily in order, but if any do match, they'll sound\r\n        // better if those tones continue to have the same pitch. Attempt to find\r\n        // the right spot for each old tone in the new chord if possible.\r\n\r\n        for (let i: number = 0; i < toneList.count(); i++) {\r\n            const tone: Tone = toneList.get(i);\r\n            const pitch: number = tone.pitches[0] + tone.lastInterval;\r\n            for (let j: number = 0; j < notePitches.length; j++) {\r\n                if (notePitches[j] == pitch) {\r\n                    this.tempMatchedPitchTones[j] = tone;\r\n                    toneList.remove(i);\r\n                    i--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Any tones that didn't get matched should just fill in the gaps.\r\n        while (toneList.count() > 0) {\r\n            const tone: Tone = toneList.popFront();\r\n            for (let j: number = 0; j < this.tempMatchedPitchTones.length; j++) {\r\n                if (this.tempMatchedPitchTones[j] == null) {\r\n                    this.tempMatchedPitchTones[j] = tone;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private determineCurrentActiveTones(song: Song, channelIndex: number, samplesPerTick: number, playSong: boolean): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\r\n        const currentPart: number = this.getCurrentPart();\r\n        const currentTick: number = this.tick + Config.ticksPerPart * currentPart;\r\n\r\n        if (playSong && song.getChannelIsMod(channelIndex)) {\r\n\r\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\r\n            let notes: (Note | null)[] = [];\r\n            let prevNotes: (Note | null)[] = [];\r\n            let nextNotes: (Note | null)[] = [];\r\n            let fillCount: number = Config.modCount;\r\n            while (fillCount--) {\r\n                notes.push(null);\r\n                prevNotes.push(null);\r\n                nextNotes.push(null);\r\n            }\r\n\r\n            if (pattern != null && !channel.muted) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= currentPart) {\r\n                        // Actually need to check which note starts closer to the start of this note.\r\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\r\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                    }\r\n                    else if (pattern.notes[i].start > currentPart) {\r\n                        // Actually need to check which note starts closer to the end of this note.\r\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let modToneCount: number = 0;\r\n            const newInstrumentIndex: number = (song.patternInstruments && (pattern != null)) ? pattern!.instruments[0] : 0;\r\n            const instrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n            const toneList: Deque<Tone> = instrumentState.activeModTones;\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                if (notes[mod] != null) {\r\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n\r\n                }\r\n\r\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\r\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\r\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\r\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\r\n                    }\r\n                }\r\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\r\n\r\n                if (notes[mod] != null) {\r\n                    let prevNoteForThisInstrument: Note | null = prevNotes[mod];\r\n                    let nextNoteForThisInstrument: Note | null = nextNotes[mod];\r\n\r\n                    let forceContinueAtStart: boolean = false;\r\n                    let forceContinueAtEnd: boolean = false;\r\n                    const atNoteStart: boolean = (Config.ticksPerPart * notes[mod]!.start == currentTick) && this.isAtStartOfTick;\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= modToneCount) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (atNoteStart && (prevNoteForThisInstrument == null)) {\r\n                        const oldTone: Tone = toneList.get(modToneCount);\r\n                        if (oldTone.isOnLastTick) {\r\n                            this.freeTone(oldTone);\r\n                        } else {\r\n                            this.releaseTone(instrumentState, oldTone);\r\n                        }\r\n                        tone = this.newTone();\r\n                        toneList.set(modToneCount, tone);\r\n                    } else {\r\n                        tone = toneList.get(modToneCount);\r\n                    }\r\n                    modToneCount++;\r\n\r\n                    for (let i: number = 0; i < notes[mod]!.pitches.length; i++) {\r\n                        tone.pitches[i] = notes[mod]!.pitches[i];\r\n                    }\r\n                    tone.pitchCount = notes[mod]!.pitches.length;\r\n                    tone.chordSize = 1;\r\n                    tone.instrumentIndex = newInstrumentIndex;\r\n                    tone.note = notes[mod];\r\n                    tone.noteStartPart = notes[mod]!.start;\r\n                    tone.noteEndPart = notes[mod]!.end;\r\n                    tone.prevNote = prevNoteForThisInstrument;\r\n                    tone.nextNote = nextNoteForThisInstrument;\r\n                    tone.prevNotePitchIndex = 0;\r\n                    tone.nextNotePitchIndex = 0;\r\n                    tone.atNoteStart = atNoteStart;\r\n                    tone.passedEndOfNote = false;\r\n                    tone.forceContinueAtStart = forceContinueAtStart;\r\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\r\n                }\r\n            }\r\n            // Automatically free or release seamless tones if there's no new note to take over.\r\n            while (toneList.count() > modToneCount) {\r\n                const tone: Tone = toneList.popBack();\r\n                const channel: Channel = song.channels[channelIndex];\r\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\r\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\r\n                    this.releaseTone(instrumentState, tone);\r\n                } else {\r\n                    this.freeTone(tone);\r\n                }\r\n            }\r\n\r\n        }\r\n        else if (!song.getChannelIsMod(channelIndex)) {\r\n\r\n            let note: Note | null = null;\r\n            let prevNote: Note | null = null;\r\n            let nextNote: Note | null = null;\r\n\r\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= currentPart) {\r\n                        prevNote = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\r\n                        note = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start > currentPart) {\r\n                        nextNote = pattern.notes[i];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (note != null) {\r\n                    if (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n                    if (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n                }\r\n            }\r\n\r\n            // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\r\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\r\n                const newInstrumentIndex: number = song.patternInstruments ? pattern.instruments[0] : 0;\r\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\r\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\r\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n                    while (sourceInstrumentState.activeTones.count() > 0) {\r\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\r\n                    }\r\n                }\r\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\r\n            } else {\r\n                channelState.singleSeamlessInstrument = null;\r\n            }\r\n\r\n            for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n                const toneList: Deque<Tone> = instrumentState.activeTones;\r\n                let toneCount: number = 0;\r\n                if ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\r\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\r\n                    let prevNoteForThisInstrument: Note | null = prevNote;\r\n                    let nextNoteForThisInstrument: Note | null = nextNote;\r\n\r\n                    const partsPerBar: Number = Config.partsPerBeat * song.beatsPerBar;\r\n                    const transition: Transition = instrument.getTransition();\r\n                    const chord: Chord = instrument.getChord();\r\n                    const useStrumSpeed: boolean = chord.strumParts > 0;\r\n                    let forceContinueAtStart: boolean = false;\r\n                    let forceContinueAtEnd: boolean = false;\r\n                    let tonesInPrevNote: number = 0;\r\n                    let tonesInNextNote: number = 0;\r\n                    if (note.start == 0) {\r\n                        // If the beginning of the note coincides with the beginning of the pattern,\r\n                        let prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\r\n                        if (prevPattern != null) {\r\n                            const lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\r\n                            if (lastNote != null && lastNote.end == partsPerBar) {\r\n                                const patternForcesContinueAtStart: boolean = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\r\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart, instrument);\r\n                                if (chordOfCompatibleInstrument != null) {\r\n                                    prevNoteForThisInstrument = lastNote;\r\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\r\n                                    forceContinueAtStart = patternForcesContinueAtStart;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (prevNoteForThisInstrument != null) {\r\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\r\n                    }\r\n                    if (note.end == partsPerBar) {\r\n                        // If the end of the note coincides with the end of the pattern, look for an\r\n                        // adjacent note at the beginning of the next pattern.\r\n                        let nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\r\n                        if (nextPattern != null) {\r\n                            const firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\r\n                            if (firstNote != null && firstNote.start == 0) {\r\n                                const nextPatternForcesContinueAtStart: boolean = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\r\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart, instrument);\r\n                                if (chordOfCompatibleInstrument != null) {\r\n                                    nextNoteForThisInstrument = firstNote;\r\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\r\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (nextNoteForThisInstrument != null) {\r\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\r\n                    }\r\n\r\n                    if (chord.singleTone) {\r\n                        const atNoteStart: boolean = (Config.ticksPerPart * note.start == currentTick);\r\n                        let tone: Tone;\r\n                        if (toneList.count() <= toneCount) {\r\n                            tone = this.newTone();\r\n                            toneList.pushBack(tone);\r\n                        } else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\r\n                            const oldTone: Tone = toneList.get(toneCount);\r\n                            if (oldTone.isOnLastTick) {\r\n                                this.freeTone(oldTone);\r\n                            } else {\r\n                                this.releaseTone(instrumentState, oldTone);\r\n                            }\r\n                            tone = this.newTone();\r\n                            toneList.set(toneCount, tone);\r\n                        } else {\r\n                            tone = toneList.get(toneCount);\r\n                        }\r\n                        toneCount++;\r\n\r\n                        for (let i: number = 0; i < note.pitches.length; i++) {\r\n                            tone.pitches[i] = note.pitches[i];\r\n                        }\r\n                        tone.pitchCount = note.pitches.length;\r\n                        tone.chordSize = 1;\r\n                        tone.instrumentIndex = instrumentIndex;\r\n                        tone.note = note;\r\n                        tone.noteStartPart = note.start;\r\n                        tone.noteEndPart = note.end;\r\n                        tone.prevNote = prevNoteForThisInstrument;\r\n                        tone.nextNote = nextNoteForThisInstrument;\r\n                        tone.prevNotePitchIndex = 0;\r\n                        tone.nextNotePitchIndex = 0;\r\n                        tone.atNoteStart = atNoteStart;\r\n                        tone.passedEndOfNote = false;\r\n                        tone.forceContinueAtStart = forceContinueAtStart;\r\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\r\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                    } else {\r\n                        const transition: Transition = instrument.getTransition();\r\n\r\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\r\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\r\n                        }\r\n\r\n                        let strumOffsetParts: number = 0;\r\n                        for (let i: number = 0; i < note.pitches.length; i++) {\r\n\r\n                            let prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\r\n                            let noteForThisTone: Note = note;\r\n                            let nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\r\n                            let noteStartPart: number = noteForThisTone.start + strumOffsetParts;\r\n                            let passedEndOfNote: boolean = false;\r\n\r\n                            // Strumming may mean that a note's actual start time may be after the\r\n                            // note's displayed start time. If the note start hasn't been reached yet,\r\n                            // carry over the previous tone if available and seamless, otherwise skip\r\n                            // the new tone until it is ready to start.\r\n                            if (noteStartPart > currentPart) {\r\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\r\n                                    // Continue the previous note's chord until the current one takes over.\r\n                                    nextNoteForThisTone = noteForThisTone;\r\n                                    noteForThisTone = prevNoteForThisTone;\r\n                                    prevNoteForThisTone = null;\r\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\r\n                                    passedEndOfNote = true;\r\n                                } else {\r\n                                    // This and the rest of the tones in the chord shouldn't start yet.\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            let noteEndPart: number = noteForThisTone.end;\r\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\r\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\r\n                            }\r\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\r\n                                if (useStrumSpeed) strumOffsetParts += Config.strumSpeedScale[instrument.strumSpeed];\r\n                            }\r\n\r\n                            const atNoteStart: boolean = (Config.ticksPerPart * noteStartPart == currentTick);\r\n                            let tone: Tone;\r\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\r\n                                tone = this.tempMatchedPitchTones[toneCount]!;\r\n                                this.tempMatchedPitchTones[toneCount] = null;\r\n                                toneList.pushBack(tone);\r\n                            } else if (toneList.count() <= toneCount) {\r\n                                tone = this.newTone();\r\n                                toneList.pushBack(tone);\r\n                            } else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\r\n                                const oldTone: Tone = toneList.get(toneCount);\r\n                                if (oldTone.isOnLastTick) {\r\n                                    this.freeTone(oldTone);\r\n                                } else {\r\n                                    this.releaseTone(instrumentState, oldTone);\r\n                                }\r\n                                tone = this.newTone();\r\n                                toneList.set(toneCount, tone);\r\n                            } else {\r\n                                tone = toneList.get(toneCount);\r\n                            }\r\n                            toneCount++;\r\n\r\n                            tone.pitches[0] = noteForThisTone.pitches[i];\r\n                            tone.pitchCount = 1;\r\n                            tone.chordSize = noteForThisTone.pitches.length;\r\n                            tone.instrumentIndex = instrumentIndex;\r\n                            tone.note = noteForThisTone;\r\n                            tone.noteStartPart = noteStartPart;\r\n                            tone.noteEndPart = noteEndPart;\r\n                            tone.prevNote = prevNoteForThisTone;\r\n                            tone.nextNote = nextNoteForThisTone;\r\n                            tone.prevNotePitchIndex = i;\r\n                            tone.nextNotePitchIndex = i;\r\n                            tone.atNoteStart = atNoteStart;\r\n                            tone.passedEndOfNote = passedEndOfNote;\r\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\r\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\r\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                        }\r\n                    }\r\n                }\r\n                // Automatically free or release seamless tones if there's no new note to take over.\r\n                while (toneList.count() > toneCount) {\r\n                    const tone: Tone = toneList.popBack();\r\n                    const channel: Channel = song.channels[channelIndex];\r\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\r\n                        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n                        this.releaseTone(instrumentState, tone);\r\n                    } else {\r\n                        this.freeTone(tone);\r\n                    }\r\n                }\r\n\r\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearTempMatchedPitchTones(toneCount: number, instrumentState: InstrumentState): void {\r\n        for (let i: number = toneCount; i < this.tempMatchedPitchTones.length; i++) {\r\n            const oldTone: Tone | null = this.tempMatchedPitchTones[i];\r\n            if (oldTone != null) {\r\n                if (oldTone.isOnLastTick) {\r\n                    this.freeTone(oldTone);\r\n                } else {\r\n                    this.releaseTone(instrumentState, oldTone);\r\n                }\r\n                this.tempMatchedPitchTones[i] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private playTone(channelIndex: number, bufferIndex: number, runLength: number, tone: Tone): void {\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n\r\n        if (instrumentState.synthesizer != null) instrumentState.synthesizer!(this, bufferIndex, runLength, tone, instrumentState);\r\n        tone.envelopeComputer.clearEnvelopes();\r\n    }\r\n\r\n    // Computes mod note position at the start and end of the window and \"plays\" the mod tone, setting appropriate mod data.\r\n    private playModTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n\r\n        if (tone.note != null) {\r\n            const ticksIntoBar: number = this.getTicksIntoBar();\r\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n            const tickSampleCountdown: number = this.tickSampleCountdown;\r\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n            const endRatio: number = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\r\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n            const tickTimeStart: number = Config.ticksPerPart * partTimeStart;\r\n            const tickTimeEnd: number = Config.ticksPerPart * partTimeEnd;\r\n            const endPinIndex: number = tone.note.getEndPinIndex(this.getCurrentPart());\r\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = tone.note.pins[endPinIndex];\r\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\r\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\r\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\r\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\r\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\r\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\r\n\r\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\r\n        }\r\n    }\r\n\r\n    private static computeChordExpression(chordSize: number): number {\r\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n    }\r\n\r\n    private computeTone(song: Song, channelIndex: number, samplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const roundedSamplesPerTick: number = Math.ceil(samplesPerTick);\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n        instrumentState.awake = true;\r\n        instrumentState.tonesAddedInThisTick = true;\r\n        if (!instrumentState.computed) {\r\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\r\n        }\r\n        const transition: Transition = instrument.getTransition();\r\n        const chord: Chord = instrument.getChord();\r\n        const chordExpression: number = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\r\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channelIndex);\r\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\r\n        const sampleTime: number = 1.0 / this.samplesPerSecond;\r\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n        const ticksIntoBar: number = this.getTicksIntoBar();\r\n        const partTimeStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n        const partTimeEnd: number = (ticksIntoBar + 1.0) / Config.ticksPerPart;\r\n        const currentPart: number = this.getCurrentPart();\r\n\r\n        let specialIntervalMult: number = 1.0;\r\n        tone.specialIntervalExpressionMult = 1.0;\r\n\r\n        //if (synth.isModActive(ModSetting.mstPan, channelIndex, tone.instrumentIndex)) {\r\n        //    startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n        //    endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n        //}\r\n\r\n        let toneIsOnLastTick: boolean = shouldFadeOutFast;\r\n        let intervalStart: number = 0.0;\r\n        let intervalEnd: number = 0.0;\r\n        let fadeExpressionStart: number = 1.0;\r\n        let fadeExpressionEnd: number = 1.0;\r\n        let chordExpressionStart: number = chordExpression;\r\n        let chordExpressionEnd: number = chordExpression;\r\n\r\n        let expressionReferencePitch: number = 16; // A low \"E\" as a MIDI pitch.\r\n        let basePitch: number = Config.keys[song.key].basePitch;\r\n        let baseExpression: number = 1.0;\r\n        let pitchDamping: number = 48;\r\n        if (instrument.type == InstrumentType.spectrum) {\r\n            baseExpression = Config.spectrumBaseExpression;\r\n            if (isNoiseChannel) {\r\n                basePitch = Config.spectrumBasePitch;\r\n                baseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\r\n            }\r\n            expressionReferencePitch = Config.spectrumBasePitch;\r\n            pitchDamping = 28;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            basePitch = Config.spectrumBasePitch;\r\n            baseExpression = Config.drumsetBaseExpression;\r\n            expressionReferencePitch = basePitch;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            basePitch = Config.chipNoises[instrument.chipNoise].basePitch;\r\n            baseExpression = Config.noiseBaseExpression;\r\n            expressionReferencePitch = basePitch;\r\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n        } else if (instrument.type == InstrumentType.fm) {\r\n            baseExpression = Config.fmBaseExpression;\r\n        } else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n            baseExpression = Config.chipBaseExpression;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            baseExpression = Config.harmonicsBaseExpression;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            baseExpression = Config.pwmBaseExpression;\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            baseExpression = Config.pickedStringBaseExpression;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            baseExpression = 1.0;\r\n            expressionReferencePitch = 0;\r\n            pitchDamping = 1.0;\r\n            basePitch = 0;\r\n        } else {\r\n            throw new Error(\"Unknown instrument type in computeTone.\");\r\n        }\r\n\r\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\r\n            tone.reset();\r\n        }\r\n        tone.freshlyAllocated = false;\r\n\r\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\r\n            tone.phaseDeltas[i] = 0.0;\r\n            tone.phaseDeltaScales[i] = 0.0;\r\n            tone.operatorExpressions[i] = 0.0;\r\n            tone.operatorExpressionDeltas[i] = 0.0;\r\n        }\r\n        tone.expression = 0.0;\r\n        tone.expressionDelta = 0.0;\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\r\n        }\r\n\r\n        if (released) {\r\n            const startTicksSinceReleased: number = tone.ticksSinceReleased;\r\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + 1.0;\r\n            intervalStart = intervalEnd = tone.lastInterval;\r\n            const fadeOutTicks: number = Math.abs(instrument.getFadeOutTicks());\r\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\r\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\r\n\r\n            if (shouldFadeOutFast) {\r\n                fadeExpressionEnd = 0.0;\r\n            }\r\n\r\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\r\n        } else if (tone.note == null) {\r\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\r\n            tone.lastInterval = 0;\r\n            tone.ticksSinceReleased = 0;\r\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\r\n        } else {\r\n            const note: Note = tone.note;\r\n            const nextNote: Note | null = tone.nextNote;\r\n\r\n            const noteStartPart: number = tone.noteStartPart;\r\n            const noteEndPart: number = tone.noteEndPart;\r\n\r\n\r\n            const endPinIndex: number = note.getEndPinIndex(currentPart);\r\n            const startPin: NotePin = note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = note.pins[endPinIndex];\r\n            const noteStartTick: number = noteStartPart * Config.ticksPerPart;\r\n            const noteEndTick: number = noteEndPart * Config.ticksPerPart;\r\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n            tone.ticksSinceReleased = 0;\r\n\r\n            const tickTimeStart: number = currentPart * Config.ticksPerPart + this.tick;\r\n            const tickTimeEnd: number = tickTimeStart + 1.0;\r\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n            fadeExpressionStart = 1.0;\r\n            fadeExpressionEnd = 1.0;\r\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n            tone.lastInterval = intervalEnd;\r\n\r\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\r\n                const fadeOutTicks: number = -instrument.getFadeOutTicks();\r\n                if (fadeOutTicks > 0.0) {\r\n                    // If the tone should fade out before the end of the note, do so here.\r\n                    const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\r\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\r\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        tone.isOnLastTick = toneIsOnLastTick;\r\n\r\n        let tmpNoteFilter: FilterSettings = instrument.noteFilter;\r\n        let startPoint: FilterControlPoint;\r\n        let endPoint: FilterControlPoint;\r\n\r\n        if (instrument.noteFilterType) {\r\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\r\n            const noteFilterSettingsStart: FilterSettings = instrument.noteFilter;\r\n            if (instrument.noteSubFilters[1] == null)\r\n                instrument.noteSubFilters[1] = new FilterSettings();\r\n            const noteFilterSettingsEnd: FilterSettings = instrument.noteSubFilters[1];\r\n\r\n            // Change location based on slider values\r\n            let startSimpleFreq: number = instrument.noteFilterSimpleCut;\r\n            let startSimpleGain: number = instrument.noteFilterSimplePeak;\r\n            let endSimpleFreq: number = instrument.noteFilterSimpleCut;\r\n            let endSimpleGain: number = instrument.noteFilterSimplePeak;\r\n            let filterChanges: boolean = false;\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\r\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\r\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\r\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\r\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n\r\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\r\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\r\n\r\n            startPoint = noteFilterSettingsStart.controlPoints[0];\r\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\r\n\r\n            // Temporarily override so that envelope computer uses appropriate computed note filter\r\n            instrument.noteFilter = noteFilterSettingsStart;\r\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\r\n        }\r\n\r\n        // Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\r\n        const envelopeComputer: EnvelopeComputer = tone.envelopeComputer;\r\n        envelopeComputer.computeEnvelopes(instrument, currentPart, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone);\r\n        const envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\r\n        const envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\r\n        instrument.noteFilter = tmpNoteFilter;\r\n\r\n        if (tone.note != null && transition.slides) {\r\n            // Slide interval and chordExpression at the start and/or end of the note if necessary.\r\n            const prevNote: Note | null = tone.prevNote;\r\n            const nextNote: Note | null = tone.nextNote;\r\n            if (prevNote != null) {\r\n                const intervalDiff: number = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\r\n                if (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\r\n                if (envelopeComputer.prevSlideEnd) intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\r\n                if (!chord.singleTone) {\r\n                    const chordSizeDiff: number = prevNote.pitches.length - tone.chordSize;\r\n                    if (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\r\n                    if (envelopeComputer.prevSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\r\n                }\r\n            }\r\n            if (nextNote != null) {\r\n                const intervalDiff: number = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\r\n                if (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\r\n                if (envelopeComputer.nextSlideEnd) intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\r\n                if (!chord.singleTone) {\r\n                    const chordSizeDiff: number = nextNote.pitches.length - tone.chordSize;\r\n                    if (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\r\n                    if (envelopeComputer.nextSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (effectsIncludePitchShift(instrument.effects)) {\r\n            let pitchShift: number = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\r\n            let pitchShiftScalarStart: number = 1.0;\r\n            let pitchShiftScalarEnd: number = 1.0;\r\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\r\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\r\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\r\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\r\n            }\r\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.pitchShift];\r\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.pitchShift];\r\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\r\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\r\n        }\r\n        if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.detune];\r\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.detune];\r\n            let modDetuneStart: number = instrument.detune;\r\n            let modDetuneEnd: number = instrument.detune;\r\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\r\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\r\n            }\r\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\r\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\r\n            }\r\n            intervalStart += Synth.detuneToCents((modDetuneStart) * envelopeStart) * Config.pitchesPerOctave / (12.0 * 100.0);\r\n            intervalEnd += Synth.detuneToCents((modDetuneEnd) * envelopeEnd) * Config.pitchesPerOctave / (12.0 * 100.0);\r\n        }\r\n\r\n        if (effectsIncludeVibrato(instrument.effects)) {\r\n            let delayTicks: number;\r\n            let vibratoAmplitudeStart: number;\r\n            let vibratoAmplitudeEnd: number;\r\n            // Custom vibrato\r\n            if (instrument.vibrato == Config.vibratos.length) {\r\n                delayTicks = instrument.vibratoDelay * 2; // Delay was changed from parts to ticks in BB v9\r\n                // Special case: if vibrato delay is max, NEVER vibrato.\r\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\r\n                    delayTicks = Number.POSITIVE_INFINITY;\r\n                vibratoAmplitudeStart = instrument.vibratoDepth;\r\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\r\n            } else {\r\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\r\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\r\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\r\n            }\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\r\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2; // Delay was changed from parts to ticks in BB v9\r\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\r\n                    delayTicks = Number.POSITIVE_INFINITY;\r\n\r\n            }\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\r\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\r\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\r\n            }\r\n\r\n\r\n            // To maintain pitch continuity, (mostly for picked string which retriggers impulse\r\n            // otherwise) remember the vibrato at the end of this run and reuse it at the start\r\n            // of the next run if available.\r\n            let vibratoStart: number;\r\n            if (tone.prevVibrato != null) {\r\n                vibratoStart = tone.prevVibrato;\r\n            } else {\r\n                let lfoStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\r\n                const vibratoDepthEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.vibratoDepth];\r\n                vibratoStart = vibratoAmplitudeStart * lfoStart * vibratoDepthEnvelopeStart;\r\n                if (delayTicks > 0.0) {\r\n                    const ticksUntilVibratoStart: number = delayTicks - envelopeComputer.noteTicksStart;\r\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\r\n                }\r\n            }\r\n\r\n            let lfoEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\r\n            const vibratoDepthEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.vibratoDepth];\r\n            if (instrument.type != InstrumentType.mod) {\r\n                let vibratoEnd: number = vibratoAmplitudeEnd * lfoEnd * vibratoDepthEnvelopeEnd;\r\n                if (delayTicks > 0.0) {\r\n                    const ticksUntilVibratoEnd: number = delayTicks - envelopeComputer.noteTicksEnd;\r\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\r\n                }\r\n\r\n                tone.prevVibrato = vibratoEnd;\r\n\r\n                intervalStart += vibratoStart;\r\n                intervalEnd += vibratoEnd;\r\n            }\r\n        }\r\n\r\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\r\n            // Fade in the beginning of the note.\r\n            const fadeInSeconds: number = instrument.getFadeInSeconds();\r\n            if (fadeInSeconds > 0.0) {\r\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStart / fadeInSeconds);\r\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEnd / fadeInSeconds);\r\n            }\r\n        }\r\n\r\n        if (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\r\n            // It's possible that the note will change while the user is editing it,\r\n            // but the tone's pitches don't get updated because the tone has already\r\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n            tone.drumsetPitch = tone.pitches[0];\r\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n        }\r\n\r\n        let noteFilterExpression: number = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\r\n        if (!effectsIncludeNoteFilter(instrument.effects)) {\r\n            tone.noteFilterCount = 0;\r\n        } else {\r\n\r\n            const noteAllFreqsEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterAllFreqs];\r\n            const noteAllFreqsEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterAllFreqs];\r\n\r\n            // Simple note filter\r\n            if (instrument.noteFilterType) {\r\n                const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0];\r\n                const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0];\r\n                const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0];\r\n                const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0];\r\n\r\n                startPoint!.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\r\n                endPoint!.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\r\n\r\n                if (tone.noteFilters.length < 1) tone.noteFilters[0] = new DynamicBiquadFilter();\r\n                tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\r\n                noteFilterExpression *= startPoint!.getVolumeCompensationMult();\r\n\r\n                tone.noteFilterCount = 1;\r\n            }\r\n            else {\r\n                const noteFilterSettings: FilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\r\n\r\n                for (let i: number = 0; i < noteFilterSettings.controlPointCount; i++) {\r\n                    const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0 + i];\r\n                    const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0 + i];\r\n                    const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0 + i];\r\n                    const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0 + i];\r\n                    let startPoint: FilterControlPoint = noteFilterSettings.controlPoints[i];\r\n                    const endPoint: FilterControlPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\r\n\r\n                    // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\r\n                    if (startPoint.type != endPoint.type) {\r\n                        startPoint = endPoint;\r\n                    }\r\n\r\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\r\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\r\n                    if (tone.noteFilters.length <= i) tone.noteFilters[i] = new DynamicBiquadFilter();\r\n                    tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n                    noteFilterExpression *= startPoint.getVolumeCompensationMult();\r\n                }\r\n                tone.noteFilterCount = noteFilterSettings.controlPointCount;\r\n            }\r\n        }\r\n\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            const drumsetFilterEnvelope: Envelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\r\n            // If the drumset lowpass cutoff decays, compensate by increasing expression.\r\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope)\r\n\r\n            // Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\r\n            let drumsetFilterEnvelopeStart: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);\r\n            let drumsetFilterEnvelopeEnd: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.noteSizeEnd);\r\n\r\n            // Apply slide interpolation to drumset envelope.\r\n            if (envelopeComputer.prevSlideStart) {\r\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);\r\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;\r\n            }\r\n            if (envelopeComputer.prevSlideEnd) {\r\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);\r\n                drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;\r\n            }\r\n            if (envelopeComputer.nextSlideStart) {\r\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);\r\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;\r\n            }\r\n            if (envelopeComputer.nextSlideEnd) {\r\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);\r\n                drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;\r\n            }\r\n\r\n            const point: FilterControlPoint = this.tempDrumSetControlPoint;\r\n            point.type = FilterType.lowPass;\r\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);\r\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\r\n            // Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\r\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\r\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\r\n            if (tone.noteFilters.length == tone.noteFilterCount) tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\r\n            tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\r\n            tone.noteFilterCount++;\r\n        }\r\n\r\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\r\n\r\n        if (instrument.type == InstrumentType.fm) {\r\n            // phase modulation!\r\n\r\n            let sineExpressionBoost: number = 1.0;\r\n            let totalCarrierExpression: number = 0.0;\r\n\r\n            let arpeggioInterval: number = 0;\r\n            const arpeggiates: boolean = chord.arpeggiates;\r\n            if (tone.pitchCount > 1 && arpeggiates) {\r\n                const arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, instrument.arpeggioPattern, arpeggio)] - tone.pitches[0];\r\n            }\r\n\r\n            const carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\r\n            for (let i: number = 0; i < Config.operatorCount; i++) {\r\n\r\n                const associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\r\n                const pitch: number = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n                const pitchStart: number = basePitch + (pitch + intervalStart) * intervalScale + interval;\r\n                const pitchEnd: number = basePitch + (pitch + intervalEnd) * intervalScale + interval;\r\n                const baseFreqStart: number = Instrument.frequencyFromPitch(pitchStart);\r\n                const baseFreqEnd: number = Instrument.frequencyFromPitch(pitchEnd);\r\n                const hzOffset: number = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n                const targetFreqStart: number = freqMult * baseFreqStart + hzOffset;\r\n                const targetFreqEnd: number = freqMult * baseFreqEnd + hzOffset;\r\n\r\n                const freqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.operatorFrequency0 + i];\r\n                const freqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.operatorFrequency0 + i];\r\n                let freqStart: number;\r\n                let freqEnd: number;\r\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\r\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\r\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\r\n                } else {\r\n                    freqStart = targetFreqStart;\r\n                    freqEnd = targetFreqEnd;\r\n                }\r\n                tone.phaseDeltas[i] = freqStart * sampleTime;\r\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\r\n\r\n                let amplitudeStart: number = instrument.operators[i].amplitude;\r\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\r\n                if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\r\n                    amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\r\n                    amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\r\n                }\r\n\r\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\r\n                let expressionStart: number = amplitudeMultStart;\r\n                let expressionEnd: number = amplitudeMultEnd;\r\n\r\n\r\n                if (i < carrierCount) {\r\n                    // carrier\r\n                    let pitchExpressionStart: number;\r\n                    if (tone.prevPitchExpressions[i] != null) {\r\n                        pitchExpressionStart = tone.prevPitchExpressions[i]!;\r\n                    } else {\r\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\r\n                    }\r\n                    const pitchExpressionEnd: number = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\r\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\r\n                    expressionStart *= pitchExpressionStart;\r\n                    expressionEnd *= pitchExpressionEnd;\r\n\r\n                    totalCarrierExpression += amplitudeCurveEnd;\r\n                } else {\r\n                    // modulator\r\n                    expressionStart *= Config.sineWaveLength * 1.5;\r\n                    expressionEnd *= Config.sineWaveLength * 1.5;\r\n\r\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\r\n                }\r\n\r\n                expressionStart *= envelopeStarts[EnvelopeComputeIndex.operatorAmplitude0 + i];\r\n                expressionEnd *= envelopeEnds[EnvelopeComputeIndex.operatorAmplitude0 + i];\r\n\r\n                // Check for mod-related volume delta\r\n                // @jummbus - This amplification is also applied to modulator FM operators which distorts the sound.\r\n                // The fix is to apply this only to carriers, but as this is a legacy bug and it can cause some interesting sounds, it's left in.\r\n                // You can use the mix volume modulator instead to avoid this effect.\r\n\r\n                if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                    const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\r\n                    const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\r\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n                }\r\n\r\n                tone.operatorExpressions[i] = expressionStart;\r\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n            }\r\n\r\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\r\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\r\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\r\n            const expressionStart: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\r\n            const expressionEnd: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\r\n            tone.expression = expressionStart;\r\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n\r\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\r\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\r\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\r\n            }\r\n\r\n            let feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n\r\n            let feedbackStart: number = feedbackAmplitudeStart * envelopeStarts[EnvelopeComputeIndex.feedbackAmplitude];\r\n            let feedbackEnd: number = feedbackAmplitudeEnd * envelopeEnds[EnvelopeComputeIndex.feedbackAmplitude];\r\n            tone.feedbackMult = feedbackStart;\r\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\r\n\r\n\r\n        } else {\r\n            const basePhaseDeltaScale: number = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / roundedSamplesPerTick);\r\n\r\n            let pitch: number = tone.pitches[0];\r\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {\r\n                const arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n                if (chord.customInterval) {\r\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, instrument.arpeggioPattern, arpeggio)] - tone.pitches[0];\r\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\r\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n                } else {\r\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, instrument.arpeggioPattern, arpeggio)];\r\n                }\r\n            }\r\n\r\n            const startPitch: number = basePitch + (pitch + intervalStart) * intervalScale;\r\n            const endPitch: number = basePitch + (pitch + intervalEnd) * intervalScale;\r\n            let pitchExpressionStart: number;\r\n            // TODO: use the second element of prevPitchExpressions for the unison voice, compute a separate expression delta for it.\r\n            if (tone.prevPitchExpressions[0] != null) {\r\n                pitchExpressionStart = tone.prevPitchExpressions[0]!;\r\n            } else {\r\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\r\n            }\r\n            const pitchExpressionEnd: number = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\r\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\r\n            let settingsExpressionMult: number = baseExpression * noteFilterExpression;\r\n\r\n            if (instrument.type == InstrumentType.noise) {\r\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\r\n            }\r\n            if (instrument.type == InstrumentType.chip) {\r\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\r\n            }\r\n            if (instrument.type == InstrumentType.pwm) {\r\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\r\n\r\n                // Check for PWM mods to this instrument\r\n                let pulseWidthModStart: number = basePulseWidth;\r\n                let pulseWidthModEnd: number = basePulseWidth;\r\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\r\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\r\n                }\r\n\r\n                const pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\r\n                const pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\r\n                tone.pulseWidth = pulseWidthStart;\r\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\r\n            }\r\n            if (instrument.type == InstrumentType.pickedString) {\r\n                // Check for sustain mods\r\n                let useSustainStart: number = instrument.stringSustain;\r\n                let useSustainEnd: number = instrument.stringSustain;\r\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\r\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\r\n                }\r\n\r\n                tone.stringSustainStart = useSustainStart;\r\n                tone.stringSustainEnd = useSustainEnd;\r\n\r\n                // Increase expression to compensate for string decay.\r\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\r\n\r\n            }\r\n\r\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\r\n                // These instruments have two waves at different frequencies for the unison feature.\r\n                const unison: Unison = Config.unisons[instrument.unison];\r\n                const voiceCountExpression: number = (instrument.type == InstrumentType.pickedString) ? 1 : unison.voices / 2.0;\r\n                settingsExpressionMult *= unison.expression * voiceCountExpression;\r\n                const unisonEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.unison];\r\n                const unisonEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.unison];\r\n                const unisonAStart: number = Math.pow(2.0, (unison.offset + unison.spread) * unisonEnvelopeStart / 12.0);\r\n                const unisonAEnd: number = Math.pow(2.0, (unison.offset + unison.spread) * unisonEnvelopeEnd / 12.0);\r\n                const unisonBStart: number = Math.pow(2.0, (unison.offset - unison.spread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;\r\n                const unisonBEnd: number = Math.pow(2.0, (unison.offset - unison.spread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;\r\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;\r\n                tone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;\r\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / roundedSamplesPerTick);\r\n                tone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);\r\n            } else {\r\n                tone.phaseDeltas[0] = startFreq * sampleTime;\r\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\r\n            }\r\n\r\n            let expressionStart: number = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\r\n            let expressionEnd: number = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\r\n\r\n            // Check for mod-related volume delta\r\n            if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\r\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\r\n                const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true)\r\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n            }\r\n\r\n            tone.expression = expressionStart;\r\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n\r\n            if (instrument.type == InstrumentType.pickedString) {\r\n                let stringDecayStart: number;\r\n                if (tone.prevStringDecay != null) {\r\n                    stringDecayStart = tone.prevStringDecay;\r\n                } else {\r\n                    const sustainEnvelopeStart: number = tone.envelopeComputer.envelopeStarts[EnvelopeComputeIndex.stringSustain];\r\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\r\n                }\r\n                const sustainEnvelopeEnd: number = tone.envelopeComputer.envelopeEnds[EnvelopeComputeIndex.stringSustain];\r\n                let stringDecayEnd: number = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\r\n                tone.prevStringDecay = stringDecayEnd;\r\n\r\n                const unison: Unison = Config.unisons[instrument.unison];\r\n                for (let i: number = tone.pickedStrings.length; i < unison.voices; i++) {\r\n                    tone.pickedStrings[i] = new PickedString();\r\n                }\r\n\r\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\r\n                    for (const pickedString of tone.pickedStrings) {\r\n                        // Force the picked string to retrigger the attack impulse at the start of the note.\r\n                        pickedString.delayIndex = -1;\r\n                    }\r\n                }\r\n\r\n                for (let i: number = 0; i < unison.voices; i++) {\r\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n        let effect: number = 0.0;\r\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\r\n        }\r\n        return effect;\r\n    }\r\n\r\n\r\n    public static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n        if (instrument.type == InstrumentType.fm) {\r\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n                const synthSource: string[] = [];\r\n\r\n                for (const line of Synth.fmSourceTemplate) {\r\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n                        const outputs: string[] = [];\r\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n                            outputs.push(\"operator\" + j + \"Scaled\");\r\n                        }\r\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\r\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n                                    let modulators = \"\";\r\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n                                    }\r\n\r\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n                                    if (feedbackIndices.length > 0) {\r\n                                        modulators += \" + feedbackMult * (\";\r\n                                        const feedbacks: string[] = [];\r\n                                        for (const modulatorNumber of feedbackIndices) {\r\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n                                        }\r\n                                        modulators += feedbacks.join(\" + \") + \")\";\r\n                                    }\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n                                } else {\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (line.indexOf(\"#\") != -1) {\r\n                        for (let j: number = 0; j < Config.operatorCount; j++) {\r\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\r\n                        }\r\n                    } else {\r\n                        synthSource.push(line);\r\n                    }\r\n                }\r\n\r\n                //console.log(synthSource.join(\"\\n\"));\r\n\r\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"bufferIndex\", \"roundedSamplesPerTick\", \"tone\", \"instrumentState\", synthSource.join(\"\\n\"));\r\n            }\r\n            return Synth.fmSynthFunctionCache[fingerprint];\r\n        } else if (instrument.type == InstrumentType.chip) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            return Synth.harmonicsSynth;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            return Synth.pulseWidthSynth;\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            return Synth.pickedStringSynth;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            return Synth.noiseSynth;\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            return Synth.spectrumSynth;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            return Synth.drumsetSynth;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            return Synth.modSynth;\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n        }\r\n    }\r\n\r\n    private static chipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const volumeScale = instrumentState.volumeScale;\r\n\r\n        // For all but aliasing custom chip, the first sample is duplicated at the end, so don't double-count it.\r\n        const waveLength: number = (aliases && instrumentState.type == InstrumentType.customChipWave) ? wave.length : wave.length - 1;\r\n\r\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unison!.sign;\r\n        if (instrumentState.unison!.voices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\r\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\r\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n        let prevWaveIntegralA: number = 0;\r\n        let prevWaveIntegralB: number = 0;\r\n\r\n        if (!aliases) {\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            prevWaveIntegralA = +wave[indexA];\r\n            prevWaveIntegralB = +wave[indexB];\r\n            prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n            prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n        }\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            let waveA: number;\r\n            let waveB: number;\r\n            let inputSample: number;\r\n\r\n            if (aliases) {\r\n                waveA = wave[(0 | phaseA) % waveLength];\r\n                waveB = wave[(0 | phaseB) % waveLength];\r\n                inputSample = waveA + waveB;\r\n            } else {\r\n                const phaseAInt: number = phaseA | 0;\r\n                const phaseBInt: number = phaseB | 0;\r\n                const indexA: number = phaseAInt % waveLength;\r\n                const indexB: number = phaseBInt % waveLength;\r\n                let nextWaveIntegralA: number = wave[indexA];\r\n                let nextWaveIntegralB: number = wave[indexB];\r\n                const phaseRatioA: number = phaseA - phaseAInt;\r\n                const phaseRatioB: number = phaseB - phaseBInt;\r\n                nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n                nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n                waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n                waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n                prevWaveIntegralA = nextWaveIntegralA;\r\n                prevWaveIntegralB = nextWaveIntegralB;\r\n                inputSample = waveA + waveB * unisonSign;\r\n            }\r\n\r\n            const sample: number = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample * volumeScale;\r\n\r\n            phaseDeltaA *= phaseDeltaScaleA;\r\n            phaseDeltaB *= phaseDeltaScaleB;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\r\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static harmonicsSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unison!.sign;\r\n        if (instrumentState.unison!.voices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\r\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\r\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = +wave[indexA];\r\n        let prevWaveIntegralB: number = +wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            const waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            const waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const inputSample: number = waveA + waveB * unisonSign;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phaseDeltaA *= phaseDeltaScaleA;\r\n            phaseDeltaB *= phaseDeltaScaleB;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\r\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static pickedStringSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        // This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\r\n        // all-pass filter for dispersion and with more control over the impulse harmonics.\r\n        // The source code is processed as a string before being compiled, in order to\r\n        // handle the unison feature. If unison is disabled or set to none, then only one\r\n        // string voice is required, otherwise two string voices are required. We only want\r\n        // to compute the minimum possible number of string voices, so omit the code for\r\n        // processing extra ones if possible. Any line containing a \"#\" is duplicated for\r\n        // each required voice, replacing the \"#\" with the voice index.\r\n\r\n        const voiceCount: number = instrumentState.unison!.voices;\r\n        let pickedStringFunction: Function = Synth.pickedStringFunctionCache[voiceCount];\r\n        if (pickedStringFunction == undefined) {\r\n            let pickedStringSource: string = \"\";\r\n\r\n            pickedStringSource += `\r\n\t\t\t\tconst Config = beepbox.Config;\r\n\t\t\t\tconst Synth = beepbox.Synth;\r\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\r\n\t\t\t\t\r\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\r\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\r\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\r\n\t\t\t\tlet shelfSample# = +pickedString#.shelfSample;\r\n\t\t\t\tlet shelfPrevInput# = +pickedString#.shelfPrevInput;\r\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\r\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\r\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\r\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\r\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\r\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\r\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\r\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\r\n\t\t\t\tlet shelfA1# = +pickedString#.shelfA1;\r\n\t\t\t\tlet shelfB0# = +pickedString#.shelfB0;\r\n\t\t\t\tlet shelfB1# = +pickedString#.shelfB1;\r\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\r\n\t\t\t\tconst shelfA1Delta# = +pickedString#.shelfA1Delta;\r\n\t\t\t\tconst shelfB0Delta# = +pickedString#.shelfB0Delta;\r\n\t\t\t\tconst shelfB1Delta# = +pickedString#.shelfB1Delta;\r\n\t\t\t\t\r\n\t\t\t\tlet expression = +tone.expression;\r\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;\r\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\r\n\t\t\t\t\r\n\t\t\t\tconst filters = tone.noteFilters;\r\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\r\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n\t\t\t\tconst applyFilters = Synth.applyFilters;\r\n\t\t\t\t\r\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\r\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\r\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\r\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\r\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\r\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\r\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\r\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\r\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tshelfSample# = shelfB0# * allPassSample# + shelfB1# * shelfPrevInput# - shelfA1# * shelfSample#;\r\n\t\t\t\t\tshelfPrevInput# = allPassSample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += shelfSample#;\r\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\r\n\t\t\t\t\tdelayIndex#++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst inputSample = (`\r\n\r\n            const sampleList: string[] = [];\r\n            for (let voice: number = 0; voice < voiceCount; voice++) {\r\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice == 1 ? \" * unisonSign\" : \"\"));\r\n            }\r\n\r\n            pickedStringSource += sampleList.join(\" + \");\r\n\r\n            pickedStringSource += `) * expression;\r\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\t\t\tinitialFilterInput1 = inputSample;\r\n\t\t\t\t\tdata[sampleIndex] += sample;\r\n\t\t\t\t\t\r\n\t\t\t\t\texpression += expressionDelta;\r\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\r\n\t\t\t\t\tallPassG# += allPassGDelta#;\r\n\t\t\t\t\tshelfA1# += shelfA1Delta#;\r\n\t\t\t\t\tshelfB0# += shelfB0Delta#;\r\n\t\t\t\t\tshelfB1# += shelfB1Delta#;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\r\n\t\t\t\tconst epsilon = (1.0e-24);\r\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(shelfSample#) || Math.abs(shelfSample#) < epsilon) shelfSample# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(shelfPrevInput#) || Math.abs(shelfPrevInput#) < epsilon) shelfPrevInput# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\r\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\r\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\r\n\t\t\t\tpickedString#.shelfSample = shelfSample#;\r\n\t\t\t\tpickedString#.shelfPrevInput = shelfPrevInput#;\r\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\r\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\r\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\r\n\t\t\t\tpickedString#.allPassG = allPassG#;\r\n\t\t\t\tpickedString#.shelfA1 = shelfA1#;\r\n\t\t\t\tpickedString#.shelfB0 = shelfB0#;\r\n\t\t\t\tpickedString#.shelfB1 = shelfB1#;\r\n\t\t\t\t\r\n\t\t\t\ttone.expression = expression;\r\n\t\t\t\t\r\n\t\t\t\tsynth.sanitizeFilters(filters);\r\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;`\r\n\r\n            // Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\r\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\r\n                const lines = [];\r\n                for (let voice: number = 0; voice < voiceCount; voice++) {\r\n                    lines.push(line.replace(/\\#/g, String(voice)));\r\n                }\r\n                return lines.join(\"\\n\");\r\n            });\r\n\r\n            //console.log(pickedStringSource);\r\n            pickedStringFunction = new Function(\"synth\", \"bufferIndex\", \"runLength\", \"tone\", \"instrumentState\", pickedStringSource);\r\n            Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\r\n        }\r\n\r\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\r\n    }\r\n\r\n    private static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrumentState: InstrumentState): void {\r\n        // TODO: If automation is involved, don't assume sliders will stay at zero.\r\n        // @jummbus - ^ Correct, removed the non-zero checks as modulation can change them.\r\n\r\n        const usesDistortion: boolean = effectsIncludeDistortion(instrumentState.effects);\r\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(instrumentState.effects);\r\n        const usesEqFilter: boolean = instrumentState.eqFilterCount > 0;\r\n        const usesPanning: boolean = effectsIncludePanning(instrumentState.effects);\r\n        const usesChorus: boolean = effectsIncludeChorus(instrumentState.effects);\r\n        const usesEcho: boolean = effectsIncludeEcho(instrumentState.effects);\r\n        const usesReverb: boolean = effectsIncludeReverb(instrumentState.effects);\r\n        let signature: number = 0; if (usesDistortion) signature = signature | 1;\r\n        signature = signature << 1; if (usesBitcrusher) signature = signature | 1;\r\n        signature = signature << 1; if (usesEqFilter) signature = signature | 1;\r\n        signature = signature << 1; if (usesPanning) signature = signature | 1;\r\n        signature = signature << 1; if (usesChorus) signature = signature | 1;\r\n        signature = signature << 1; if (usesEcho) signature = signature | 1;\r\n        signature = signature << 1; if (usesReverb) signature = signature | 1;\r\n\r\n        let effectsFunction: Function = Synth.effectsFunctionCache[signature];\r\n        if (effectsFunction == undefined) {\r\n            let effectsSource: string = \"\";\r\n\r\n            const usesDelays: boolean = usesChorus || usesReverb || usesEcho;\r\n\r\n            effectsSource += `\r\n\t\t\t\tconst Config = beepbox.Config;\r\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\r\n\t\t\t\t\r\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\r\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\r\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`\r\n            }\r\n\r\n            if (usesDistortion) {\r\n                // Distortion can sometimes create noticeable aliasing.\r\n                // It seems the established industry best practice for distortion antialiasing\r\n                // is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\r\n                // at the original nyquist frequency), perform the distortion, then downsample\r\n                // (the lowpass again followed by dropping in-between samples). This is\r\n                // \"mathematically correct\" in that it preserves only the intended frequencies,\r\n                // but it has several unfortunate tradeoffs depending on the choice of filter,\r\n                // introducing latency and/or time smearing, since no true brick wall filter\r\n                // exists. For the time being, I've opted to instead generate in-between input\r\n                // samples using fractional delay all-pass filters, and after distorting them,\r\n                // I \"downsample\" these with a simple weighted sum.\r\n\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\r\n\t\t\t\tlet distortion = instrumentState.distortion;\r\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\r\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\r\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\r\n\t\t\t\tconst distortionFractionalResolution = 4.0;\r\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\r\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\r\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\r\n\t\t\t\t\r\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\r\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\r\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\r\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\r\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\r\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\r\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\r\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\r\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\r\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\r\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\r\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\r\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet filters = instrumentState.eqFilters;\r\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\r\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\r\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\r\n\t\t\t\tconst applyFilters = beepbox.Synth.applyFilters;`\r\n            }\r\n\r\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\r\n            effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\r\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\r\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\r\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\r\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\r\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\r\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\r\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\r\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\r\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\r\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\r\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\r\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\r\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\r\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\r\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\r\n\t\t\t\t\r\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\r\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\r\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\r\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\r\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\r\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\r\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\r\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\r\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\r\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\r\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\r\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\r\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\r\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\r\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\r\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\r\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\r\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\r\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\r\n\t\t\t\tchorusPhase += chorusAngle * runLength;\r\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\r\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\r\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\r\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\r\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\r\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\r\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\r\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\r\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\r\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\r\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\r\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\r\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\r\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\r\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\r\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\r\n\t\t\t\t\r\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\r\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\r\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\r\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\r\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\r\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\r\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\r\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\r\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\r\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\r\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\r\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\r\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\r\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\r\n\t\t\t\t\r\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\r\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\r\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\r\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\r\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\r\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\r\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\r\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\r\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\r\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\r\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\r\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\r\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\r\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`\r\n\r\n            if (usesDistortion) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\r\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\r\n\t\t\t\t\tsample = distortionNextOutput;\r\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\r\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\r\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\r\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\r\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\r\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\r\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\r\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\r\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\r\n\t\t\t\t\tsample *= distortionOversampleCompensation;\r\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\r\n\t\t\t\t\tdistortion += distortionDelta;\r\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\r\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\r\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\r\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\r\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\r\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\r\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\r\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\r\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\r\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\r\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\r\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\r\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\r\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst inputSample = sample;\r\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\t\t\tinitialFilterInput1 = inputSample;`\r\n            }\r\n\r\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\r\n            effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tsample *= eqFilterVolume;\r\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\r\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\r\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\r\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\r\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\r\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\r\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\r\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\r\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\r\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\r\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\r\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\r\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\r\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\r\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\r\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`\r\n            } else {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet sampleL = sample;\r\n\t\t\t\t\tlet sampleR = sample;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\r\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\r\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\r\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\r\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\r\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\r\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\r\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\r\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\r\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\r\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\r\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\r\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\r\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\r\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\r\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\r\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\r\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\r\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\r\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\r\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\r\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\r\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\r\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\r\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\r\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\r\n\t\t\t\t\t\r\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\r\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\r\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\r\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\r\n\t\t\t\t\tsampleL += echoShelfSampleL;\r\n\t\t\t\t\tsampleR += echoShelfSampleR;\r\n\t\t\t\t\t\r\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\r\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\r\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\r\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\r\n\t\t\t\t\techoMult += echoMultDelta;\r\n                    `\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\r\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\r\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\r\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\r\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\r\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\r\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\r\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\r\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\r\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\r\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\r\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\r\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\r\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\r\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\r\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\r\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\r\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\r\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\r\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\r\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\r\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\r\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\r\n\t\t\t\t\treverb += reverbDelta;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\r\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\r\n\t\t\t\t\tmixVolume += mixVolumeDelta;`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\r\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\r\n\t\t\t\t\r\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\r\n\t\t\t\tconst epsilon = (1.0e-24);`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;`\r\n            }\r\n\r\n            if (usesDistortion) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.distortion = distortion;\r\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\r\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\r\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\r\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\r\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\r\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\r\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\r\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\r\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\r\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\r\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\r\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`\r\n\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\tsynth.sanitizeFilters(filters);\r\n\t\t\t\t// The filter input here is downstream from another filter so we\r\n\t\t\t\t// better make sure it's safe too.\r\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\r\n\t\t\t\t\tinitialFilterInput1 = 0.0;\r\n\t\t\t\t\tinitialFilterInput2 = 0.0;\r\n\t\t\t\t}\r\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\r\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\r\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\r\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`\r\n            }\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\r\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\r\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\r\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\r\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\r\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\r\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\r\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\r\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\r\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\r\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\r\n\t\t\t\tinstrumentState.echoMult = echoMult;\r\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\r\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\r\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\r\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\r\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\r\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\r\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\r\n\t\t\t\tinstrumentState.reverbMult = reverb;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\r\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\r\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\r\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\r\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`\r\n            }\r\n\r\n            //console.log(effectsSource);\r\n            effectsFunction = new Function(\"synth\", \"outputDataL\", \"outputDataR\", \"bufferIndex\", \"runLength\", \"instrumentState\", effectsSource);\r\n            Synth.effectsFunctionCache[signature] = effectsFunction;\r\n        }\r\n\r\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\r\n    }\r\n\r\n    private static pulseWidthSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n\r\n        let phaseDelta: number = tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phase: number = (tone.phases[0] % 1);\r\n\r\n        let pulseWidth: number = tone.pulseWidth;\r\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            const sawPhaseA: number = phase % 1;\r\n            const sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n            let pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \r\n            if (!instrument.aliases) {\r\n                if (sawPhaseA < phaseDelta) {\r\n                    var t = sawPhaseA / phaseDelta;\r\n                    pulseWave += (t + t - t * t - 1) * 0.5;\r\n                } else if (sawPhaseA > 1.0 - phaseDelta) {\r\n                    var t = (sawPhaseA - 1.0) / phaseDelta;\r\n                    pulseWave += (t + t + t * t + 1) * 0.5;\r\n                }\r\n                if (sawPhaseB < phaseDelta) {\r\n                    var t = sawPhaseB / phaseDelta;\r\n                    pulseWave -= (t + t - t * t - 1) * 0.5;\r\n                } else if (sawPhaseB > 1.0 - phaseDelta) {\r\n                    var t = (sawPhaseB - 1.0) / phaseDelta;\r\n                    pulseWave -= (t + t + t * t + 1) * 0.5;\r\n                }\r\n            }\r\n\r\n            const inputSample: number = pulseWave;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n            pulseWidth += pulseWidthDelta;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase;\r\n        tone.phaseDeltas[0] = phaseDelta;\r\n        tone.expression = expression;\r\n        tone.pulseWidth = pulseWidth;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static fmSourceTemplate: string[] = (`\r\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\r\n\t\tconst sineWave = beepbox.Config.sineWave;\r\n\t\t\t\r\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\r\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\r\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\r\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\r\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\r\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\r\n        const operator#Wave      = tone.operatorWaves[#].samples;\r\n\t\tlet feedbackMult         = +tone.feedbackMult;\r\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\r\n        let expression = +tone.expression;\r\n\t\tconst expressionDelta = +tone.expressionDelta;\r\n\t\t\r\n\t\tconst filters = tone.noteFilters;\r\n\t\tconst filterCount = tone.noteFilterCount|0;\r\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n\t\tconst applyFilters = beepbox.Synth.applyFilters;\r\n\t\t\r\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\r\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\r\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\t\t\t\t\r\n\t\t\tconst inputSample = fmOutput;\r\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\tinitialFilterInput1 = inputSample;\r\n\t\t\t\t\r\n\t\t\t\tfeedbackMult += feedbackDelta;\r\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\r\n\t\t\t\toperator#Phase += operator#PhaseDelta;\r\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\r\n\t\t\t\r\n\t\t\tconst output = sample * expression;\r\n\t\t\texpression += expressionDelta;\r\n\r\n\t\t\tdata[sampleIndex] += output;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\r\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\r\n\t\t    tone.feedbackOutputs[#] = operator#Output;\r\n\t\t    tone.feedbackMult = feedbackMult;\r\n\t\t    tone.expression = expression;\r\n\t\t\t\r\n\t\tsynth.sanitizeFilters(filters);\r\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t\t`).split(\"\\n\");\r\n\r\n    private static operatorSourceTemplate: string[] = (`\r\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\r\n\t\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\r\n                const operator#Sample   = operator#Wave[operator#Index];\r\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n\t\t`).split(\"\\n\");\r\n\r\n    private static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        let phaseDelta: number = +tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        if (tone.phases[0] == 0) {\r\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phase = Math.random() * Config.chipNoiseLength;\r\n        }\r\n        const phaseMask: number = Config.chipNoiseLength - 1;\r\n        let noiseSample: number = +tone.noiseSample;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\r\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\r\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta * instrumentState.noisePitchFilterMult);\r\n\r\n        const stopIndex: number = bufferIndex + runLength;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            const waveSample: number = wave[phase & phaseMask];\r\n\r\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\r\n\r\n            const inputSample: number = noiseSample;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.phaseDeltas[0] = phaseDelta;\r\n        tone.expression = expression;\r\n        tone.noiseSample = noiseSample;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const samplesInPeriod: number = (1 << 7);\r\n        let phaseDelta: number = tone.phaseDeltas[0] * samplesInPeriod;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let noiseSample: number = +tone.noiseSample;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\r\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\r\n\r\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\r\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\r\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n        const stopIndex: number = bufferIndex + runLength;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & phaseMask;\r\n            let waveSample: number = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            waveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\r\n\r\n\r\n            const inputSample: number = noiseSample;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\r\n        tone.phaseDeltas[0] = phaseDelta / samplesInPeriod;\r\n        tone.expression = expression;\r\n        tone.noiseSample = noiseSample;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        let wave: Float32Array = instrumentState.getDrumsetWave(tone.drumsetPitch!);\r\n        const referenceDelta: number = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch!);\r\n        let phaseDelta: number = tone.phaseDeltas[0] / referenceDelta;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\r\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\r\n\r\n        const stopIndex: number = bufferIndex + runLength;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & phaseMask;\r\n            let noiseSample: number = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\r\n\r\n            const inputSample: number = noiseSample;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\r\n        tone.phaseDeltas[0] = phaseDelta * referenceDelta;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static modSynth(synth: Synth, stereoBufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\r\n        // Note: present modulator value is tone.expressionStarts[0].\r\n\r\n        if (!synth.song) return;\r\n\r\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\r\n        // Flagged as invalid because unused by current settings, skip\r\n        if (instrument.invalidModulators[mod]) return;\r\n\r\n        let setting: number = instrument.modulators[mod];\r\n\r\n        // Generate list of used instruments\r\n        let usedInstruments: number[] = [];\r\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\r\n            // Instrument doesn't matter for song, just push a random index to run the modsynth once\r\n            usedInstruments.push(0);\r\n        } else {\r\n            // All\r\n            if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                for (let i: number = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\r\n                    usedInstruments.push(i);\r\n                }\r\n            }\r\n            // Active\r\n            else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)\r\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar)!.instruments;\r\n            } else {\r\n                usedInstruments.push(instrument.modInstruments[mod]);\r\n            }\r\n        }\r\n\r\n        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\r\n\r\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, mod, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\r\n\r\n            // Reset arps, but only at the start of the note\r\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\r\n                synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\r\n            }\r\n            // Denote next bar skip\r\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\r\n                synth.wantToSkip = true;\r\n            }\r\n            // Extra info for eq filter target needs to be set as well\r\n            else if (setting == Config.modulators.dictionary[\"eq filter\"].index) {\r\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n\r\n                if (!tgtInstrument.eqFilterType) {\r\n\r\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\r\n\r\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\r\n\r\n                        let pinIdx: number = 0;\r\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\r\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\r\n                        // 0 to 1 based on distance to next morph\r\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n\r\n                        // Compute the new settings to go to.\r\n                        if (tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\r\n                            tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\r\n                        } else {\r\n                            // No mutation will occur to the filter object so we can safely return it without copying\r\n                            tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;\r\n                        }\r\n\r\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\r\n                    else {\r\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\r\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                            if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {\r\n                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();\r\n                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\r\n                            }\r\n                        }\r\n                        if (tgtInstrument.tmpEqFilterEnd == null) {\r\n                            tgtInstrument.tmpEqFilterEnd = new FilterSettings();\r\n                            tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());\r\n                        }\r\n\r\n                        if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\r\n                            if (dotTarget % 2) { // X\r\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\r\n                            } else { // Y\r\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Extra info for note filter target needs to be set as well\r\n            else if (setting == Config.modulators.dictionary[\"note filter\"].index) {\r\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n\r\n                if (!tgtInstrument.noteFilterType) {\r\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\r\n\r\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\r\n\r\n                        let pinIdx: number = 0;\r\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\r\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\r\n                        // 0 to 1 based on distance to next morph\r\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n\r\n                        // Compute the new settings to go to.\r\n                        if (tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size] != null) {\r\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\r\n                        } else {\r\n                            // No mutation will occur to the filter object so we can safely return it without copying\r\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\r\n                        }\r\n\r\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\r\n                    else {\r\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\r\n\r\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\r\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\r\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\r\n                            }\r\n                        }\r\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\r\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\r\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\r\n                        }\r\n\r\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\r\n                            if (dotTarget % 2) { // X\r\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\r\n                            } else { // Y\r\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number {\r\n        let phase: number = Math.random() * waveLength;\r\n        const phaseMask: number = waveLength - 1;\r\n\r\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n        // otherwise they pop. Try to find a zero crossing.\r\n        let indexPrev: number = phase & phaseMask;\r\n        let wavePrev: number = wave[indexPrev];\r\n        const stride: number = 16;\r\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n            const indexNext: number = (indexPrev + stride) & phaseMask;\r\n            const waveNext: number = wave[indexNext];\r\n            if (wavePrev * waveNext <= 0.0) {\r\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n                for (let i: number = 0; i < stride; i++) {\r\n                    const innerIndexNext: number = (indexPrev + 1) & phaseMask;\r\n                    const innerWaveNext: number = wave[innerIndexNext];\r\n                    if (wavePrev * innerWaveNext <= 0.0) {\r\n                        // Found the zero crossing again! Now let's find the exact intersection.\r\n                        const slope: number = innerWaveNext - wavePrev;\r\n                        phase = indexPrev;\r\n                        if (Math.abs(slope) > 0.00000001) {\r\n                            phase += -wavePrev / slope;\r\n                        }\r\n                        phase = Math.max(0, phase) % waveLength;\r\n                        break;\r\n                    } else {\r\n                        indexPrev = innerIndexNext;\r\n                        wavePrev = innerWaveNext;\r\n                    }\r\n                }\r\n                break;\r\n            } else {\r\n                indexPrev = indexNext;\r\n                wavePrev = waveNext;\r\n            }\r\n        }\r\n\r\n        return phase;\r\n    }\r\n\r\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n    }\r\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n    }\r\n    public static noteSizeToVolumeMult(size: number): number {\r\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\r\n    }\r\n    public static volumeMultToNoteSize(volumeMult: number): number {\r\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\r\n    }\r\n\r\n    public static fadeInSettingToSeconds(setting: number): number {\r\n        return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\r\n    }\r\n    public static secondsToFadeInSetting(seconds: number): number {\r\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\r\n    }\r\n    public static fadeOutSettingToTicks(setting: number): number {\r\n        return Config.fadeOutTicks[setting];\r\n    }\r\n    public static ticksToFadeOutSetting(ticks: number): number {\r\n        let lower: number = Config.fadeOutTicks[0];\r\n        if (ticks <= lower) return 0;\r\n        for (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\r\n            let upper: number = Config.fadeOutTicks[i];\r\n            if (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\r\n            lower = upper;\r\n        }\r\n        return Config.fadeOutTicks.length - 1;\r\n    }\r\n\r\n    public static detuneToCents(detune: number): number {\r\n        // BeepBox formula, for reference:\r\n        // return detune * (Math.abs(detune) + 1) / 2;\r\n        return detune - Config.detuneCenter;\r\n    }\r\n    public static centsToDetune(cents: number): number {\r\n        // BeepBox formula, for reference:\r\n        // return Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\r\n        return cents + Config.detuneCenter;\r\n    }\r\n\r\n    public static getOperatorWave(waveform: number, pulseWidth: number) {\r\n        if (waveform != 3) {\r\n            return Config.operatorWaves[waveform];\r\n        }\r\n        else {\r\n            return Config.pwmOperatorWaves[pulseWidth];\r\n        }\r\n    }\r\n\r\n    private getSamplesPerTick(): number {\r\n        if (this.song == null) return 0;\r\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\r\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\r\n        }\r\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n    }\r\n\r\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\r\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n        return this.samplesPerSecond / tickPerSecond;\r\n    }\r\n\r\n    public static fittingPowerOfTwo(x: number): number {\r\n        return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\r\n    }\r\n\r\n    private sanitizeFilters(filters: DynamicBiquadFilter[]): void {\r\n        let reset: boolean = false;\r\n        for (const filter of filters) {\r\n            const output1: number = Math.abs(filter.output1);\r\n            const output2: number = Math.abs(filter.output2);\r\n            // If either is a large value, Infinity, or NaN, then just reset all filter history.\r\n            if (!(output1 < 100) || !(output2 < 100)) {\r\n                reset = true;\r\n                break;\r\n            }\r\n            if (output1 < epsilon) filter.output1 = 0.0;\r\n            if (output2 < epsilon) filter.output2 = 0.0;\r\n        }\r\n        if (reset) {\r\n            for (const filter of filters) {\r\n                filter.output1 = 0.0;\r\n                filter.output2 = 0.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\r\n        while (true) {\r\n            lastIndex--;\r\n            const index: number = lastIndex & mask;\r\n            const sample: number = Math.abs(delayLine[index]);\r\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\r\n            delayLine[index] = 0.0;\r\n        }\r\n    }\r\n\r\n    public static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\r\n        for (let i: number = 0; i < filterCount; i++) {\r\n            const filter: DynamicBiquadFilter = filters[i];\r\n            const output1: number = filter.output1;\r\n            const output2: number = filter.output2;\r\n            const a1: number = filter.a1;\r\n            const a2: number = filter.a2;\r\n            const b0: number = filter.b0;\r\n            const b1: number = filter.b1;\r\n            const b2: number = filter.b2;\r\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\r\n            filter.a1 = a1 + filter.a1Delta;\r\n            filter.a2 = a2 + filter.a2Delta;\r\n            if (filter.useMultiplicativeInputCoefficients) {\r\n                filter.b0 = b0 * filter.b0Delta;\r\n                filter.b1 = b1 * filter.b1Delta;\r\n                filter.b2 = b2 * filter.b2Delta;\r\n            } else {\r\n                filter.b0 = b0 + filter.b0Delta;\r\n                filter.b1 = b1 + filter.b1Delta;\r\n                filter.b2 = b2 + filter.b2Delta;\r\n            }\r\n            filter.output2 = output1;\r\n            filter.output1 = sample;\r\n            // Updating the input values is waste if the next filter doesn't exist...\r\n            input2 = output2;\r\n            input1 = output1;\r\n        }\r\n        return sample;\r\n    }\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config } from \"../synth/SynthConfig\";\r\nimport { ColorConfig } from \"../editor/ColorConfig\";\r\nimport { NotePin, Note, Pattern, Instrument, Channel, Synth } from \"../synth/synth\";\r\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\r\n\r\n\tconst {a, button, div, h1, input} = HTML;\r\n\tconst {svg, circle, rect, path} = SVG;\r\n\r\n\tdocument.head.appendChild(HTML.style({type: \"text/css\"}, `\r\n\tbody {\r\n\t\tcolor: ${ColorConfig.primaryText};\r\n\t\tbackground: ${ColorConfig.editorBackground};\r\n\t}\r\n\th1 {\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 14px;\r\n\t\tline-height: 22px;\r\n\t\ttext-align: initial;\r\n\t\tmargin: 0;\r\n\t}\r\n\ta {\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 12px;\r\n\t\tline-height: 22px;\r\n\t\twhite-space: nowrap;\r\n\t\tcolor: ${ColorConfig.linkAccent};\r\n\t}\r\n\tbutton {\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t\tposition: relative;\r\n\t\tborder: none;\r\n\t\tborder-radius: 5px;\r\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\tcolor: ${ColorConfig.primaryText};\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\tfont-family: inherit;\r\n\t}\r\n\tbutton:hover, button:focus {\r\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t}\r\n\t.playButton, .pauseButton {\r\n\t\tpadding-left: 24px;\r\n\t\tpadding-right: 6px;\r\n\t}\r\n\t.playButton::before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tleft: 6px;\r\n\t\ttop: 50%;\r\n\t\tmargin-top: -6px;\r\n\t\twidth: 12px;\r\n\t\theight: 12px;\r\n\t\tpointer-events: none;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\r\n\t\t-webkit-mask-repeat: no-repeat;\r\n\t\t-webkit-mask-position: center;\r\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\r\n\t\tmask-repeat: no-repeat;\r\n\t\tmask-position: center;\r\n\t}\r\n\t.pauseButton::before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tleft: 6px;\r\n\t\ttop: 50%;\r\n\t\tmargin-top: -6px;\r\n\t\twidth: 12px;\r\n\t\theight: 12px;\r\n\t\tpointer-events: none;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\r\n\t\t-webkit-mask-repeat: no-repeat;\r\n\t\t-webkit-mask-position: center;\r\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\r\n\t\tmask-repeat: no-repeat;\r\n\t\tmask-position: center;\r\n\t}\r\n\t\r\n\tinput[type=range] {\r\n\t\t-webkit-appearance: none;\r\n\t\tappearance: none;\r\n\t\theight: 16px;\r\n\t\tmargin: 0;\r\n\t\tcursor: pointer;\r\n\t\tbackground-color: ${ColorConfig.editorBackground};\r\n\t\ttouch-action: pan-y;\r\n\t}\r\n\tinput[type=range]:focus {\r\n\t\toutline: none;\r\n\t}\r\n\tinput[type=range]::-webkit-slider-runnable-track {\r\n\t\twidth: 100%;\r\n\t\theight: 4px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t}\r\n\tinput[type=range]::-webkit-slider-thumb {\r\n\t\theight: 16px;\r\n\t\twidth: 4px;\r\n\t\tborder-radius: 2px;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\tcursor: pointer;\r\n\t\t-webkit-appearance: none;\r\n\t\tmargin-top: -6px;\r\n\t}\r\n\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\r\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t}\r\n\tinput[type=range]::-moz-range-track {\r\n\t\twidth: 100%;\r\n\t\theight: 4px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t}\r\n\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\r\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t}\r\n\tinput[type=range]::-moz-range-thumb {\r\n\t\theight: 16px;\r\n\t\twidth: 4px;\r\n\t\tborder-radius: 2px;\r\n\t\tborder: none;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\tcursor: pointer;\r\n\t}\r\n\tinput[type=range]::-ms-track {\r\n\t\twidth: 100%;\r\n\t\theight: 4px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\tborder-color: transparent;\r\n\t}\r\n\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\r\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t}\r\n\tinput[type=range]::-ms-thumb {\r\n\t\theight: 16px;\r\n\t\twidth: 4px;\r\n\t\tborder-radius: 2px;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\tcursor: pointer;\r\n\t}\r\n`));\r\n\r\nColorConfig.setTheme(window.localStorage.getItem(\"colorTheme\") || \"jummbox classic\");\r\n\r\nlet prevHash: string | null = null;\r\nlet id: string = ((Math.random() * 0xffffffff) >>> 0).toString(16);\r\nlet pauseButtonDisplayed: boolean = false;\r\nlet animationRequest: number | null;\r\nlet zoomEnabled: boolean = false;\r\nlet timelineWidth: number = 1;\r\nlet outVolumeHistoricTimer: number = 0;\r\nlet outVolumeHistoricCap: number = 0;\r\n\r\nconst synth: Synth = new Synth();\r\nlet titleText: HTMLHeadingElement = h1({ style: \"flex-grow: 1; margin: 0 1px; margin-left: 10px; overflow: hidden;\" }, \"\");\r\n\tlet editLink: HTMLAnchorElement = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"✎ Edit\");\r\n\tlet copyLink: HTMLAnchorElement = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"⎘ Copy URL\");\r\n\tlet shareLink: HTMLAnchorElement = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"⤳ Share\");\r\n\tlet fullscreenLink: HTMLAnchorElement = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"⇱ Fullscreen\");\r\n\r\nlet draggingPlayhead: boolean = false;\r\n\tconst playButton: HTMLButtonElement = button({style: \"width: 100%; height: 100%; max-height: 50px;\"});\r\n\tconst playButtonContainer: HTMLDivElement = div({style: \"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;\"},\r\n\tplayButton,\r\n);\r\n\tconst loopIcon: SVGPathElement = path({d: \"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z\"});\r\n\tconst loopButton: HTMLButtonElement = button({title: \"loop\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"}, svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\r\n\tloopIcon,\r\n));\r\n\r\n\tconst volumeIcon: SVGSVGElement = svg({style: \"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;\", viewBox: \"0 0 12 12\"},\r\n\t\tpath({fill: ColorConfig.uiWidgetBackground, d: \"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z\"}),\r\n);\r\nconst volumeSlider: HTMLInputElement = input({ title: \"volume\", type: \"range\", value: 75, min: 0, max: 75, step: 1, style: \"width: 12vw; max-width: 100px; margin: 0 1px;\" });\r\n\r\n\tconst zoomIcon: SVGSVGElement = svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\r\n\t\tcircle({cx: \"5\", cy: \"5\", r: \"4.5\", \"stroke-width\": \"1\", stroke: \"currentColor\", fill: \"none\"}),\r\n\t\tpath({stroke: \"currentColor\", \"stroke-width\": \"2\", d: \"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5\", fill: \"none\"}),\r\n);\r\n\tconst zoomButton: HTMLButtonElement = button({title: \"zoom\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"},\r\n\tzoomIcon,\r\n);\r\n\r\n\tconst timeline: SVGSVGElement = svg({style: \"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;\"});\r\n\tconst playhead: HTMLDivElement = div({style: `position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${ColorConfig.playhead}; pointer-events: none;`});\r\n\tconst timelineContainer: HTMLDivElement = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;\"}, timeline, playhead);\r\n\tconst visualizationContainer: HTMLDivElement = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;\"}, timelineContainer);\r\n\r\nconst outVolumeBarBg: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"90%\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetBackground });\r\nconst outVolumeBar: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", height: \"50%\", width: \"0%\", x: \"5%\", y: \"25%\", fill: \"url('#volumeGrad2')\" });\r\nconst outVolumeCap: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetFocus });\r\nconst stop1: SVGStopElement = SVG.stop({ \"stop-color\": \"lime\", offset: \"60%\" });\r\nconst stop2: SVGStopElement = SVG.stop({ \"stop-color\": \"orange\", offset: \"90%\" });\r\nconst stop3: SVGStopElement = SVG.stop({ \"stop-color\": \"red\", offset: \"100%\" });\r\nconst gradient: SVGGradientElement = SVG.linearGradient({ id: \"volumeGrad2\", gradientUnits: \"userSpaceOnUse\" }, stop1, stop2, stop3);\r\nconst defs: SVGDefsElement = SVG.defs({}, gradient);\r\nconst volumeBarContainer: SVGSVGElement = SVG.svg({ style: `touch-action: none; overflow: hidden; margin: auto;`, width: \"160px\", height: \"10px\", preserveAspectRatio: \"none\" },\r\n\tdefs,\r\n\toutVolumeBarBg,\r\n\toutVolumeBar,\r\n\toutVolumeCap,\r\n);\r\n\r\ndocument.body.appendChild(visualizationContainer);\r\ndocument.body.appendChild(\r\n\t\tdiv({style: `flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;`},\r\n\t\tplayButtonContainer,\r\n\t\tloopButton,\r\n\t\tvolumeIcon,\r\n\t\tvolumeSlider,\r\n\t\tzoomButton,\r\n\t\tvolumeBarContainer,\r\n\t\ttitleText,\r\n\t\teditLink,\r\n\t\tcopyLink,\r\n\t\tshareLink,\r\n\t\tfullscreenLink,\r\n\t),\r\n);\r\n\r\n// Some browsers have an option to \"block third-party cookies\" (it's enabled by\r\n// default in icognito Chrome windows) that throws an error on trying to access\r\n// localStorage from cross-domain iframe such as this song player, so wrap the\r\n// access in a try-catch block to ignore the error instead of interrupting\r\n// execution.\r\nfunction setLocalStorage(key: string, value: string): void {\r\n\ttry {\r\n\t\tlocalStorage.setItem(key, value);\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n}\r\nfunction getLocalStorage(key: string): string | null {\r\n\ttry {\r\n\t\treturn localStorage.getItem(key);\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nfunction loadSong(songString: string, reuseParams: boolean): void {\r\n\tsynth.setSong(songString);\r\n\tsynth.snapToStart();\r\n\tconst updatedSongString: string = synth.song!.toBase64String();\r\n\teditLink.href = \"../#\" + updatedSongString;\r\n\t//@jummbus - these lines convert old url vers loaded into the player to the new url ver. The problem is, if special chars are included,\r\n\t// they appear to get double-encoded (e.g. the '%' in %20 is encoded again), which breaks the link. Disabled for now until I have a chance\r\n\t// to look into it more.\r\n\t//const hashQueryParams = new URLSearchParams(reuseParams ? location.hash.slice(1) : \"\");\r\n\t//hashQueryParams.set(\"song\", updatedSongString);\r\n\t//location.hash = hashQueryParams.toString();\r\n}\r\n\r\nfunction hashUpdatedExternally(): void {\r\n\tlet myHash: string = location.hash;\r\n\tif (prevHash == myHash || myHash == \"\") return;\r\n\t\t\r\n\tprevHash = myHash;\r\n\t\t\r\n\tif (myHash.charAt(0) == \"#\") {\r\n\t\tmyHash = myHash.substring(1);\r\n\t}\r\n\t\t\r\n\t\r\n\tfullscreenLink.href = location.href;\r\n\t\t\r\n\tfor (const parameter of myHash.split(\"&\")) {\r\n\t\tlet equalsIndex: number = parameter.indexOf(\"=\");\r\n\t\tif (equalsIndex != -1) {\r\n\t\t\tlet paramName: string = parameter.substring(0, equalsIndex);\r\n\t\t\tlet value: string = parameter.substring(equalsIndex + 1);\r\n\t\t\tswitch (paramName) {\r\n\t\t\t\tcase \"song\":\r\n\t\t\t\t\tloadSong(value, true);\r\n\t\t\t\t\tif (synth.song) {\r\n\t\t\t\t\t\ttitleText.textContent = synth.song.title;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//case \"title\":\r\n\t\t\t\t//\ttitleText.textContent = decodeURIComponent(value);\r\n\t\t\t\t//\tbreak;\r\n\t\t\t\tcase \"loop\":\r\n\t\t\t\t\tsynth.loopRepeatCount = (value != \"1\") ? 0 : -1;\r\n\t\t\t\t\trenderLoopIcon();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tloadSong(myHash, false);\r\n\t\t}\r\n\t}\r\n\t\t\r\n\trenderTimeline();\r\n}\r\n\r\nfunction onWindowResize(): void {\r\n\trenderTimeline();\r\n}\r\n\r\nfunction animate(): void {\r\n\tif (synth.playing) {\r\n\t\tanimationRequest = requestAnimationFrame(animate);\r\n\t\tif (getLocalStorage(\"playerId\") != id) {\r\n\t\t\tonTogglePlay();\r\n\t\t}\r\n\t\trenderPlayhead();\r\n\r\n\t\tvolumeUpdate();\r\n\t}\r\n\t\t\r\n\tif (pauseButtonDisplayed != synth.playing) {\r\n\t\trenderPlayButton();\r\n\t}\r\n\r\n}\r\n\r\nfunction volumeUpdate(): void {\r\n\tif (synth.song == null) {\r\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\r\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\r\n\t\treturn;\r\n}\r\n\toutVolumeHistoricTimer--;\r\n\tif (outVolumeHistoricTimer <= 0) {\r\n\t\toutVolumeHistoricCap -= 0.03;\r\n\t}\r\n\tif (synth.song.outVolumeCap > outVolumeHistoricCap) {\r\n\t\toutVolumeHistoricCap = synth.song.outVolumeCap;\r\n\t\toutVolumeHistoricTimer = 50;\r\n\t}\r\n\r\n\tanimateVolume(synth.song.outVolumeCap, outVolumeHistoricCap);\r\n\r\n\tif (!synth.playing) {\r\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\r\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\r\n\t}\r\n}\r\n\r\nfunction animateVolume(useOutVolumeCap: number, historicOutCap: number): void {\r\n\toutVolumeBar.setAttribute(\"width\", \"\" + Math.min(144, useOutVolumeCap * 144));\r\n\toutVolumeCap.setAttribute(\"x\", \"\" + (8 + Math.min(144, historicOutCap * 144)));\r\n}\r\n\r\nfunction onTogglePlay(): void {\r\n\tif (synth.song != null) {\r\n\t\tif (animationRequest != null) cancelAnimationFrame(animationRequest);\r\n\t\tanimationRequest = null;\r\n\t\tif (synth.playing) {\r\n\t\t\tsynth.pause();\r\n\t\t\tvolumeUpdate();\r\n\t\t} else {\r\n\t\t\tsynth.play();\r\n\t\t\tsetLocalStorage(\"playerId\", id);\r\n\t\t\tanimate();\r\n\t\t}\r\n\t}\r\n\trenderPlayButton();\r\n}\r\n\r\nfunction onToggleLoop(): void {\r\n\tif (synth.loopRepeatCount == -1) {\r\n\t\tsynth.loopRepeatCount = 0;\r\n\t} else {\r\n\t\tsynth.loopRepeatCount = -1;\r\n\t}\r\n\trenderLoopIcon();\r\n}\r\n\r\nfunction onVolumeChange(): void {\r\n\tsetLocalStorage(\"volume\", volumeSlider.value);\r\n\tsetSynthVolume();\r\n}\r\n\r\nfunction onToggleZoom(): void {\r\n\tzoomEnabled = !zoomEnabled;\r\n\trenderZoomIcon();\r\n\trenderTimeline();\r\n}\r\n\r\nfunction onTimelineMouseDown(event: MouseEvent): void {\r\n\tdraggingPlayhead = true;\r\n\tonTimelineMouseMove(event);\r\n}\r\n\r\nfunction onTimelineMouseMove(event: MouseEvent): void {\r\n\tevent.preventDefault();\r\n\tonTimelineCursorMove(event.clientX || event.pageX);\r\n}\r\n\r\nfunction onTimelineTouchDown(event: TouchEvent): void {\r\n\tdraggingPlayhead = true;\r\n\tonTimelineTouchMove(event);\r\n}\r\n\r\nfunction onTimelineTouchMove(event: TouchEvent): void {\r\n\tonTimelineCursorMove(event.touches[0].clientX);\r\n}\r\n\r\nfunction onTimelineCursorMove(mouseX: number): void {\r\n\tif (draggingPlayhead && synth.song != null) {\r\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\tsynth.playhead = synth.song.barCount * (mouseX - boundingRect.left) / (boundingRect.right - boundingRect.left);\r\n\t\tsynth.computeLatestModValues();\r\n\t\trenderPlayhead();\r\n\t}\r\n}\r\n\r\nfunction onTimelineCursorUp(): void {\r\n\tdraggingPlayhead = false;\r\n}\r\n\r\nfunction setSynthVolume(): void {\r\n\tconst volume: number = +volumeSlider.value;\r\n\tsynth.volume = Math.min(1.0, Math.pow(volume / 50.0, 0.5)) * Math.pow(2.0, (volume - 75.0) / 25.0);\r\n}\r\n\r\nfunction renderPlayhead(): void {\r\n\tif (synth.song != null) {\r\n\t\tlet pos: number = synth.playhead / synth.song.barCount;\r\n\t\tplayhead.style.left = (timelineWidth * pos) + \"px\";\r\n\t\t\t\r\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\tvisualizationContainer.scrollLeft = pos * (timelineWidth - boundingRect.width);\r\n\t}\r\n}\r\n\r\nfunction renderTimeline(): void {\r\n\ttimeline.innerHTML = \"\";\r\n\tif (synth.song == null) return;\r\n\t\t\r\n\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\t\r\n\tlet timelineHeight: number;\r\n\tlet windowOctaves: number;\r\n\tlet windowPitchCount: number;\r\n\t\t\r\n\tif (zoomEnabled) {\r\n\t\ttimelineHeight = boundingRect.height;\r\n\t\twindowOctaves = Math.max(1, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * 2))));\r\n\t\twindowPitchCount = windowOctaves * 12 + 1;\r\n\t\tconst semitoneHeight: number = (timelineHeight - 1) / windowPitchCount;\r\n\t\tconst targetBeatWidth: number = Math.max(8, semitoneHeight * 4);\r\n\t\ttimelineWidth = Math.max(boundingRect.width, targetBeatWidth * synth.song.barCount * synth.song.beatsPerBar);\r\n\t} else {\r\n\t\ttimelineWidth = boundingRect.width;\r\n\t\tconst targetSemitoneHeight: number = Math.max(1, timelineWidth / (synth.song.barCount * synth.song.beatsPerBar) / 6.0);\r\n\t\ttimelineHeight = Math.min(boundingRect.height, targetSemitoneHeight * (Config.maxPitch + 1) + 1);\r\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * targetSemitoneHeight))));\r\n\t\twindowPitchCount = windowOctaves * 12 + 1;\r\n\t}\r\n\t\t\r\n\ttimelineContainer.style.width = timelineWidth + \"px\";\r\n\ttimelineContainer.style.height = timelineHeight + \"px\";\r\n\ttimeline.style.width = timelineWidth + \"px\";\r\n\ttimeline.style.height = timelineHeight + \"px\";\r\n\t\t\r\n\tconst barWidth: number = timelineWidth / synth.song.barCount;\r\n\tconst partWidth: number = barWidth / (synth.song.beatsPerBar * Config.partsPerBeat);\r\n\r\n\t\tconst wavePitchHeight: number = (timelineHeight-1) / windowPitchCount;\r\n\t\tconst drumPitchHeight: number =  (timelineHeight-1) / Config.drumCount;\r\n\t\t\r\n\tfor (let bar: number = 0; bar < synth.song.barCount + 1; bar++) {\r\n\t\tconst color: string = (bar == synth.song.loopStart || bar == synth.song.loopStart + synth.song.loopLength) ? ColorConfig.loopAccent : ColorConfig.uiWidgetBackground;\r\n\t\t\ttimeline.appendChild(rect({x: bar * barWidth - 1, y: 0, width: 2, height: timelineHeight, fill: color}));\r\n\t}\r\n\t\t\r\n\tfor (let octave: number = 0; octave <= windowOctaves; octave++) {\r\n\t\t\ttimeline.appendChild(rect({x: 0, y: octave * 12 * wavePitchHeight, width: timelineWidth, height: wavePitchHeight + 1, fill: ColorConfig.tonic, opacity: 0.75}));\r\n\t}\r\n\t\t\r\n\tfor (let channel: number = synth.song.channels.length - 1 - synth.song.modChannelCount; channel >= 0; channel--) {\r\n\r\n\t\tconst isNoise: boolean = synth.song.getChannelIsNoise(channel);\r\n\t\tconst pitchHeight: number = isNoise ? drumPitchHeight : wavePitchHeight;\r\n\t\t\t\r\n\t\tconst configuredOctaveScroll: number = synth.song.channels[channel].octave;\r\n\t\tconst newOctaveScroll: number = Math.max(0, Math.min(Config.pitchOctaves - windowOctaves, Math.ceil(configuredOctaveScroll - windowOctaves * 0.5)));\r\n\t\t\t\r\n\t\tconst offsetY: number = newOctaveScroll * pitchHeight * 12 + timelineHeight - pitchHeight * 0.5 - 0.5;\r\n\t\t\t\r\n\t\tfor (let bar: number = 0; bar < synth.song.barCount; bar++) {\r\n\t\t\tconst pattern: Pattern | null = synth.song.getPattern(channel, bar);\r\n\t\t\tif (pattern == null) continue;\r\n\t\t\tconst offsetX: number = bar * barWidth;\r\n\t\t\t\t\r\n\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\tconst note: Note = pattern.notes[i];\r\n\t\t\t\t\t\r\n\t\t\t\tfor (const pitch of note.pitches) {\r\n\t\t\t\t\tconst d: string = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\r\n\t\t\t\t\t\tconst noteElement: SVGPathElement = path({d: d, fill: ColorConfig.getChannelColor(synth.song, channel).primaryChannel});\r\n\t\t\t\t\tif (isNoise) noteElement.style.opacity = String(0.6);\r\n\t\t\t\t\ttimeline.appendChild(noteElement);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\t\r\n\trenderPlayhead();\r\n}\r\n\r\nfunction drawNote(pitch: number, start: number, pins: NotePin[], radius: number, offsetX: number, offsetY: number, partWidth: number, pitchHeight: number): string {\r\n\tlet d: string = `M ${offsetX + partWidth * (start + pins[0].time)} ${offsetY - pitch * pitchHeight + radius * (pins[0].size / Config.noteSizeMax)} `; \r\n\tfor (let i: number = 0; i < pins.length; i++) {\r\n\t\tconst pin: NotePin = pins[i];\r\n\t\t\tconst x:   number = offsetX + partWidth * (start + pin.time);\r\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\r\n\t\tconst expression: number = pin.size / Config.noteSizeMax;\r\n\t\td += `L ${x} ${y - radius * expression} `;\r\n\t}\r\n\tfor (let i: number = pins.length - 1; i >= 0; i--) {\r\n\t\tconst pin: NotePin = pins[i];\r\n\t\t\tconst x:   number = offsetX + partWidth * (start + pin.time);\r\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\r\n\t\tconst expression: number = pin.size / Config.noteSizeMax;\r\n\t\td += `L ${x} ${y + radius * expression} `;\r\n\t}\r\n\treturn d;\r\n}\r\n\r\nfunction renderPlayButton(): void {\r\n\tif (synth.playing) {\r\n\t\tplayButton.classList.remove(\"playButton\");\r\n\t\tplayButton.classList.add(\"pauseButton\");\r\n\t\tplayButton.title = \"Pause (Space)\";\r\n\t\tplayButton.textContent = \"Pause\";\r\n\t} else {\r\n\t\tplayButton.classList.remove(\"pauseButton\");\r\n\t\tplayButton.classList.add(\"playButton\");\r\n\t\tplayButton.title = \"Play (Space)\";\r\n\t\tplayButton.textContent = \"Play\";\r\n\t}\r\n\tpauseButtonDisplayed = synth.playing;\r\n}\r\n\r\nfunction renderLoopIcon(): void {\r\n\tloopIcon.setAttribute(\"fill\", (synth.loopRepeatCount == -1) ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground);\r\n}\r\n\r\nfunction renderZoomIcon(): void {\r\n\tzoomIcon.style.color = zoomEnabled ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground;\r\n}\r\n\r\nfunction onKeyPressed(event: KeyboardEvent): void {\r\n\tswitch (event.keyCode) {\r\n\t\tcase 70: // first bar\r\n\t\t\tsynth.playhead = 0;\r\n\t\t\tsynth.computeLatestModValues();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 32: // space\r\n\t\t\tonTogglePlay();\r\n\t\t\tsynth.computeLatestModValues();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 219: // left brace\r\n\t\t\tsynth.goToPrevBar();\r\n\t\t\tsynth.computeLatestModValues();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 221: // right brace\r\n\t\t\tsynth.goToNextBar();\r\n\t\t\tsynth.computeLatestModValues();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction onCopyClicked(): void {\r\n\t// Set as any to allow compilation without clipboard types (since, uh, I didn't write this bit and don't know the proper types library) -jummbus\r\n\tlet nav: any;\r\n\tnav = navigator;\r\n\r\n\tif (nav.clipboard && nav.clipboard.writeText) {\r\n\t\tnav.clipboard.writeText(location.href).catch(() => {\r\n\t\t\twindow.prompt(\"Copy to clipboard:\", location.href);\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\tconst textField: HTMLTextAreaElement = document.createElement(\"textarea\");\r\n\ttextField.textContent = location.href;\r\n\tdocument.body.appendChild(textField);\r\n\ttextField.select();\r\n\tconst succeeded: boolean = document.execCommand(\"copy\");\r\n\ttextField.remove();\r\n\tif (!succeeded) window.prompt(\"Copy this:\", location.href);\r\n}\r\n\r\nfunction onShareClicked(): void {\r\n\t(<any>navigator).share({ url: location.href });\r\n}\r\n\r\n\tif ( top !== self ) {\r\n\t// In an iframe.\r\n\tcopyLink.style.display = \"none\";\r\n\tshareLink.style.display = \"none\";\r\n} else {\r\n\t// Fullscreen.\r\n\tfullscreenLink.style.display = \"none\";\r\n\tif (!(\"share\" in navigator)) shareLink.style.display = \"none\";\r\n}\r\n\r\nif (getLocalStorage(\"volume\") != null) {\r\n\tvolumeSlider.value = getLocalStorage(\"volume\")!;\r\n}\r\nsetSynthVolume();\r\n\r\nwindow.addEventListener(\"resize\", onWindowResize);\r\nwindow.addEventListener(\"keydown\", onKeyPressed);\r\n\r\ntimeline.addEventListener(\"mousedown\", onTimelineMouseDown);\r\nwindow.addEventListener(\"mousemove\", onTimelineMouseMove);\r\nwindow.addEventListener(\"mouseup\", onTimelineCursorUp);\r\ntimeline.addEventListener(\"touchstart\", onTimelineTouchDown);\r\ntimeline.addEventListener(\"touchmove\", onTimelineTouchMove);\r\ntimeline.addEventListener(\"touchend\", onTimelineCursorUp);\r\ntimeline.addEventListener(\"touchcancel\", onTimelineCursorUp);\r\n\r\nplayButton.addEventListener(\"click\", onTogglePlay);\r\nloopButton.addEventListener(\"click\", onToggleLoop);\r\nvolumeSlider.addEventListener(\"input\", onVolumeChange);\r\nzoomButton.addEventListener(\"click\", onToggleZoom);\r\ncopyLink.addEventListener(\"click\", onCopyClicked);\r\nshareLink.addEventListener(\"click\", onShareClicked);\r\nwindow.addEventListener(\"hashchange\", hashUpdatedExternally);\r\n\r\nhashUpdatedExternally();\r\nrenderLoopIcon();\r\nrenderZoomIcon();\r\nrenderPlayButton();\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\n\texport {Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, NotePin, Note, Pattern, Instrument, Channel, Synth};"],"mappings":"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"}